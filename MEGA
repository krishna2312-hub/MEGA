package com.pegarules.generated.testgen;

/*
 * Copyright (c) 2022 Pegasystems Inc.
 * All rights reserved.
 *
 * This software is governed by a License Agreement that restricts its
 * use.  The software contains valuable trade secrets and proprietary
 * information of Pegasystems Inc and is protected by federal copyright
 * law.  It may not be copied, modified, translated or distributed in any
 * form or medium, disclosed to third parties or used in any manner not
 * expressly provided for in said License Agreement except with written
 * authorization from Pegasystems Inc.
 */
import com.pega.ibm.icu.math.BigDecimal;
import com.pega.pegarules.jsptags.TagTools;
import com.pega.pegarules.priv.AbstractFUASupport;
import com.pega.pegarules.priv.FUAUtil;
import com.pega.pegarules.priv.LogHelper;
import com.pega.pegarules.priv.PegaAPI;
import com.pega.pegarules.priv.clipboard.PegaClipboardPage;
import com.pega.pegarules.priv.database.*;
import com.pega.pegarules.priv.generator.AssemblyParameters;
import com.pega.pegarules.priv.generator.DependentRuleInfo;
import com.pega.pegarules.priv.runtime.ComplexParameterPage;
import com.pega.pegarules.priv.runtime.IActionRequest;
import com.pega.pegarules.priv.runtime.IActionRequestRegistrar;
import com.pega.pegarules.priv.runtime.IAutoStreamRuntime;
import com.pega.pegarules.priv.runtime.PegaStreamAPI;
import com.pega.pegarules.priv.runtime.jsp.StreamBuilderBase;
import com.pega.pegarules.priv.runtime.jsp.StreamBuilderSection;
import com.pega.pegarules.pub.*;
import com.pega.pegarules.pub.clipboard.*;
import com.pega.pegarules.pub.context.*;
import com.pega.pegarules.pub.database.*;
import com.pega.pegarules.pub.dictionary.*;
import com.pega.pegarules.pub.generator.*;
import com.pega.pegarules.pub.infengine.*;
import com.pega.pegarules.pub.presence.*;
import com.pega.pegarules.pub.runtime.*;
import com.pega.pegarules.pub.services.*;
import com.pega.pegarules.pub.util.*;
import com.pega.platform.clipboard.query.PageListQuery;
import com.pega.platform.clipboard.query.PageQuery;
import com.pega.platform.clipboard.query.PropertyQuery;
import com.pega.platform.clipboard.query.ScalarListQuery;
import com.pega.platform.clipboard.query.ScalarValueQuery;
import com.pega.platform.executionengine.runtime.Loadtime;
import com.pegarules.generated.*;
import java.io.*;
import java.util.*;
import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

/**
 * Builds JSP stream GOV-EPASS-WORK-EPASSREGISTRATION!LOGIN.
 */
public class Rule_HTML_Section_GOV_EPass_Work_EPassRegistration_Login_Stream_20210708T122813_214_GMT
        extends StreamBuilderSection implements StreamBuilder, FUASupport,
        FUAReusable, WebAllowable {
    private static final LogHelper oLog = new LogHelper(
            "Rule_HTML_Section.Login.GOV_EPass_Work_EPassRegistration.Stream");
    private static Map<String, String[]> oCellRuntimeParamsMap = new HashMap<String, String[]>();
    private static Map<String, String> oControlPathsMap = new HashMap<String, String>();
    private static Map<String, AssemblyParameters> oAssemblyParamsMap = null;
    private static final int pzChecksum = 727232034;
    private static boolean pz_isValidAssembly = true;
    /** The current stream builder. */
    /** Properties of the stream definition for the stream that included the current stream (or null if none). */
    private Map mParentStreamProperties = null;

    /** The handle of the current stream. */
    protected String pz_CurrentRuleKey;
    private IControlRuntimeUtilities controlRuntimeUtilities = null;

    /**
     * Creates a stream builder.
     *
     * @param aContext the current executable
     */
    public Rule_HTML_Section_GOV_EPass_Work_EPassRegistration_Login_Stream_20210708T122813_214_GMT(
            com.pega.pegarules.priv.PegaAPI aContext) {
        cleanForReuse(aContext);
        controlRuntimeUtilities = tools.getControlUtilities();
        initAssemblyParameters(tools);
    }

    public static Map<String, AssemblyParameters> getAssemblyParametersMap(
            StreamBuilderToolKit tools) {
        initAssemblyParameters(tools);
        Map<String, AssemblyParameters> clone = new HashMap<String, AssemblyParameters>();
        clone.putAll(oAssemblyParamsMap);
        return clone;
    }

    public static void initAssemblyParameters(StreamBuilderToolKit tools) {
        try {
            if (oAssemblyParamsMap == null || oAssemblyParamsMap.isEmpty()) {
                oAssemblyParamsMap = tools.getControlUtilities()
                        .getAssemblyParamsMap(oControlPathsMap, tools,
                                oCellRuntimeParamsMap, pxUniqueStreamHash);
                if (oAssemblyParamsMap != null && !oAssemblyParamsMap.isEmpty()) {
                    oControlPathsMap = null;
                    oCellRuntimeParamsMap = null;
                }
            }
        } catch (IllegalStateException e) {
            pz_isValidAssembly = false;
        }
    }

    public boolean isAllowedInWeb() {
        return true;
    }

    private static String pxUniqueStreamHash = "aae9e24f51a613985318763e6d6cab30a4039dfc";
    private boolean pxIsNonTemplateStream = false;
    private char previousTemplatingStatus = '\0';

    public void execute() {
        if (!pz_isValidAssembly) {
            throw new PRRuntimeException("Invalid Section Assembly ");
        }
        previousTemplatingStatus = '\0';
        pzAuto.beginStream(pega);
        initRequiredPages();
        pageContext = pega.getJSPFactory().getPageContext(mHttpServlet,
                request, mStreamResponse, null, true, 0, true);
        application = pageContext.getServletContext();
        out = pageContext.getOut();
        session = pageContext.getSession();
        mStreamResponse.setContentType("text/html;charset=UTF-8");
        try {
            pxUniqueStreamHash = "aae9e24f51a613985318763e6d6cab30a4039dfc";
            pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                    .pushSection("Login", pxUniqueStreamHash);
            pxIsNonTemplateStream = hasNonTemplateMethod_1();
            pzAuto.getUIComponentRuntime()
                    .getRuntimeContextTree()
                    .saveValue(
                            com.pega.pegarules.priv.runtime.ui.IRuntimeContextTree.PX_UNIQUE_STREAMHASH,
                            pxUniqueStreamHash);
            if (!pzAuto
                    .getUIComponentRuntime()
                    .getRuntimeContextTree()
                    .canProcessSection(pxIsNonTemplateStream, false,
                            pxUniqueStreamHash + "_1", false)) {
                pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                        .popSection();
                return;
            }
            if (previousTemplatingStatus == '\0') {
                previousTemplatingStatus = pzAuto.getUIComponentRuntime()
                        .getTemplatingUIStatus();
            }
            pzAuto.getUIComponentRuntime()
                    .getRuntimeContextTree()
                    .saveValue(
                            com.pega.pegarules.priv.runtime.ui.IRuntimeContextTree.PX_IS_NONTEMPLATE_STREAM,
                            String.valueOf(pxIsNonTemplateStream));
            /*
             * Begin RULE-HTML-SECTION GOV-EPASS-WORK-EPASSREGISTRATION LOGIN #20210708T122813.214 GMT
             * Set up context.
             */
            final String prevRuleKey_1 = pz_CurrentRuleKey;
            pz_CurrentRuleKey = "RULE-HTML-SECTION GOV-EPASS-WORK-EPASSREGISTRATION LOGIN #20210708T122813.214 GMT";
            final String prevClass_1 = mStreamResponse.getJspBaseClass();
            mStreamResponse.setJspBaseClass("Rule-HTML-Section");
            final Map prevPropDefs_1 = mStreamResponse.getPropertyDefinitions();
            mStreamResponse.setPropertyDefinitions(oPropDefinitions_1);
            if (mParentStreamProperties == null) {
                mParentStreamProperties = pega.getStreamProperties();
                if (mParentStreamProperties == null) {
                    mParentStreamProperties = Collections.EMPTY_MAP;
                }
            }
            pega.setStreamProperties(oStreamProperties_1);
            try {
                if (((com.pega.pegarules.priv.runtime.PegaStreamAPI) pega)
                        .streamProlog(oTraceInfo_0)) {
                    if (!pzDispatchToInvokedMethod()) {

                        performStream_1();

                    }
                }
            } catch (Throwable thr) {
                pzSection.abortComponent();
                oLog.error(pzAuto.getException().getSectionMsg(), thr);
                throw new PRRuntimeException(pzAuto.getException()
                        .getSectionMsg() + " : " + thr.getMessage(), thr);
            } finally {
                mStreamResponse.setPropertyDefinitions(prevPropDefs_1);
                mStreamResponse.setJspBaseClass(prevClass_1);
                pz_CurrentRuleKey = prevRuleKey_1;
                ((com.pega.pegarules.priv.runtime.PegaStreamAPI) pega)
                        .streamEpilog(oTraceInfo_0, false);
                pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                        .popSection();
                pzAuto.getUIComponentRuntime().resetTemplatingUIStatus(
                        previousTemplatingStatus);
            }
            /* end RULE-HTML-SECTION GOV-EPASS-WORK-EPASSREGISTRATION LOGIN #20210708T122813.214 GMT */
        } catch (Throwable ex) {
            handleError(ex);
        } finally {
            pzAuto.finishStream();
            if (pega.getJSPFactory() != null) {
                pega.getJSPFactory().releasePageContext(pageContext);
            }
            pega.returnHTTPServletRequest(request);
        }
    }

    public void fuaInit() {
    }

    public void fuaDestroy() {
    }

    private static final String oDependencies[] = {
            "Rule-Obj-Activity:PZASSEMBLEPREPROCESS",
            "Rule-Obj-Property:WEOFFERYOUWITH", "Rule-HTML-Property:PXICON",
            "Rule-HTML-Property:PXBUTTON", "Rule-HTML-Property:PXRADIOBUTTONS" };

    public String[] getUsedRules() {
        return oDependencies;
    }

    private static final DependentRuleInfo[] oDependentRuleInfos = {
            new DependentRuleInfo(
                    "PZASSEMBLEPREPROCESS",
                    "Rule-Obj-Activity",
                    "RULE-HTML-SECTION",
                    true,
                    "Rule-HTML-Section",
                    "Pega-UIEngine",
                    "08-03-01",
                    "RULE-OBJ-ACTIVITY RULE-HTML-SECTION PZASSEMBLEPREPROCESS #20190207T102426.651 GMT",
                    "!PZASSEMBLEPREPROCESS", true, false,
                    "ABSOLUTE_IS_NOT_PRIMARY", 1),
            new DependentRuleInfo(
                    "WEOFFERYOUWITH",
                    "Rule-Obj-Property",
                    "GOV-EPASS-WORK-EPASSREGISTRATION",
                    true,
                    "GOV-EPass-Work-EPassRegistration",
                    "EPass",
                    "01-01-01",
                    "RULE-OBJ-PROPERTY GOV-EPASS-WORK-EPASSREGISTRATION WEOFFERYOUWITH #20210708T122720.775 GMT",
                    "!WEOFFERYOUWITH", true, false, "ABSOLUTE_IS_NOT_PRIMARY",
                    1),
            new DependentRuleInfo("PXICON", "Rule-HTML-Property", "", false,
                    "", "Pega-Gadgets", "08-03-01",
                    "RULE-HTML-PROPERTY PXICON #20190131T183501.575 GMT",
                    "PXICON", true, false, "ABSOLUTE_CLASSLESS", -794576025),
            new DependentRuleInfo("PXBUTTON", "Rule-HTML-Property", "", false,
                    "", "Pega-Gadgets", "08-03-01",
                    "RULE-HTML-PROPERTY PXBUTTON #20190131T183501.513 GMT",
                    "PXBUTTON", true, false, "ABSOLUTE_CLASSLESS", 1928622883),
            new DependentRuleInfo(
                    "PXRADIOBUTTONS",
                    "Rule-HTML-Property",
                    "",
                    false,
                    "",
                    "Pega-Gadgets",
                    "08-03-01",
                    "RULE-HTML-PROPERTY PXRADIOBUTTONS #20190131T183501.652 GMT",
                    "PXRADIOBUTTONS", true, false, "ABSOLUTE_CLASSLESS",
                    2074724095) };

    /**
    * This method returns the set of dependent rules required to build
    * the generated code and (possibly) whole classes that the rules assembler declared.
    * @return array of <code>DependentRuleInfo</code> objects.
    */
    public DependentRuleInfo[] getDependentRuleInfos() {
        return oDependentRuleInfos;
    }

    //	Rules used in this assembly (order and duplicates ARE significant to hash code) :
    //	RULE-HTML-PROPERTY PXICON #20190131T183501.575 GMT:20190131T183501.575 GMT
    //	RULE-HTML-PROPERTY PXICON #20190131T183501.575 GMT:20190131T183501.575 GMT
    //	RULE-HTML-PROPERTY PXRADIOBUTTONS #20190131T183501.652 GMT:20190131T183501.652 GMT
    //	RULE-OBJ-PROPERTY GOV-EPASS-WORK-EPASSREGISTRATION WEOFFERYOUWITH #20210708T122720.775 GMT:20210708T122720.875 GMT
    //	RULE-HTML-PROPERTY PXBUTTON #20190131T183501.513 GMT:20190131T183501.513 GMT
    //	RULE-HTML-PROPERTY PXICON #20190131T183501.575 GMT:20190131T183501.575 GMT
    //	RULE-OBJ-ACTIVITY RULE-HTML-SECTION PZASSEMBLEPREPROCESS #20190207T102426.651 GMT:20190430T113026.575 GMT
    //	simpleLayout_6(
    //	simpleLayout_2(
    //	simpleLayout_10(
    //	simpleLayout_5(
    //	simpleLayout_7(
    //	simpleLayout_4(
    //	simpleLayout_9(
    //	simpleLayout_8(
    //	simpleLayout_1(
    //	simpleLayout_3(

    //	Functions used during this assembly :
    //	RULE-UTILITY-FUNCTION DATETIME CURRENTDATETIME #20180713T131432.995 GMT:20180713T131432.995 GMT
    //	RULE-UTILITY-FUNCTION DATETIME FORMATDATETIME #20180713T131433.041 GMT:20180713T131433.041 GMT
    //	RULE-UTILITY-FUNCTION DEFAULT HASMESSAGES #20180713T131436.731 GMT:20180713T131436.731 GMT
    //	RULE-UTILITY-FUNCTION HARNESS GENERATECLIENTWHENDIV #20180713T133337.849 GMT:20180713T133337.849 GMT
    //	RULE-UTILITY-FUNCTION HARNESS GENERATESECTIONBODYHTML--(STRING8119D405D65E5FC1B82614EF9838EE7F #20180713T133337.906 GMT:20180719T163147.873 GMT
    //	RULE-UTILITY-FUNCTION HARNESS GENERATESECTIONHTML--(CLIPBOARDPAGE,CLIPBOARDPAGE) #20190130T075719.993 GMT:20190530T084144.624 GMT
    //	RULE-UTILITY-FUNCTION HARNESS GENERATESECTIONPROPERTYPARAMS--(12B0C95B359D6764824177DF4BC335BF #20181206T131216.951 GMT:20181206T131216.951 GMT
    //	RULE-UTILITY-FUNCTION HARNESS GENERATESETDEFAULTVALUES--(CLIPBBDB0FDAA1582A08C0911BE4E853713C8 #20191129T095927.918 GMT:20191129T095927.918 GMT
    //	RULE-UTILITY-FUNCTION HARNESS GETCLIENTWHENPROPERTIES #20180713T133337.962 GMT:20180713T133337.962 GMT
    //	RULE-UTILITY-FUNCTION HARNESS GRIDHEADERELEMENTS--(STRINGBUFFE2CEB5A8FA884B8FB8C9CC7705D04E287 #20190619T091427.908 GMT:20190818T070142.143 GMT
    //	RULE-UTILITY-FUNCTION HARNESS ISNOTJSP #20180713T132451.140 GMT:20180713T132451.140 GMT
    //	RULE-UTILITY-FUNCTION HARNESS ISPARAM #20180713T132451.145 GMT:20180713T132451.145 GMT
    //	RULE-UTILITY-FUNCTION HARNESS PZADDDESIGNTEMPLATEDEPENDENCY--(CLIPBOARDPAGE,CLIPBOARDPAGE) #20180713T133338.079 GMT:20180713T133338.079 GMT
    //	RULE-UTILITY-FUNCTION HARNESS PZGENERATEADVPARAM #20180713T133339.603 GMT:20180713T133339.603 GMT
    //	RULE-UTILITY-FUNCTION HARNESS PZGENERATEADVPARAM--(STRINGBUFFER,CLIPBOARDPROPERTY,STRING) #20180713T133339.606 GMT:20180713T133339.606 GMT
    //	RULE-UTILITY-FUNCTION HARNESS PZGENERATEAUTOMATIONID--(CLIPBOARDPAGE,STRING) #20180713T133339.615 GMT:20180713T133339.615 GMT
    //	RULE-UTILITY-FUNCTION HARNESS PZGENERATEDECLAREPARAMS--(STRINGFDC1A05E906C7D1540A87AB36D46644C #20180713T133339.722 GMT:20180713T133339.722 GMT
    //	RULE-UTILITY-FUNCTION HARNESS PZGENERATEDISABLEWHEN #20180713T133339.725 GMT:20180713T133339.725 GMT
    //	RULE-UTILITY-FUNCTION HARNESS PZGENERATEELEMENTMODEL--(STRINGBAC08C2213A8175CF3DB1B7FEA4664F0D #20180713T133339.741 GMT:20180713T133339.741 GMT
    //	RULE-UTILITY-FUNCTION HARNESS PZGENERATEFIELDINCLUDE #20180713T133339.748 GMT:20180713T133339.748 GMT
    //	RULE-UTILITY-FUNCTION HARNESS PZGENERATEINCLUDE #20180713T133339.786 GMT:20180713T133339.786 GMT
    //	RULE-UTILITY-FUNCTION HARNESS PZGENERATELABELCELLCONTENT #20190410T165241.183 GMT:20190410T165241.183 GMT
    //	RULE-UTILITY-FUNCTION HARNESS PZGENERATELAYOUTIDENTIFIER--(STRING) #20180713T133339.807 GMT:20180713T133339.807 GMT
    //	RULE-UTILITY-FUNCTION HARNESS PZGENERATELAYOUTWRAPPERTABLE #20180713T133339.811 GMT:20180713T133339.811 GMT
    //	RULE-UTILITY-FUNCTION HARNESS PZGENERATESECTIONDIV #20181028T092048.069 GMT:20181029T094507.215 GMT
    //	RULE-UTILITY-FUNCTION HARNESS PZGENERATESECTIONHTMLHELPER--(STB164ED9B4CFDEBA54B743216A805012A #20190613T060118.415 GMT:20191127T072638.063 GMT
    //	RULE-UTILITY-FUNCTION HARNESS PZGENERATESIMPLELAYOUTHTML #20180713T133339.900 GMT:20180713T133339.900 GMT
    //	RULE-UTILITY-FUNCTION HARNESS PZGENERATETOURID #20180713T133339.904 GMT:20180713T133339.904 GMT
    //	RULE-UTILITY-FUNCTION HARNESS PZGENERATEUIINSPECTORMETADATA #20180713T133339.909 GMT:20180713T133339.909 GMT
    //	RULE-UTILITY-FUNCTION HARNESS PZGETFIELDDESCRIPTION #20180713T133339.962 GMT:20180713T133339.962 GMT
    //	RULE-UTILITY-FUNCTION HARNESS PZGETLAYOUTTYPE #20180713T133339.966 GMT:20180713T133339.966 GMT
    //	RULE-UTILITY-FUNCTION HARNESS PZGETPROPSFORTRACKING--(BOOLEAN,STRING) #20190520T091856.371 GMT:20190520T091856.371 GMT
    //	RULE-UTILITY-FUNCTION HARNESS PZINCLUDEHEADERICON #20180713T133341.204 GMT:20180713T133341.204 GMT
    //	RULE-UTILITY-FUNCTION HARNESS PZISACTIONCONFIGUREDONSECTION--(83A8B0AB7CE3605FF27EAE9292646DA3 #20180713T133341.237 GMT:20180713T133341.237 GMT
    //	RULE-UTILITY-FUNCTION HARNESS PZSECTIONINCLUDEINCELL--(CLIPBOAF2BD5B648774E376BD18CD12B064353F #20180713T133341.324 GMT:20180713T133341.324 GMT
    //	RULE-UTILITY-FUNCTION HARNESS VALIDATEFORLOCALIZATIONTOKEN #20180713T132451.245 GMT:20180713T132451.245 GMT
    //	RULE-UTILITY-FUNCTION HARNESSVALIDATE PZVALIDATECONTROL--(CLIPBOARDPAGE,CLIPBOARDPROPERTY) #20190930T091802.162 GMT:20190930T091802.162 GMT
    //	RULE-UTILITY-FUNCTION HARNESSVALIDATE PZVALIDATESECTION--(CLIPBOARDPAGE,BOOLEAN) #20180713T133341.418 GMT:20180713T133341.418 GMT
    //	RULE-UTILITY-FUNCTION HARNESSVALIDATE PZVALIDATESECTIONINCLUDES #20190730T124821.034 GMT:20190730T124821.034 GMT
    //	RULE-UTILITY-FUNCTION HARNESSVALIDATE PZVALIDATETHIRDPARTYPARAMS #20180713T133341.437 GMT:20180713T133341.437 GMT
    //	RULE-UTILITY-FUNCTION HARNESSVALIDATE VALIDATECELL #20190311T210918.919 GMT:20190311T210918.919 GMT
    //	RULE-UTILITY-FUNCTION HARNESSVALIDATE VALIDATEGRID #20180713T133341.458 GMT:20180713T133341.458 GMT
    //	RULE-UTILITY-FUNCTION HARNESSVALIDATE VALIDATEROW #20180713T133341.463 GMT:20180713T133341.463 GMT
    //	RULE-UTILITY-FUNCTION HARNESSVALIDATE VALIDATERULEEXISTENCE #20180713T133341.471 GMT:20180713T133341.471 GMT
    //	RULE-UTILITY-FUNCTION HARNESSVALIDATE VALIDATESTANDARDHEADERELEMENTS #20180713T133341.476 GMT:20180713T133341.476 GMT
    //	RULE-UTILITY-FUNCTION PZCONTROL PZACTIONAPPENDCONSTANT #20180713T133342.959 GMT:20180713T133342.959 GMT
    //	RULE-UTILITY-FUNCTION PZCONTROL PZACTIONAPPENDLN #20180713T133342.968 GMT:20180713T133342.968 GMT
    //	RULE-UTILITY-FUNCTION PZCONTROL PZACTIONAPPENDSTRING #20180713T133342.971 GMT:20180713T133342.971 GMT
    //	RULE-UTILITY-FUNCTION PZCONTROL PZACTIONAPPENDVALUE #20180713T133342.978 GMT:20180713T133342.978 GMT
    //	RULE-UTILITY-FUNCTION PZCONTROL PZACTIONAPPENDVALUE--(STRING,CLI5436799337856473D715B7B3B9FDA861 #20190320T065455.546 GMT:20190320T065455.546 GMT
    //	RULE-UTILITY-FUNCTION PZCONTROL PZACTIONAPPENDVALUE--(STRING,CLI805ACB584571D11D0909301738737110 #20190320T065455.669 GMT:20190329T124704.529 GMT
    //	RULE-UTILITY-FUNCTION PZCONTROL PZACTIONLAUNCHFLOWINMODAL #20180713T133343.142 GMT:20180713T133343.142 GMT
    //	RULE-UTILITY-FUNCTION PZCONTROL PZACTIONREFRESH--(CLIPBOARDPAGE,8AECDFE4A5256F13DC3F6C7D56453947 #20190320T065455.847 GMT:20190424T132824.042 GMT
    //	RULE-UTILITY-FUNCTION PZCONTROL PZBEHAVIORPROPERTIESCOUNT #20180713T133344.756 GMT:20180713T133344.756 GMT
    //	RULE-UTILITY-FUNCTION PZCONTROL PZGENERATECALCULATEDVALUE--(CLIP25E448149E37EDE02190B4A70F76AB5B #20190412T153430.243 GMT:20190414T201512.134 GMT
    //	RULE-UTILITY-FUNCTION PZCONTROL PZGENERATECONDITION--(CLIPBOARDPEFCDC2BD7217D45AF6F510980B90D167 #20190829T145118.669 GMT:20190829T145118.669 GMT
    //	RULE-UTILITY-FUNCTION PZCONTROL PZGENERATECONTROL--(CLIPBOARDPAG958D4B4F290980CF271DE20E4A2E7F6E #20190405T152034.266 GMT:20190426T142746.856 GMT
    //	RULE-UTILITY-FUNCTION PZCONTROL PZGENERATECONTROLACTION--(CLIPBOB48B86F24D2B45DD052F71A16FDC5D4F #20190829T145119.203 GMT:20190928T145202.942 GMT
    //	RULE-UTILITY-FUNCTION PZCONTROL PZGENERATECONTROLCLIENTEVENT--(SF4D1A128F6CD72072BF94229061A5843 #20180713T133344.895 GMT:20180713T133344.895 GMT
    //	RULE-UTILITY-FUNCTION PZCONTROL PZGENERATEFORMAT--(STRING,CLIPBOE3B9AB14D60C9BC144A59D967BEF48D3 #20190731T102944.077 GMT:20190731T102944.077 GMT
    //	RULE-UTILITY-FUNCTION PZCONTROL PZGENERATEICON #20190909T090808.704 GMT:20190909T090808.704 GMT
    //	RULE-UTILITY-FUNCTION PZCONTROL PZGENERATELINKORBUTTON--(CLIPBOAB4DCC1531E1C4D576C7E21B7E74A2550 #20191029T093759.822 GMT:20191206T121457.867 GMT
    //	RULE-UTILITY-FUNCTION PZCONTROL PZGENERATERADIOGROUP #20180713T133346.302 GMT:20180713T133346.302 GMT
    //	RULE-UTILITY-FUNCTION PZCONTROL PZGETCONTROLSFORMAT--(CLIPBOARDP67982A3A95FEBEAA95783F4B64F7D734 #20180713T133346.364 GMT:20180713T133346.364 GMT
    //	RULE-UTILITY-FUNCTION PZCONTROL PZGETPAGECLASS #20190222T143815.273 GMT:20190222T143815.273 GMT
    //	RULE-UTILITY-FUNCTION PZCONTROL PZGETPROPERTYCLASS #20180713T133346.414 GMT:20180713T133346.414 GMT
    //	RULE-UTILITY-FUNCTION PZCONTROL PZMERGECONTROLPAGES #20180713T133346.497 GMT:20180713T133346.497 GMT
    //	RULE-UTILITY-FUNCTION PZCONTROL PZPACKAGEHOSTSECTION--(CLIPBOARDPAGE,FIRSTUSEASSEMBLER) #20180713T133346.501 GMT:20180713T133346.501 GMT
    //	RULE-UTILITY-FUNCTION PZCONTROL PZVALIDATEFIELDVALUE #20180713T133346.618 GMT:20180713T133346.618 GMT
    //	RULE-UTILITY-FUNCTION PZCSSENGINE PZCSSADDPX #20180713T133346.650 GMT:20180713T133346.650 GMT
    //	RULE-UTILITY-FUNCTION STRING ISLITERAL #20180713T131441.656 GMT:20180713T131441.656 GMT
    //	RULE-UTILITY-FUNCTION STRING STRIPSPECIALCHARS #20180713T131442.797 GMT:20180713T131442.797 GMT
    //	RULE-UTILITY-FUNCTION STRING TRIM #20180713T131442.833 GMT:20180713T131442.833 GMT
    //	RULE-UTILITY-FUNCTION UTILITIES PZVALIDATEFIELDVALUEREFERENCE #20190509T091013.548 GMT:20190509T091013.548 GMT
    //	RULE-UTILITY-FUNCTION UTILITIES VALIDATERULEEXISTENCE2 #20180713T131446.070 GMT:20180713T131446.070 GMT

    /**
     * provides a stand-in for uniqueness tests for the
     * content of this stream. Created from list of rules
     * and dates listed in the comment above this declaration.
     * @return	32 byte hash of that list using MD5
     */
    public static String getFUAContentHash() {
        return "ec91151612c5f793e4de8e82ce502fa1";
    }

    public String getDefinitionAppliesToClass() {
        return "GOV-EPass-Work-EPassRegistration";
    }

    public String getAspect() {
        return "Stream";
    }

    public void pzSectionBody_1() {
        pzSection.includeExpressions();
        if ("true".equals(tools.getParamValue("partialRefresh"))) {
        } else {
            tools.putSaveValue(
                    "sectionUniqueID",
                    ((new StringBuilder("SID"))
                            .append((((com.pega.pegarules.priv.context.PegaRequestor) tools
                                    .getRequestor()).currentTimeUnique())))
                            .toString());
            if (pzAuto.isForOfflineTemplate()) {
                try {
                    tools.putSaveValue("offlineSectionClassKey", tools
                            .getStepPage().getClassName());
                } catch (Exception e) {
                }
            }
            pzSection
                    .beginSection(
                            "Login",
                            1,
                            "Rule-HTML-Section",
                            "{'type':'Section','ruleName':'Login','insKey':'RULE-HTML-SECTION GOV-EPASS-WORK-EPASSREGISTRATION LOGIN #20210708T122813.214 GMT','sectionType':'standard'}");
            pzLayout_12();
            tools.putSaveValue("ContainerID", "");
            pzSection.endSection();
            tools.putSaveValue("sectionUniqueID", "");
            if (pzAuto.isForOfflineTemplate()) {
                tools.putSaveValue("offlineSectionClassKey", "");
            }
        }
    }

    public void buildWhiteList_1() {
        Map<String, String> config;
        pega.getUIEngine().getUIAction("refresh", null).register();
        config = new HashMap<String, String>();
        config.put("templateStreamName", "pzModalFlowTemplate");
        config.put("modalInsClass", "GOV-EPass-Work-EPassRegistration");
        config.put("modalFlowType", "SendSMS");
        pega.getUIEngine().getUIAction("launchFlowInModal", config).register();
    }

    public void pzLayoutBody_10() {
        tools.putParamValue("LAYOUT_METHOD_NAME", "simpleLayout_10");
        simpleLayout_10();
    }

    public void pzLayoutBodyWrapper_12() {
        tools.appendString("<div class='layout layout-none'>");
        String clsScroll = "";
        tools.appendString("<div section_index='1' class='" + clsScroll
                + " layout-body clearfix'>");
        tools.putParamValue("LAYOUT_METHOD_NAME", "simpleLayout_10");
        simpleLayout_10();
        tools.appendString("</div></div>");
        tools.putSaveValue("rowClass", "");
    }

    public void pzLayoutBody_9() {
        tools.putParamValue("LAYOUT_METHOD_NAME", "simpleLayout_9");
        simpleLayout_9();
    }

    public void pzLayoutBodyWrapper_11() {
        tools.appendString("<div class='layout layout-noheader layout-noheader-default_3'>");
        String clsScroll = "";
        tools.appendString("<div section_index='1' class='" + clsScroll
                + " layout-body'>");
        tools.putParamValue("LAYOUT_METHOD_NAME", "simpleLayout_9");
        simpleLayout_9();
        tools.appendString("</div></div>");
        tools.putSaveValue("rowClass", "");
    }

    public int simpleLayoutCell_16(int index) {
        IUIComponent uiComp = null;
        String labelName = "";
        String ariahiddenString = "";
        String baseRef = "";
        generateClientWhenDiv_4();
        tools.appendString("' "
                + pzCell.getInspectorDataDynamic(
                        "Paragraph",
                        "Guidelines",
                        "RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(4).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1)")
                + " class='content-item content-paragraph item-"
                + Integer.toString(index)
                + " remove-top-spacing remove-left-spacing remove-bottom-spacing remove-right-spacing   flex '  STRING_TYPE='paragraph' RESERVE_SPACE='false'>");
        pzAuto.getUIComponentRuntime().insertComponentPlaceholderPage();
        StringMap keys = new HashStringMap();
        if (pzAuto.getUIComponentRuntime().getTemplatingUIStatus() == 'Y'
                && pega_uiengine_offlinesupport.pzIsForOfflineTemplate()) {
            IUIComponentMetadata metadataPage = pzAuto.getUIComponentRuntime()
                    .createMetadata();
            keys.putString("pyClassName",
                    tools.getStepPage().getString("pxObjClass"));
            keys.putString("pyStreamName", "Guidelines");
            keys.putString("pxObjClass", "RULE-HTML-PARAGRAPH");
            try {
                ClipboardPage paragraphPage = tools.getDatabase().open(keys,
                        false);
                String sourceStream = paragraphPage.getString("pySourceStream");
                String className = paragraphPage.getString("pyClassName");
                String pattern = "<pega:(?!reference)|<p:(?!r)|<(?=%)|<pega:reference.*(?=format=)";
                java.util.regex.Pattern r = java.util.regex.Pattern
                        .compile(pattern);
                java.util.regex.Matcher m = r.matcher(sourceStream);
                if (m.find()) {
                    tools.appendString("<span style=display:none;  "
                            + pzCell.getTestIdIfEnabled("202107082140240849298")
                            + " ></span>");
                    keys.putString("pxObjClass", "Rule-HTML-Paragraph");
                    keys.putString("pyStreamName", "Guidelines");
                    tools.appendStream(keys);
                } else {
                    metadataPage.putString("pzSectionContext", tools
                            .getStepPage().getReference());
                    metadataPage.putString("pxInsName",
                            paragraphPage.getString("pxInsName"));
                    Map<String, String> paraRecord = new HashMap<String, String>();
                    paraRecord.put("pxInsName",
                            paragraphPage.getString("pxInsName"));
                    pzPackageRuntime.getRecordManager().getParagraphRecorder()
                            .record(paraRecord);
                    IUIComponent ctrlComponent = pzAuto.getUIComponent();
                    ctrlComponent.beginComponent("pxParagraph", metadataPage);
                    ctrlComponent.setTrackedProperties(new String[] {
                            "pxInsName", "pzSectionContext" });
                    ctrlComponent.endComponent();
                }
            } catch (DatabaseException e) {
                oLog.error(
                        "ENGIN API:Could not found Paragraph rule - GOV-EPass-Work-EPassRegistration!Guidelines ",
                        e);
            }
        } else {
            tools.appendString("<span style=display:none;  "
                    + pzCell.getTestIdIfEnabled("202107082140240849298")
                    + " ></span>");
            keys.putString("pxObjClass", "Rule-HTML-Paragraph");
            keys.putString("pyStreamName", "Guidelines");
            tools.appendStream(keys);
        }
        tools.appendString("</div>");
        index++;
        return index;
    }

    public int simpleLayoutTemplateCell_16(int index) {
        IUIComponent uiComp = null;
        String labelName = "";
        String expressionId = null;
        boolean isLabelJSP = false;
        String reqExpressionId = null;
        String disExpressionId = null;
        com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
        expressionId = pxUniqueStreamHash + "_74";
        expression = pzAuto
                .getUIComponentRuntime()
                .getExpressionEvaluator()
                .addExpression("showWhen", ".WeOfferYouWith = 'Guidelines'",
                        expressionId);
        if (expression != null) {
            expressionId = expression.getId();
        }
        String pyCustomRequireFormat = "";
        pyCustomRequireFormat = tools.getLocalizedTextForString("pyCaption",
                "pyRequired");
        String baseRef = "";
        boolean pyDLCellVisibility = false;
        IUIComponent cc_dlCell = pzAuto.getUIComponent();
        IUIComponentMetadata pg_dlCellMeta = pzAuto.getUIComponentRuntime()
                .createMetadata();
        IUIComponentMetadata pgCells = pzAuto.getUIComponentRuntime()
                .createMetadata();
        pgCells.put("pyType", "paragraph");
        pgCells.put("pyLabelReserveSpace", "true");
        pgCells.put(
                "partialClass",
                "remove-top-spacing remove-left-spacing remove-bottom-spacing remove-right-spacing flex");
        pgCells.put(
                "automationId",
                new StringBuilder(" ")
                        .append(pzCell
                                .getTestIdIfEnabled("202107082140240849298-Label"))
                        .append(" ").toString().replace("data-test-id=", "")
                        .trim());
        pgCells.put("pyAutoHTML", "false");
        pgCells.put("spanClass", "iconRequired standard_iconRequired");
        pgCells.put("cstmreqfor", pyCustomRequireFormat);
        if (!StringUtils.isBlank(expressionId))
            pgCells.put("pyExpressionId", expressionId);
        if (!"".equals(baseRef))
            pgCells.put("pyBaseRef", String.valueOf(baseRef));
        pgCells.put("labelJSP", String.valueOf(isLabelJSP));
        pg_dlCellMeta.putMetadata("pyCell", pgCells);
        boolean isExpression = false;
        boolean isOffline = false;
        cc_dlCell.beginComponent("DynamicLayoutCell", pg_dlCellMeta);
        String inspectorData = pzCell
                .getInspectorDataDynamic(
                        "Paragraph",
                        "Guidelines",
                        "RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(4).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1)");
        if (!inspectorData.isEmpty()) {
            pgCells.put("liveUI", inspectorData);
        }
        boolean nonTemplateBegin = true;
        if (!pega_uiengine_offlinesupport.pzIsForOfflineTemplate()) {
            nonTemplateBegin = pzAuto.getUIComponentRuntime()
                    .getRuntimeContextTree()
                    .beginNonTemplate(pxUniqueStreamHash + "_75");
        }
        if (nonTemplateBegin) {
            StringMap keys = new HashStringMap();
            if (pzAuto.getUIComponentRuntime().getTemplatingUIStatus() == 'Y'
                    && pega_uiengine_offlinesupport.pzIsForOfflineTemplate()) {
                IUIComponentMetadata metadataPage = pzAuto
                        .getUIComponentRuntime().createMetadata();
                keys.putString("pyClassName",
                        tools.getStepPage().getString("pxObjClass"));
                keys.putString("pyStreamName", "Guidelines");
                keys.putString("pxObjClass", "RULE-HTML-PARAGRAPH");
                try {
                    ClipboardPage paragraphPage = tools.getDatabase().open(
                            keys, false);
                    String sourceStream = paragraphPage
                            .getString("pySourceStream");
                    String className = paragraphPage.getString("pyClassName");
                    String pattern = "<pega:(?!reference)|<p:(?!r)|<(?=%)|<pega:reference.*(?=format=)";
                    java.util.regex.Pattern r = java.util.regex.Pattern
                            .compile(pattern);
                    java.util.regex.Matcher m = r.matcher(sourceStream);
                    if (m.find()) {
                        tools.appendString("<span style=display:none;  "
                                + pzCell.getTestIdIfEnabled("202107082140240849298")
                                + " ></span>");
                        keys.putString("pxObjClass", "Rule-HTML-Paragraph");
                        keys.putString("pyStreamName", "Guidelines");
                        tools.appendStream(keys);
                    } else {
                        metadataPage.putString("pzSectionContext", tools
                                .getStepPage().getReference());
                        metadataPage.putString("pxInsName",
                                paragraphPage.getString("pxInsName"));
                        Map<String, String> paraRecord = new HashMap<String, String>();
                        paraRecord.put("pxInsName",
                                paragraphPage.getString("pxInsName"));
                        pzPackageRuntime.getRecordManager()
                                .getParagraphRecorder().record(paraRecord);
                        IUIComponent ctrlComponent = pzAuto.getUIComponent();
                        ctrlComponent.beginComponent("pxParagraph",
                                metadataPage);
                        ctrlComponent.setTrackedProperties(new String[] {
                                "pxInsName", "pzSectionContext" });
                        ctrlComponent.endComponent();
                    }
                } catch (DatabaseException e) {
                    oLog.error(
                            "ENGIN API:Could not found Paragraph rule - GOV-EPass-Work-EPassRegistration!Guidelines ",
                            e);
                }
            } else {
                tools.appendString("<span style=display:none;  "
                        + pzCell.getTestIdIfEnabled("202107082140240849298")
                        + " ></span>");
                keys.putString("pxObjClass", "Rule-HTML-Paragraph");
                keys.putString("pyStreamName", "Guidelines");
                tools.appendStream(keys);
            }
        }
        if (!pega_uiengine_offlinesupport.pzIsForOfflineTemplate()) {
            pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                    .endNonTemplateComponent();
        }
        labelName = "Guidelines";
        if (!pega_uiengine_offlinesupport.pzIsForOfflineTemplate()) {
            pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                    .addLocalizedValue(labelName, "pyCaption");
        } else {
            StringUtils.crossScriptingFilter(tools.getLocalizedTextForString(
                    "pyCaption", labelName));
        }
        pgCells.put("pyLabelValue", labelName);
        cc_dlCell.endComponent();
        index++;
        return index;
    }

    public void pzSetExpandParam_12() {
        pzSection.getLayout().setExpandParam("SubSectionLoginBBBBBBBBBB", "",
                false);
    }

    public void simpleLayout_9() {
        char parentTemplatingStatus = pzAuto.getUIComponentRuntime()
                .getTemplatingUIStatus();
        char currentTemplatingStatus = 'Y';
        if (!tools.getParamValue("UITemplatingStatus").equals("N")) {
            currentTemplatingStatus = pzAuto.getUIComponentRuntime()
                    .setTemplatingUIStatus('Y');
        } else {
            currentTemplatingStatus = pzAuto.getUIComponentRuntime()
                    .setTemplatingUIStatus('N');
        }
        String spxUniqueStreamHash71 = "";
        if (currentTemplatingStatus != 'N') {
            spxUniqueStreamHash71 = getUIActionsMetaData_1();
            if (spxUniqueStreamHash71 != null
                    && !"".equals(spxUniqueStreamHash71)) {
                pzAuto.getUIComponentRuntime()
                        .getRuntimeContextTree()
                        .addActionString(spxUniqueStreamHash71,
                                pxUniqueStreamHash + "_71");
            }
        }
        String refreshAttributes = "";
        String strMethodName = "";
        IUIComponent cc_dl = null;
        boolean bIsIe = (pzAuto.getBrowserUtils().isIE());
        String bIsWrapperAdded = tools.getParamValue("bIsWrapperAdded");
        String bIsGridLayout = tools.getParamValue("bIsGridLayout");
        cc_dl = pzAuto.getUIComponent();
        IUIComponentMetadata pg_dlmeta = pzAuto.getUIComponentRuntime()
                .createMetadata();
        pg_dlmeta.put("automationId",
                " " + pzCell.getTestIdIfEnabled("202107090146400964914") + " ");
        String subscriptionID = null;
        if (currentTemplatingStatus != 'Y') {
            if (bIsIe && "true".equals(bIsGridLayout)
                    && !"true".equals(bIsWrapperAdded)) {
                tools.appendString("<div class='flex-grid-table-wrapper'><div class='flex-grid-tablecell-wrapper'>");
                tools.putParamValue("bIsWrapperAdded", "true");
            }
            tools.appendString("<div bSimpleLayout='true' ");
            if (((PegaAPI) tools).getUIEngine().getPushServiceUtils()
                    .isPushEnabled()
                    && subscriptionID != null) {
                tools.appendString(" data-subscription-id='" + subscriptionID
                        + "' ");
            }
            tools.appendString(""
                    + pzAuto.getDataUIMetaAttribute("{'type':'Layout','subType':'DYNAMICLAYOUT','pgRef':'RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(4).pySections(1)'}")
                    + " class='"
                    + "flex  content  layout-content-default content-default "
                    + "'  ");
            if (!tools.getParamValue("pyPegaDesignMode").equals("true")) {
                tools.appendString(" ");
            }
            tools.appendString(" " + refreshAttributes + ">");
        } else {
            String expressionId = null;
            com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
            if (!tools.getParamValue("pyPegaDesignMode").equals("true")
                    && spxUniqueStreamHash71 != null
                    && !"".equals(spxUniqueStreamHash71)) {
                pg_dlmeta.put("pyActionStringID", pxUniqueStreamHash + "_71");
            }
            if (!StringUtils.isBlank(expressionId)) {
                pg_dlmeta.put("pyExpressionId", expressionId);
            }
            if (!"".equals(strMethodName))
                pg_dlmeta.put("methodnm", strMethodName);
            pg_dlmeta.put("format", "default");
            String inspectorData = new StringBuilder("\"")
                    .append(""
                            + pzAuto.getDataUIMetaAttribute("{'type':'Layout','subType':'DYNAMICLAYOUT','pgRef':'RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(4).pySections(1)'}")
                            + "").append("\"").toString();
            if (!inspectorData.equals("\"\"")) {
                pg_dlmeta.put("liveUI", inspectorData);
            }
            pg_dlmeta.put("isDLChild", "true");
            pg_dlmeta.put("clear", "false");
            pzAuto.getUIComponentRuntime().insertComponentPlaceholderPage();
            cc_dl.beginComponent("DynamicLayout", pg_dlmeta);
        }
        int index = 1;
        if (currentTemplatingStatus != 'Y') {
            index = simpleLayoutCell_16(index);
        } else {
            index = simpleLayoutTemplateCell_16(index);
        }
        if (currentTemplatingStatus != 'Y') {
            tools.appendString("</div>");
            if (bIsIe && "true".equals(bIsGridLayout)
                    && !"true".equals(bIsWrapperAdded)) {
                tools.appendString("</div></div>");
                tools.putParamValue("bIsWrapperAdded", "false");
            }
        } else {
            cc_dl.endComponent();
        }
        pzAuto.getUIComponentRuntime().resetTemplatingUIStatus(
                parentTemplatingStatus);
    }

    public void pzLayoutContainer_9() {
        IUIComponentMetadata metadataPage = pzAuto.getUIComponentRuntime()
                .createMetadata();
        String expressionId = null;
        com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
        expressionId = pxUniqueStreamHash + "_76";
        expression = pzAuto
                .getUIComponentRuntime()
                .getExpressionEvaluator()
                .addExpression("showWhen", ".WeOfferYouWith = \'Guidelines\'",
                        expressionId);
        expressionId = expression.getId();
        String expressionId_BV = null;
        com.pega.pegarules.priv.runtime.ui.IExpression expression_BV = null;
        if (!StringUtils.isBlank(expressionId)) {
            metadataPage.put("pyExpressionId", expressionId);
        }
        if (!StringUtils.isBlank(expressionId_BV)) {
            metadataPage.put("expressionId_BV", expressionId_BV);
        }
        String paramName = "EXPANDEDSubSectionLoginBBBBBBBBBB";
        metadataPage.put("paramName", paramName);
        String inspectorLayoutData = pzAuto
                .getDataUIMetaAttribute("{'type':'Layout','subType':'DYNAMICLAYOUT','pgRef':'RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(4).pySections(1)'}");
        if (!inspectorLayoutData.isEmpty()) {
            metadataPage.put("liveUI", inspectorLayoutData);
        }
        String pyPrefix = null;
        metadataPage.put("prefix", "-default_3");
        metadataPage.put("sectionIndex", "62");
        IUIComponent containerComponent = pzAuto.getUIComponent();
        metadataPage.put("dlChild", "true");
        metadataPage.put("lMode", "Flexbox");
        containerComponent.beginComponent("pxLayoutContainer", metadataPage);
        pzLayoutBody_9();
        containerComponent.endComponent();
    }

    public void pzLayout_11() {
        char currentTemplatingStatus = pzAuto.getUIComponentRuntime()
                .setTemplatingUIStatus('Y');
        if (currentTemplatingStatus == 'Y') {
            pzAuto.getUIComponentRuntime().insertComponentPlaceholderPage();
        }
        pzSetExpandParam_12();
        tools.putParamValue("RWClasses", "");
        if (!pzAuto.getUIComponentRuntime().isTemplatingUIEnabled()) {
            pzLayoutBodyWrapper_11();
        }
        if (pzAuto.getUIComponentRuntime().isTemplatingUIEnabled()) {
            tools.putParamValue("pyInlineStyleSec", "");
            pzLayoutContainer_9();
            tools.putParamValue("pyInlineStyleSec", "");
        }
    }

    public void generateClientWhenDiv_4() {
        String clientWhenAttr = "";
        char currentTemplatingStatus = 'Y';
        currentTemplatingStatus = pzAuto.getUIComponentRuntime()
                .getTemplatingUIStatus();
        if (currentTemplatingStatus == 'N')
            tools.appendString("<div ");
        if (currentTemplatingStatus == 'N')
            tools.appendString("id=\"CT\"");
        if (tools.getThread().getName().indexOf("/$WorkProcessing") != -1
                || tools.getThread().getName().indexOf("/$FlowModalProcess") != -1) {
            if (currentTemplatingStatus == 'N') {
                tools.appendString(" thread_name = \""
                        + tools.getThread().getName() + "\"");
            } else {
                String threadName = tools.getThread().getName();
                clientWhenAttr += "thread_name= \"" + threadName + "\" ";
            }
        }
        if (currentTemplatingStatus == 'N')
            tools.appendString(" SWP=\".WeOfferYouWith\"  SHOW_WHEN=\".WeOfferYouWith = 'Guidelines'\"");
        if (pzAuto.evaluateWhen(".WeOfferYouWith = 'Guidelines'", null, true)) {
            if (currentTemplatingStatus == 'N')
                tools.appendString(" style=' ");
            else
                clientWhenAttr += "style= '";
        } else {
            if (currentTemplatingStatus == 'N')
                tools.appendString(" style='display:none; ");
            else
                clientWhenAttr += "style='display:none;  ";
        }
        if (currentTemplatingStatus == 'Y')
            clientWhenAttr += "'";
        if (currentTemplatingStatus == 'Y')
            tools.putParamValue("clientWhenAttr", clientWhenAttr);
        try {
            if (tools.getParamValue("AJAXTrackID") != null
                    && !tools.getParamValue("AJAXTrackID").equals("")) {
                com.pega.pegarules.priv.runtime.IStreamChangeTracker changeTracker = pzAuto
                        .getChangeTracker(tools.getParamValue("AJAXTrackID"));
                changeTracker.trackValueChanges(tools.getStepPage()
                        .getReference() + ".WeOfferYouWith", -1);
            }
        } catch (Exception e) {
        }
    }

    public void pzLayoutBody_8() {
        tools.putParamValue("LAYOUT_METHOD_NAME", "simpleLayout_8");
        simpleLayout_8();
    }

    public void pzLayoutBodyWrapper_10() {
        tools.appendString("<div class='layout layout-noheader layout-noheader-default_3'>");
        String clsScroll = "";
        tools.appendString("<div section_index='1' class='" + clsScroll
                + " layout-body'>");
        tools.putParamValue("LAYOUT_METHOD_NAME", "simpleLayout_8");
        simpleLayout_8();
        tools.appendString("</div></div>");
        tools.putSaveValue("rowClass", "");
    }

    public void pzLayoutBodyWrapper_9() {
        if (pzSection.getLayout().loadLayoutBody()) {
            sectionBodyIncludeInCell_4();
        }
        tools.putSaveValue("rowClass", "");
    }

    public void buildSection_4() {
        Map<String, Object> secInfo = new HashMap<String, Object>();
        secInfo.put("usingPage", "");
        secInfo.put("isUsingPagePropertyRef", false);
        secInfo.put("doNotConsiderDecParams", false);
        secInfo.put("keepStreamProperties", true);
        secInfo.put("preserveParamState", false);
        pzAuto.getUIComponentRuntime()
                .getRuntimeContextTree()
                .loadSection(pxUniqueStreamHash + "_66",
                        "Login_StateOrUnionTerritoriesHelplineForCOVID19",
                        secInfo);
    }

    public void sectionBodyIncludeInCell_4() {
        if (pzAuto.getUIComponentRuntime().isTemplatingUIEnabled()) {
            buildSection_4();
            return;
        }
        String strSectionPageProp = "";

        String inputType = "Input";
        boolean popReadOnly = false;
        String readOnlyParam = tools.getParamValue("ReadOnly");
        if (readOnlyParam.equalsIgnoreCase("-1")
                || readOnlyParam.equalsIgnoreCase("true")
                || !tools.hasInputEnabled()) {
            if (!(readOnlyParam.equalsIgnoreCase("-1") || readOnlyParam
                    .equalsIgnoreCase("true")) && !tools.hasInputEnabled()) {
                popReadOnly = true;
            }
            inputType = "NoInput";
        }
        if ("NoInput".equals(inputType)) {
            tools.putParamValue("SectionReadOnly", "-1");
        }
        String sectionName = "Login_StateOrUnionTerritoriesHelplineForCOVID19";
        String usingPage = null;
        ClipboardPage pg_usingPage = null;
        if (usingPage != null && !"".equals(usingPage)) {
            pg_usingPage = tools.findPage(usingPage);
        }
        PRStackFrame pz_StackFrame1 = null;
        String lazyInfoBefore = null;
        if (pg_usingPage != null) {
            lazyInfoBefore = tools.getParamValue("lazyLoadInfo");
            pz_StackFrame1 = pega.pushStackFrame(null, pg_usingPage, false,
                    false, PRStackFrame.Type.APPEND_STREAM,
                    "Rule-HTML-Section", sectionName);
            tools.putParamValue("lazyLoadInfo", "");
        }
        if (usingPage == null
                || "".equals(usingPage)
                || (pg_usingPage != null && !pg_usingPage
                        .getString("pxObjClass").trim().equals(""))) {
            String tempRenderSingle = tools.getParamValue("RenderSingle");
            tools.putParamValue("RenderSingle", "");
            if (!tools.getParamValue("SecBaseRefParam").equals("false")) {
                tools.putParamValue(
                        "section_base_ref",
                        " NAME='BASE_REF' BASE_REF='"
                                + pega_uiengine_harness.pzGetUsingPageName(
                                        usingPage, pg_usingPage) + "'");
            }
            pzAuto.emitIncludeStreamReference(sectionName, null, inputType,
                    "Rule-HTML-Section", null);
            tools.putParamValue("section_base_ref", "");
            tools.putParamValue("RenderSingle", tempRenderSingle);
        }
        if (pg_usingPage != null) {
            String lazyInfoAfter = tools.getParamValue("lazyLoadInfo");
            pega.popStackFrame(pz_StackFrame1, false);
            tools.putParamValue("lazyLoadInfo", lazyInfoBefore + lazyInfoAfter);
        }
        if (popReadOnly) {
            tools.getParameterPage().remove("SectionReadOnly");
        }
    }

    public void pzSetExpandParam_11() {
        pzSection.getLayout().setExpandParam("SubSectionCellLogin383", "",
                false);
    }

    public void pzLayout_9() {
        pzSetExpandParam_11();
        pzLayoutBodyWrapper_9();
    }

    public void buildSection_3() {
        Map<String, Object> secInfo = new HashMap<String, Object>();
        secInfo.put("usingPage", "");
        secInfo.put("isUsingPagePropertyRef", false);
        secInfo.put("doNotConsiderDecParams", false);
        secInfo.put("keepStreamProperties", true);
        secInfo.put("preserveParamState", false);
        pzAuto.getUIComponentRuntime()
                .getRuntimeContextTree()
                .loadSection(pxUniqueStreamHash + "_63",
                        "Login_StateOrUnionTerritoriesHelplineForCOVID19",
                        secInfo);
    }

    public void sectionBodyIncludeInCell_3() {
        if (pzAuto.getUIComponentRuntime().isTemplatingUIEnabled()) {
            buildSection_3();
            return;
        }
        String strSectionPageProp = "";

        String inputType = "Input";
        boolean popReadOnly = false;
        String readOnlyParam = tools.getParamValue("ReadOnly");
        if (readOnlyParam.equalsIgnoreCase("-1")
                || readOnlyParam.equalsIgnoreCase("true")
                || !tools.hasInputEnabled()) {
            if (!(readOnlyParam.equalsIgnoreCase("-1") || readOnlyParam
                    .equalsIgnoreCase("true")) && !tools.hasInputEnabled()) {
                popReadOnly = true;
            }
            inputType = "NoInput";
        }
        if ("NoInput".equals(inputType)) {
            tools.putParamValue("SectionReadOnly", "-1");
        }
        String sectionName = "Login_StateOrUnionTerritoriesHelplineForCOVID19";
        String usingPage = null;
        ClipboardPage pg_usingPage = null;
        if (usingPage != null && !"".equals(usingPage)) {
            pg_usingPage = tools.findPage(usingPage);
        }
        PRStackFrame pz_StackFrame1 = null;
        String lazyInfoBefore = null;
        if (pg_usingPage != null) {
            lazyInfoBefore = tools.getParamValue("lazyLoadInfo");
            pz_StackFrame1 = pega.pushStackFrame(null, pg_usingPage, false,
                    false, PRStackFrame.Type.APPEND_STREAM,
                    "Rule-HTML-Section", sectionName);
            tools.putParamValue("lazyLoadInfo", "");
        }
        if (usingPage == null
                || "".equals(usingPage)
                || (pg_usingPage != null && !pg_usingPage
                        .getString("pxObjClass").trim().equals(""))) {
            String tempRenderSingle = tools.getParamValue("RenderSingle");
            tools.putParamValue("RenderSingle", "");
            if (!tools.getParamValue("SecBaseRefParam").equals("false")) {
                tools.putParamValue(
                        "section_base_ref",
                        " NAME='BASE_REF' BASE_REF='"
                                + pega_uiengine_harness.pzGetUsingPageName(
                                        usingPage, pg_usingPage) + "'");
            }
            pzAuto.emitIncludeStreamReference(sectionName, null, inputType,
                    "Rule-HTML-Section", null);
            tools.putParamValue("section_base_ref", "");
            tools.putParamValue("RenderSingle", tempRenderSingle);
        }
        if (pg_usingPage != null) {
            String lazyInfoAfter = tools.getParamValue("lazyLoadInfo");
            pega.popStackFrame(pz_StackFrame1, false);
            tools.putParamValue("lazyLoadInfo", lazyInfoBefore + lazyInfoAfter);
        }
        if (popReadOnly) {
            tools.getParameterPage().remove("SectionReadOnly");
        }
    }

    public int simpleLayoutCell_14(int index) {
        IUIComponent uiComp = null;
        String labelName = "";
        String ariahiddenString = "";
        String baseRef = "";
        generateClientWhenDiv_1();
        tools.appendString("' "
                + pzCell.getInspectorDataDynamic(
                        "SUB_SECTION",
                        "Login_StateOrUnionTerritoriesHelplineForCOVID19",
                        "RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(3).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1)")
                + " class='content-item content-sub_section item-"
                + Integer.toString(index)
                + " remove-top-spacing remove-left-spacing remove-bottom-spacing remove-right-spacing   flex flex-row '  STRING_TYPE='sub_section' RESERVE_SPACE='false'>");
        String tempRenderSingle = "";

        tempRenderSingle = tools.getParamValue("RenderSingle");
        tools.putParamValue("RenderSingle", "");
        sectionBodyIncludeInCell_3();
        tools.putParamValue("RenderSingle", tempRenderSingle);
        tools.appendString("</div>");
        index++;
        return index;
    }

    public int simpleLayoutTemplateCell_14(int index) {
        IUIComponent uiComp = null;
        String labelName = "";
        String expressionId = null;
        boolean isLabelJSP = false;
        String reqExpressionId = null;
        String disExpressionId = null;
        com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
        if (expression != null) {
            expressionId = expression.getId();
        }
        String pyCustomRequireFormat = "";
        pyCustomRequireFormat = tools.getLocalizedTextForString("pyCaption",
                "pyRequired");
        String baseRef = "";
        boolean pyDLCellVisibility = false;
        IUIComponent cc_dlCell = pzAuto.getUIComponent();
        IUIComponentMetadata pg_dlCellMeta = pzAuto.getUIComponentRuntime()
                .createMetadata();
        IUIComponentMetadata pgCells = pzAuto.getUIComponentRuntime()
                .createMetadata();
        pgCells.put("pyType", "sub_section");
        pgCells.put(
                "partialClass",
                "remove-top-spacing remove-left-spacing remove-bottom-spacing remove-right-spacing flex flex-row");
        pgCells.put("spanClass", "iconRequired standard_iconRequired");
        pgCells.put("cstmreqfor", pyCustomRequireFormat);
        if (!StringUtils.isBlank(expressionId))
            pgCells.put("pyExpressionId", expressionId);
        if (!"".equals(baseRef))
            pgCells.put("pyBaseRef", String.valueOf(baseRef));
        pgCells.put("labelJSP", String.valueOf(isLabelJSP));
        pg_dlCellMeta.putMetadata("pyCell", pgCells);
        boolean isExpression = false;
        boolean isOffline = false;
        cc_dlCell.beginComponent("DynamicLayoutCell", pg_dlCellMeta);
        String inspectorData = pzCell
                .getInspectorDataDynamic(
                        "SUB_SECTION",
                        "Login_StateOrUnionTerritoriesHelplineForCOVID19",
                        "RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(3).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1)");
        if (!inspectorData.isEmpty()) {
            pgCells.put("liveUI", inspectorData);
        }
        String tempRenderSingle = "";
        tempRenderSingle = tools.getParamValue("RenderSingle");
        tools.putParamValue("RenderSingle", "");
        pzLayout_9();
        tools.putSaveValue("ContainerID", "");
        tools.putParamValue("RenderSingle", tempRenderSingle);
        labelName = "";
        if (!pega_uiengine_offlinesupport.pzIsForOfflineTemplate()) {
            pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                    .addLocalizedValue(labelName, "pyCaption");
        } else {
            StringUtils.crossScriptingFilter(tools.getLocalizedTextForString(
                    "pyCaption", labelName));
        }
        pgCells.put("pyLabelValue", labelName);
        cc_dlCell.endComponent();
        index++;
        return index;
    }

    public void pzSetExpandParam_10() {
        pzSection.getLayout().setExpandParam("SubSectionLoginBBBBBBBBB", "",
                false);
    }

    public void simpleLayout_8() {
        char parentTemplatingStatus = pzAuto.getUIComponentRuntime()
                .getTemplatingUIStatus();
        char currentTemplatingStatus = 'Y';
        if (!tools.getParamValue("UITemplatingStatus").equals("N")) {
            currentTemplatingStatus = pzAuto.getUIComponentRuntime()
                    .setTemplatingUIStatus('Y');
        } else {
            currentTemplatingStatus = pzAuto.getUIComponentRuntime()
                    .setTemplatingUIStatus('N');
        }
        String spxUniqueStreamHash62 = "";
        if (currentTemplatingStatus != 'N') {
            spxUniqueStreamHash62 = getUIActionsMetaData_1();
            if (spxUniqueStreamHash62 != null
                    && !"".equals(spxUniqueStreamHash62)) {
                pzAuto.getUIComponentRuntime()
                        .getRuntimeContextTree()
                        .addActionString(spxUniqueStreamHash62,
                                pxUniqueStreamHash + "_62");
            }
        }
        String refreshAttributes = "";
        String strMethodName = "";
        IUIComponent cc_dl = null;
        boolean bIsIe = (pzAuto.getBrowserUtils().isIE());
        String bIsWrapperAdded = tools.getParamValue("bIsWrapperAdded");
        String bIsGridLayout = tools.getParamValue("bIsGridLayout");
        cc_dl = pzAuto.getUIComponent();
        IUIComponentMetadata pg_dlmeta = pzAuto.getUIComponentRuntime()
                .createMetadata();
        pg_dlmeta.put("automationId",
                " " + pzCell.getTestIdIfEnabled("202107090145130388827") + " ");
        String subscriptionID = null;
        if (currentTemplatingStatus != 'Y') {
            if (bIsIe && "true".equals(bIsGridLayout)
                    && !"true".equals(bIsWrapperAdded)) {
                tools.appendString("<div class='flex-grid-table-wrapper'><div class='flex-grid-tablecell-wrapper'>");
                tools.putParamValue("bIsWrapperAdded", "true");
            }
            tools.appendString("<div bSimpleLayout='true' ");
            if (((PegaAPI) tools).getUIEngine().getPushServiceUtils()
                    .isPushEnabled()
                    && subscriptionID != null) {
                tools.appendString(" data-subscription-id='" + subscriptionID
                        + "' ");
            }
            tools.appendString(""
                    + pzAuto.getDataUIMetaAttribute("{'type':'Layout','subType':'DYNAMICLAYOUT','pgRef':'RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(3).pySections(1)'}")
                    + " class='"
                    + "flex  content  layout-content-default content-default "
                    + "'  ");
            if (!tools.getParamValue("pyPegaDesignMode").equals("true")) {
                tools.appendString(" ");
            }
            tools.appendString(" " + refreshAttributes + ">");
        } else {
            String expressionId = null;
            com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
            if (!tools.getParamValue("pyPegaDesignMode").equals("true")
                    && spxUniqueStreamHash62 != null
                    && !"".equals(spxUniqueStreamHash62)) {
                pg_dlmeta.put("pyActionStringID", pxUniqueStreamHash + "_62");
            }
            if (!StringUtils.isBlank(expressionId)) {
                pg_dlmeta.put("pyExpressionId", expressionId);
            }
            if (!"".equals(strMethodName))
                pg_dlmeta.put("methodnm", strMethodName);
            pg_dlmeta.put("format", "default");
            String inspectorData = new StringBuilder("\"")
                    .append(""
                            + pzAuto.getDataUIMetaAttribute("{'type':'Layout','subType':'DYNAMICLAYOUT','pgRef':'RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(3).pySections(1)'}")
                            + "").append("\"").toString();
            if (!inspectorData.equals("\"\"")) {
                pg_dlmeta.put("liveUI", inspectorData);
            }
            pg_dlmeta.put("isDLChild", "true");
            pg_dlmeta.put("clear", "false");
            pzAuto.getUIComponentRuntime().insertComponentPlaceholderPage();
            cc_dl.beginComponent("DynamicLayout", pg_dlmeta);
        }
        int index = 1;
        if (currentTemplatingStatus != 'Y') {
            index = simpleLayoutCell_14(index);
        } else {
            index = simpleLayoutTemplateCell_14(index);
        }
        if (currentTemplatingStatus != 'Y') {
            tools.appendString("</div>");
            if (bIsIe && "true".equals(bIsGridLayout)
                    && !"true".equals(bIsWrapperAdded)) {
                tools.appendString("</div></div>");
                tools.putParamValue("bIsWrapperAdded", "false");
            }
        } else {
            cc_dl.endComponent();
        }
        pzAuto.getUIComponentRuntime().resetTemplatingUIStatus(
                parentTemplatingStatus);
    }

    public void pzLayoutContainer_8() {
        IUIComponentMetadata metadataPage = pzAuto.getUIComponentRuntime()
                .createMetadata();
        String expressionId = null;
        com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
        expressionId = pxUniqueStreamHash + "_67";
        expression = pzAuto
                .getUIComponentRuntime()
                .getExpressionEvaluator()
                .addExpression("showWhen",
                        ".WeOfferYouWith = \'Helpline Numbers\'", expressionId);
        expressionId = expression.getId();
        String expressionId_BV = null;
        com.pega.pegarules.priv.runtime.ui.IExpression expression_BV = null;
        if (!StringUtils.isBlank(expressionId)) {
            metadataPage.put("pyExpressionId", expressionId);
        }
        if (!StringUtils.isBlank(expressionId_BV)) {
            metadataPage.put("expressionId_BV", expressionId_BV);
        }
        String paramName = "EXPANDEDSubSectionLoginBBBBBBBBB";
        metadataPage.put("paramName", paramName);
        String inspectorLayoutData = pzAuto
                .getDataUIMetaAttribute("{'type':'Layout','subType':'DYNAMICLAYOUT','pgRef':'RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(3).pySections(1)'}");
        if (!inspectorLayoutData.isEmpty()) {
            metadataPage.put("liveUI", inspectorLayoutData);
        }
        String pyPrefix = null;
        metadataPage.put("prefix", "-default_3");
        metadataPage.put("sectionIndex", "59");
        IUIComponent containerComponent = pzAuto.getUIComponent();
        metadataPage.put("dlChild", "true");
        metadataPage.put("lMode", "Flexbox");
        containerComponent.beginComponent("pxLayoutContainer", metadataPage);
        pzLayoutBody_8();
        containerComponent.endComponent();
    }

    public void pzLayout_10() {
        char currentTemplatingStatus = pzAuto.getUIComponentRuntime()
                .setTemplatingUIStatus('Y');
        if (currentTemplatingStatus == 'Y') {
            pzAuto.getUIComponentRuntime().insertComponentPlaceholderPage();
        }
        pzSetExpandParam_10();
        tools.putParamValue("RWClasses", "");
        if (!pzAuto.getUIComponentRuntime().isTemplatingUIEnabled()) {
            pzLayoutBodyWrapper_10();
        }
        if (pzAuto.getUIComponentRuntime().isTemplatingUIEnabled()) {
            tools.putParamValue("pyInlineStyleSec", "");
            pzLayoutContainer_8();
            tools.putParamValue("pyInlineStyleSec", "");
        }
    }

    public void generateClientWhenDiv_3() {
        String clientWhenAttr = "";
        char currentTemplatingStatus = 'Y';
        currentTemplatingStatus = pzAuto.getUIComponentRuntime()
                .getTemplatingUIStatus();
        if (currentTemplatingStatus == 'N')
            tools.appendString("<div ");
        if (currentTemplatingStatus == 'N')
            tools.appendString("id=\"CT\"");
        if (tools.getThread().getName().indexOf("/$WorkProcessing") != -1
                || tools.getThread().getName().indexOf("/$FlowModalProcess") != -1) {
            if (currentTemplatingStatus == 'N') {
                tools.appendString(" thread_name = \""
                        + tools.getThread().getName() + "\"");
            } else {
                String threadName = tools.getThread().getName();
                clientWhenAttr += "thread_name= \"" + threadName + "\" ";
            }
        }
        if (currentTemplatingStatus == 'N')
            tools.appendString(" SWP=\".WeOfferYouWith\"  SHOW_WHEN=\".WeOfferYouWith = 'Helpline Numbers'\"");
        if (pzAuto.evaluateWhen(".WeOfferYouWith = 'Helpline Numbers'", null,
                true)) {
            if (currentTemplatingStatus == 'N')
                tools.appendString(" style=' ");
            else
                clientWhenAttr += "style= '";
        } else {
            if (currentTemplatingStatus == 'N')
                tools.appendString(" style='display:none; ");
            else
                clientWhenAttr += "style='display:none;  ";
        }
        if (currentTemplatingStatus == 'Y')
            clientWhenAttr += "'";
        if (currentTemplatingStatus == 'Y')
            tools.putParamValue("clientWhenAttr", clientWhenAttr);
        try {
            if (tools.getParamValue("AJAXTrackID") != null
                    && !tools.getParamValue("AJAXTrackID").equals("")) {
                com.pega.pegarules.priv.runtime.IStreamChangeTracker changeTracker = pzAuto
                        .getChangeTracker(tools.getParamValue("AJAXTrackID"));
                changeTracker.trackValueChanges(tools.getStepPage()
                        .getReference() + ".WeOfferYouWith", -1);
            }
        } catch (Exception e) {
        }
    }

    public void pzLayoutBody_7() {
        tools.putParamValue("LAYOUT_METHOD_NAME", "simpleLayout_7");
        simpleLayout_7();
    }

    public void pzLayoutBodyWrapper_8() {
        tools.appendString("<div class='layout layout-noheader layout-noheader-default_3'>");
        String clsScroll = "";
        tools.appendString("<div section_index='1' class='" + clsScroll
                + " layout-body'>");
        tools.putParamValue("LAYOUT_METHOD_NAME", "simpleLayout_7");
        simpleLayout_7();
        tools.appendString("</div></div>");
        tools.putSaveValue("rowClass", "");
    }

    public void pzLayoutBody_6() {
        tools.putParamValue("LAYOUT_METHOD_NAME", "simpleLayout_6");
        simpleLayout_6();
    }

    public void pzLayoutBodyWrapper_7() {
        tools.appendString("<div class='layout layout-none'>");
        String clsScroll = "";
        tools.appendString("<div section_index='1' class='" + clsScroll
                + " layout-body'>");
        tools.putParamValue("LAYOUT_METHOD_NAME", "simpleLayout_6");
        simpleLayout_6();
        tools.appendString("</div></div>");
        tools.putSaveValue("rowClass", "");
    }

    public void pxIcon_3() {
        boolean isDisplayTextWithParam = false;
        String displayTextParamName = "";
        String displayTextParamValue = "";

        StringBuffer pegaValidation = null;
        boolean addedValidation = false;
        try {

            if (pzAuto.getUIComponentRuntime().getTemplatingUIStatus() != 'Y') {
                tools.appendString("<span ");
                tools.appendString(">");
            }
            if (pzAuto.getUIComponentRuntime().getTemplatingUIStatus() == 'Y') {
                IUIComponentMetadata metadataPage = pzAuto
                        .getUIComponentRuntime().createMetadata();
                IUIComponentMetadata cellPage = pzAuto.getUIComponentRuntime()
                        .createMetadata();
                IUIComponentMetadata modePage1 = pzAuto.getUIComponentRuntime()
                        .createMetadata();
                IUIComponentMetadata modePage2 = pzAuto.getUIComponentRuntime()
                        .createMetadata();
                java.util.List<String> ctPropRefs = new ArrayList<String>();
                IUIComponent ctrlComponent = pzAuto.getUIComponent();
                String expressionId = null;
                com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
                IUIComponentMetadata pxPrivilegeIdentifiers = pzAuto
                        .getUIComponentRuntime().createMetadata();
                modePage1.put("generateName", "true");
                cellPage.put("pyStreamName", "Login");
                cellPage.put("pyCellID", "58");
                pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                        .addDataPageInfo();
                String repeatIndx = "";
                boolean disable = false;
                if (expressionId != null && expressionId.length() > 0) {
                    modePage1.put("pyExpressionId", expressionId);
                }
                modePage1.put("helpertype", "none");
                String pyFormatValue = "";
                StringMap whenHc = new HashStringMap();
                whenHc.putString("pyBlockName", "pyIsHybridClient");
                int pyIconWidth = 0;
                int pyIconHeight = 0;
                boolean isImgSrcUrl = false;
                ClipboardPage imagePage = null;
                HashStringMap instanceKeys = new HashStringMap();
                String imgurl = "https://tawk.link/5ed8738f4a7c62581799e0aa/a/59228d463ee9c30cd7d09204/a010808968d5409f056aeec6765818ceac1c1f28/register_now_(190_%C3%97_500px)_(400_%C3%97_400px)_(480_%C3%97_400px)_(360_%C3%97_280px).png";
                java.net.URL imgurl_ext = null;
                if (imgurl != null && imgurl.contains("://")) {
                    try {
                        imgurl_ext = new java.net.URL(imgurl);
                        isImgSrcUrl = true;
                    } catch (Exception imge) {
                    }
                }
                if (isImgSrcUrl) {
                    java.awt.image.BufferedImage iicon = null;
                    pyIconWidth = 360;
                    pyIconHeight = 280;
                }
                String src = "";
                if (imgurl != null && !("").equals(imgurl)) {
                    src = (tools.evaluateWhen(whenHc) || pega_uiengine_offlinesupport
                            .pzIsForOfflineTemplate()) ? pega_uiengine_offlinesupport
                            .pzGetBase64Encoding(StringUtils
                                    .crossScriptingFilter(imgurl))
                            : StringUtils.crossScriptingFilter(imgurl);
                }
                modePage1.put("src", src);
                String style = "";
                if (pyIconWidth != 0 || pyIconHeight != 0) {
                    style = "style='width:" + pyIconWidth + "px;height:"
                            + pyIconHeight + "px;'";
                }
                modePage1.put("style", style);
                if (disable) {
                    modePage1.put("pyDisabled", disable + "");
                }
                modePage1.put("iconSrc", "exturl");
                modePage1.put("pyFormatTypeActionable", "none");
                cellPage.put(
                        "automationId",
                        " "
                                + pzCell.getTestIdIfEnabled("202205240651350224585")
                                + " ");
                String spxUniqueStreamHash51 = getUIActionsMetaData_1();
                if (spxUniqueStreamHash51 != null
                        && !"".equals(spxUniqueStreamHash51)) {
                    pzAuto.getUIComponentRuntime()
                            .getRuntimeContextTree()
                            .addActionString(spxUniqueStreamHash51,
                                    pxUniqueStreamHash + "_51");
                    modePage1.put("pyActionStringID", pxUniqueStreamHash
                            + "_51");
                }
                cellPage.addMetadataInArray("pyModes", modePage1);
                cellPage.addMetadataInArray("pyModes", modePage2);
                metadataPage.putMetadata("pyCell", cellPage);
                ctrlComponent.addDependentScripts("pzpega_ui_template_icon.js");
                ctrlComponent.beginComponent("pxIcon", metadataPage);
                ctrlComponent.setTrackedProperties(ctPropRefs
                        .toArray(new String[] {}));
                ctrlComponent.endComponent();
            } else {

                String referenceString = tools.getStepPage().getReference();
                boolean isParameterizedDeclarePage = pega
                        .getDeclarativePageUtils().isParameterizedDPName(
                                referenceString);
                if (isParameterizedDeclarePage) {
                    referenceString = tools.getStepPage().getString(
                            "pzPageNameBase");
                }
                String buttonUID = "name='Login_" + referenceString + "_58'";
                String pyFormatValue = "";
                String hrefValue = "";
                String proprefAttr = "";
                boolean sectionIsReadOnly = !(tools
                        .getParamValue("SectionReadOnly") != "-1" && tools
                        .hasInputEnabled());
                if (!(sectionIsReadOnly && false && false)) {
                    String repeatIndx = "";
                    int pyIconWidth = 0;
                    int pyIconHeight = 0;
                    boolean isImgSrcUrl = false;
                    ClipboardPage imagePage = null;
                    HashStringMap instanceKeys = new HashStringMap();
                    java.net.URL imgurl_ext = null;
                    try {
                        imgurl_ext = new java.net.URL(
                                "https://tawk.link/5ed8738f4a7c62581799e0aa/a/59228d463ee9c30cd7d09204/a010808968d5409f056aeec6765818ceac1c1f28/register_now_(190_%C3%97_500px)_(400_%C3%97_400px)_(480_%C3%97_400px)_(360_%C3%97_280px).png");
                        isImgSrcUrl = true;
                    } catch (Exception imge) {
                    }
                    if (isImgSrcUrl) {
                        java.awt.image.BufferedImage iicon = null;
                        pyIconWidth = 360;
                        pyIconHeight = 280;
                    }
                    if (pyIconWidth != 0 || pyIconHeight != 0) {
                        tools.appendString("<i class='icons' style='width:"
                                + pyIconWidth
                                + "px;height:"
                                + pyIconHeight
                                + "px;'><img   "
                                + pzCell.getTestIdIfEnabled("202205240651350224585")
                                + "   data-ctl='Icon' ");
                        tools.appendString(" src=\"");
                        if (pega_uiengine_offlinesupport
                                .pzIsForOfflineTemplate()) {
                            tools.appendString(pega_uiengine_offlinesupport
                                    .pzGetBase64Encoding("https://tawk.link/5ed8738f4a7c62581799e0aa/a/59228d463ee9c30cd7d09204/a010808968d5409f056aeec6765818ceac1c1f28/register_now_(190_%C3%97_500px)_(400_%C3%97_400px)_(480_%C3%97_400px)_(360_%C3%97_280px).png"));
                        } else {
                            tools.appendString("https://tawk.link/5ed8738f4a7c62581799e0aa/a/59228d463ee9c30cd7d09204/a010808968d5409f056aeec6765818ceac1c1f28/register_now_(190_%C3%97_500px)_(400_%C3%97_400px)_(480_%C3%97_400px)_(360_%C3%97_280px).png");
                        }
                        tools.appendString("\"");
                        if (!"true".equals(tools
                                .getParamValue("pxAvoidUniqueAttribute")))
                            tools.appendString(buttonUID);
                    } else {
                        tools.appendString("<i class='icons'><img   "
                                + pzCell.getTestIdIfEnabled("202205240651350224585")
                                + "   data-ctl='Icon' ");
                        tools.appendString(" src=\"");
                        if (pega_uiengine_offlinesupport
                                .pzIsForOfflineTemplate()) {
                            tools.appendString(pega_uiengine_offlinesupport
                                    .pzGetBase64Encoding("https://tawk.link/5ed8738f4a7c62581799e0aa/a/59228d463ee9c30cd7d09204/a010808968d5409f056aeec6765818ceac1c1f28/register_now_(190_%C3%97_500px)_(400_%C3%97_400px)_(480_%C3%97_400px)_(360_%C3%97_280px).png"));
                        } else {
                            tools.appendString("https://tawk.link/5ed8738f4a7c62581799e0aa/a/59228d463ee9c30cd7d09204/a010808968d5409f056aeec6765818ceac1c1f28/register_now_(190_%C3%97_500px)_(400_%C3%97_400px)_(480_%C3%97_400px)_(360_%C3%97_280px).png");
                        }
                        tools.appendString("\"");
                        if (!"true".equals(tools
                                .getParamValue("pxAvoidUniqueAttribute")))
                            tools.appendString(buttonUID);
                    }
                    tools.appendString(" class ='cursordefault' ");
                    tools.appendString(" alt= ''");
                    tools.appendString(" /></i>");
                }
            }

            tools.putParamValue("pega_attributes", "");
            if (pzAuto.getUIComponentRuntime().getTemplatingUIStatus() != 'Y') {
                tools.appendString("</span>");
            }
            if (pegaValidation != null) {
                com.pega.pegarules.priv.factory.StringBufferFactory
                        .release(pegaValidation);
            }
        } catch (Exception e) {

            oLog.error(e.getMessage());

            if (pzAuto.getUIComponentRuntime().getTemplatingUIStatus() == 'Y'
                    && pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                            .isLiveDesignViewMode()) {

                IUIComponentMetadata metadata = pzAuto.getUIComponentRuntime()
                        .createMetadata();
                IUIComponent ctrlComponent = pzAuto.getUIComponent();
                metadata.put("cellInfo", "Image");
                metadata.put("msgText", "config issue");
                ctrlComponent
                        .addDependentScripts("pzpega_ui_template_designview.js");
                ctrlComponent.beginComponent("pxDesignViewError", metadata);
                ctrlComponent.endComponent();
            }
        }

    }

    public int simpleLayoutCell_11(int index) {
        IUIComponent uiComp = null;
        String labelName = "";
        String ariahiddenString = "";
        String baseRef = "";
        generateClientWhenDiv_1();
        tools.appendString("' "
                + pega.getUIEngine().getFVInspectorUtils()
                        .startCollectingFieldValueData()
                + pzCell.getInspectorDataDynamic(
                        "pxIcon",
                        ".pyTemplateGeneric",
                        "RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(2).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(2).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1)")
                + " class='content-item content-field item-"
                + Integer.toString(index)
                + " remove-top-spacing remove-left-spacing remove-bottom-spacing remove-right-spacing   "
                + pzSection.getCustomStyle(false, "", "dataValueRead",
                        "dataValueWrite")
                + " flex flex-row '  STRING_TYPE='field' RESERVE_SPACE='false'>");
        pzAuto.getUIComponentRuntime().insertComponentPlaceholderPage();
        tools.putSaveValue("parentLayouttype", "SIMPLELAYOUT");
        pxIcon_3();
        tools.appendString(pega.getUIEngine().getFVInspectorUtils()
                .stopCollectingFieldValueData()
                + "</div>");
        index++;
        return index;
    }

    public int simpleLayoutTemplateCell_11(int index) {
        IUIComponent uiComp = null;
        String labelName = "";
        String expressionId = null;
        boolean isLabelJSP = false;
        String reqExpressionId = null;
        String disExpressionId = null;
        com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
        if (expression != null) {
            expressionId = expression.getId();
        }
        String pyCustomRequireFormat = "";
        pyCustomRequireFormat = tools.getLocalizedTextForString("pyCaption",
                "pyRequired");
        String dataFieldValueMeta = pega.getUIEngine().getFVInspectorUtils()
                .startCollectingFieldValueData();
        String baseRef = "";
        boolean pyDLCellVisibility = false;
        IUIComponent cc_dlCell = pzAuto.getUIComponent();
        IUIComponentMetadata pg_dlCellMeta = pzAuto.getUIComponentRuntime()
                .createMetadata();
        IUIComponentMetadata pgCells = pzAuto.getUIComponentRuntime()
                .createMetadata();
        pgCells.put(
                "partialClass",
                "remove-top-spacing remove-left-spacing remove-bottom-spacing remove-right-spacing flex flex-row");
        pgCells.put(
                "automationId",
                new StringBuilder(" ")
                        .append(pzCell
                                .getTestIdIfEnabled("202205240651350224585-Label"))
                        .append(" ").toString().replace("data-test-id=", "")
                        .trim());
        pgCells.put("format", "pxIcon");
        pgCells.put("forLabel", ".pyTemplateGeneric");
        pgCells.put("pyAutoHTML", "true");
        pgCells.put("spanClass", "iconRequired standard_iconRequired");
        pgCells.put("cstmreqfor", pyCustomRequireFormat);
        if (!StringUtils.isBlank(expressionId))
            pgCells.put("pyExpressionId", expressionId);
        if (!"".equals(baseRef))
            pgCells.put("pyBaseRef", String.valueOf(baseRef));
        if (!"".equals(dataFieldValueMeta))
            pgCells.put("startFV", dataFieldValueMeta);
        pgCells.put("labelJSP", String.valueOf(isLabelJSP));
        pg_dlCellMeta.putMetadata("pyCell", pgCells);
        boolean isExpression = false;
        boolean isOffline = false;
        cc_dlCell.beginComponent("DynamicLayoutCell", pg_dlCellMeta);
        String inspectorData = pzCell
                .getInspectorDataDynamic(
                        "pxIcon",
                        ".pyTemplateGeneric",
                        "RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(2).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(2).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1)");
        if (!inspectorData.isEmpty()) {
            pgCells.put("liveUI", inspectorData);
        }
        pxIcon_3();
        labelName = "Image";
        if (!pega_uiengine_offlinesupport.pzIsForOfflineTemplate()) {
            pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                    .addLocalizedValue(labelName, "pyCaption");
        } else {
            StringUtils.crossScriptingFilter(tools.getLocalizedTextForString(
                    "pyCaption", labelName));
        }
        pgCells.put("pyLabelValue", labelName);
        String uiFieldValueMeta = pega.getUIEngine().getFVInspectorUtils()
                .stopCollectingFieldValueData();
        if (!"".equals(uiFieldValueMeta)) {
            pgCells.put("stopFV", uiFieldValueMeta);
        }
        cc_dlCell.endComponent();
        index++;
        return index;
    }

    public void pzSetExpandParam_9() {
        pzSection.getLayout().setExpandParam("SubSectionLoginBBBBBBBB", "",
                false);
    }

    public void simpleLayout_6() {
        char parentTemplatingStatus = pzAuto.getUIComponentRuntime()
                .getTemplatingUIStatus();
        char currentTemplatingStatus = 'Y';
        if (!tools.getParamValue("UITemplatingStatus").equals("N")) {
            currentTemplatingStatus = pzAuto.getUIComponentRuntime()
                    .setTemplatingUIStatus('Y');
        } else {
            currentTemplatingStatus = pzAuto.getUIComponentRuntime()
                    .setTemplatingUIStatus('N');
        }
        String spxUniqueStreamHash48 = "";
        if (currentTemplatingStatus != 'N') {
            spxUniqueStreamHash48 = getUIActionsMetaData_1();
            if (spxUniqueStreamHash48 != null
                    && !"".equals(spxUniqueStreamHash48)) {
                pzAuto.getUIComponentRuntime()
                        .getRuntimeContextTree()
                        .addActionString(spxUniqueStreamHash48,
                                pxUniqueStreamHash + "_48");
            }
        }
        String refreshAttributes = "";
        String strMethodName = "";
        IUIComponent cc_dl = null;
        boolean bIsIe = (pzAuto.getBrowserUtils().isIE());
        String bIsWrapperAdded = tools.getParamValue("bIsWrapperAdded");
        String bIsGridLayout = tools.getParamValue("bIsGridLayout");
        cc_dl = pzAuto.getUIComponent();
        IUIComponentMetadata pg_dlmeta = pzAuto.getUIComponentRuntime()
                .createMetadata();
        pg_dlmeta.put("automationId",
                " " + pzCell.getTestIdIfEnabled("202205240651350223478") + " ");
        String subscriptionID = null;
        if (currentTemplatingStatus != 'Y') {
            if (bIsIe && "true".equals(bIsGridLayout)
                    && !"true".equals(bIsWrapperAdded)) {
                tools.appendString("<div class='flex-grid-table-wrapper'><div class='flex-grid-tablecell-wrapper'>");
                tools.putParamValue("bIsWrapperAdded", "true");
            }
            tools.appendString("<div bSimpleLayout='true' ");
            if (((PegaAPI) tools).getUIEngine().getPushServiceUtils()
                    .isPushEnabled()
                    && subscriptionID != null) {
                tools.appendString(" data-subscription-id='" + subscriptionID
                        + "' ");
            }
            tools.appendString(""
                    + pzAuto.getDataUIMetaAttribute("{'type':'Layout','subType':'DYNAMICLAYOUT','pgRef':'RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(2).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(2).pySections(1)'}")
                    + " class='"
                    + "flex  content  layout-content-default content-default "
                    + "'  ");
            if (!tools.getParamValue("pyPegaDesignMode").equals("true")) {
                tools.appendString(" ");
            }
            tools.appendString(" " + refreshAttributes + ">");
        } else {
            String expressionId = null;
            com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
            if (StringUtils.isBlank(expressionId)) {
                expressionId = pxUniqueStreamHash + "_49";
            }
            expression = pzAuto
                    .getUIComponentRuntime()
                    .getExpressionEvaluator()
                    .addExpression("showWhen",
                            ".WeOfferYouWith = 'Registration'", expressionId);
            if (!tools.getParamValue("pyPegaDesignMode").equals("true")
                    && spxUniqueStreamHash48 != null
                    && !"".equals(spxUniqueStreamHash48)) {
                pg_dlmeta.put("pyActionStringID", pxUniqueStreamHash + "_48");
            }
            if (!StringUtils.isBlank(expressionId)) {
                pg_dlmeta.put("pyExpressionId", expressionId);
            }
            if (!"".equals(strMethodName))
                pg_dlmeta.put("methodnm", strMethodName);
            pg_dlmeta.put("format", "default");
            String inspectorData = new StringBuilder("\"")
                    .append(""
                            + pzAuto.getDataUIMetaAttribute("{'type':'Layout','subType':'DYNAMICLAYOUT','pgRef':'RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(2).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(2).pySections(1)'}")
                            + "").append("\"").toString();
            if (!inspectorData.equals("\"\"")) {
                pg_dlmeta.put("liveUI", inspectorData);
            }
            pg_dlmeta.put("isDLChild", "true");
            pg_dlmeta.put("clear", "false");
            pg_dlmeta.put("lMode", "SimpleDiv");
            pzAuto.getUIComponentRuntime().insertComponentPlaceholderPage();
            cc_dl.beginComponent("DynamicLayout", pg_dlmeta);
        }
        int index = 1;
        if (currentTemplatingStatus != 'Y') {
            index = simpleLayoutCell_11(index);
        } else {
            index = simpleLayoutTemplateCell_11(index);
        }
        if (currentTemplatingStatus != 'Y') {
            tools.appendString("</div>");
            if (bIsIe && "true".equals(bIsGridLayout)
                    && !"true".equals(bIsWrapperAdded)) {
                tools.appendString("</div></div>");
                tools.putParamValue("bIsWrapperAdded", "false");
            }
        } else {
            cc_dl.endComponent();
        }
        pzAuto.getUIComponentRuntime().resetTemplatingUIStatus(
                parentTemplatingStatus);
    }

    public void pzLayoutContainer_6() {
        IUIComponentMetadata metadataPage = pzAuto.getUIComponentRuntime()
                .createMetadata();
        String expressionId = null;
        com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
        expressionId = pxUniqueStreamHash + "_54";
        expression = pzAuto
                .getUIComponentRuntime()
                .getExpressionEvaluator()
                .addExpression("showWhen",
                        ".WeOfferYouWith = \'Registration\'", expressionId);
        expressionId = expression.getId();
        String expressionId_BV = null;
        com.pega.pegarules.priv.runtime.ui.IExpression expression_BV = null;
        if (!StringUtils.isBlank(expressionId_BV)) {
            metadataPage.put("expressionId_BV", expressionId_BV);
        }
        String paramName = "EXPANDEDSubSectionLoginBBBBBBBB";
        String inspectorLayoutData = pzAuto
                .getDataUIMetaAttribute("{'type':'Layout','subType':'DYNAMICLAYOUT','pgRef':'RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(2).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(2).pySections(1)'}");
        if (!inspectorLayoutData.isEmpty()) {
            metadataPage.put("liveUI", inspectorLayoutData);
        }
        String pyPrefix = null;
        IUIComponent containerComponent = pzAuto.getUIComponent();
        metadataPage.put("dlChild", "true");
        metadataPage.put("lMode", "SimpleDiv");
        containerComponent.beginComponent("pxLayoutContainer", metadataPage);
        pzLayoutBody_6();
        containerComponent.endComponent();
    }

    public void pzLayout_7() {
        char currentTemplatingStatus = pzAuto.getUIComponentRuntime()
                .setTemplatingUIStatus('Y');
        if (currentTemplatingStatus == 'Y') {
            pzAuto.getUIComponentRuntime().insertComponentPlaceholderPage();
        }
        pzSetExpandParam_9();
        tools.putParamValue("RWClasses", "");
        if (!pzAuto.getUIComponentRuntime().isTemplatingUIEnabled()) {
            pzLayoutBodyWrapper_7();
        }
        if (pzAuto.getUIComponentRuntime().isTemplatingUIEnabled()) {
            tools.putParamValue("pyInlineStyleSec", "");
            pzLayoutContainer_6();
            tools.putParamValue("pyInlineStyleSec", "");
        }
    }

    public void pzLayoutBody_5() {
        tools.putParamValue("LAYOUT_METHOD_NAME", "simpleLayout_5");
        simpleLayout_5();
    }

    public void pzLayoutBodyWrapper_6() {
        tools.appendString("<div class='layout layout-noheader layout-noheader-default_4'>");
        String clsScroll = "";
        tools.appendString("<div section_index='1' class='" + clsScroll
                + " layout-body'>");
        tools.putParamValue("LAYOUT_METHOD_NAME", "simpleLayout_5");
        simpleLayout_5();
        tools.appendString("</div></div>");
        tools.putSaveValue("rowClass", "");
    }

    public void lfsInclude_1() {
        pzAuto.emitIncludeStreamReference("pzLaunchFlowScriptInclude", null,
                !tools.hasInputEnabled() ? "NoInput" : "NoInput",
                "Rule-HTML-Fragment", null);
    }

    public void checkForScriptTags_1(String ScriptTags) {
        String isEncodingAllowed = tools.getSystemSettings().getDynamic(
                "Pega-UIEngine", "isLinkLabelEncodingAllowed");
        if ("false".equals(isEncodingAllowed)) {
            tools.appendString(StringUtils.crossScriptingFilter(ScriptTags));
        } else {
            if (ScriptTags.toLowerCase().contains("<script>")
                    || ScriptTags.toLowerCase().contains("<<include")
                    || ScriptTags.toLowerCase().contains("<%")) {
                tools.appendString(StringUtils.crossScriptingFilter(ScriptTags));
            } else {
                tools.appendString(StringUtils.filterRichText(ScriptTags));
            }
        }
    }

    public String getUIActionsMetaData_2() {
        StringBuilder actionsStringBuilder = tools.pushStreamBody();
        ((PegaStreamAPI) tools).disableDirectStreaming();

        {
            boolean isBehaviorAdded = false;
            isBehaviorAdded = false;
            tools.appendString(" data-click='[");
            if (isBehaviorAdded && true) {
                tools.appendString(",");
            }
            {
                com.pega.pegarules.priv.runtime.IActionRequest refreshActionRequest = pzAuto
                        .getActionRequest();
                com.pega.pegarules.priv.runtime.IActionRequest refreshActionRequestD = null;
                StringBuffer staticURLStr = new StringBuffer();
                StringBuffer preActParamStr = new StringBuffer();
                StringBuffer preDTParamStr = new StringBuffer();
                String runTimeSecStreamName = tools
                        .getParamValue("runTimeSecStreamName");
                tools.putParamValue("runTimeSecStreamName", "");
                if (pega_uiengine_offlinesupport.pzIsForOfflineTemplate()) {
                    try {
                        pzPackageRuntime.packageSection("Login", tools
                                .getStepPage().getReference(), tools
                                .getStepPage().getString("pxObjClass"));
                    } catch (Exception e) {
                        oLog.error("Error generating section package - "
                                + e.getMessage());
                    }
                }
                refreshActionRequest.registerFixedParameter("pyActivity",
                        "ReloadSection");
                refreshActionRequest.registerFixedParameter("SectionName", "");
                refreshActionRequest.registerFixedParameter("PreActivity",
                        "SendSMS");
                staticURLStr
                        .append("pyActivity=ReloadSection&StreamClass=Rule-HTML-Section");
                staticURLStr
                        .append("&StreamName="
                                + ((!StringUtils.isBlank(runTimeSecStreamName)) ? runTimeSecStreamName
                                        : "Login"));
                staticURLStr.append("&PreActivity=SendSMS");
                staticURLStr.append("&PreDataTransform=pyDefault");
                tools.appendString("[\"refresh\", [\"thisSection\",\"\", \"SendSMS\", \"");
                refreshActionRequestD = refreshActionRequest
                        .createDispatchedActionRequest();
                tools.appendString("=\", \"\", \"pyDefault,");
                refreshActionRequestD = refreshActionRequest
                        .createDispatchedActionRequest();
                tools.appendString("\",\":event\",\"\",[\"");
                if (!"".equals(preActParamStr.toString())) {
                    staticURLStr.append("&pzActivityParamsEncrypted="
                            + pega_uiengine_pzcontrol.pzURLEncodeString("{"
                                    + preActParamStr.toString() + "}"));
                }
                if (!"".equals(preDTParamStr.toString())) {
                    staticURLStr.append("&pzDTParamsEncrypted="
                            + pega_uiengine_pzcontrol.pzURLEncodeString("{"
                                    + preDTParamStr.toString() + "}"));
                }
                tools.appendString(StringUtils
                        .escapeIntoJSONString(pega_rules_utilities
                                .pzEncryptURLActionString(tools, "Thread",
                                        staticURLStr.toString()))
                        + "\",{"
                        + preActParamStr.toString()
                        + "},{"
                        + preDTParamStr.toString()
                        + "}],\""
                        + pzAuto.getUIComponentRuntime()
                                .generateActionTokenForPage() + "\"]");
                if (pega_uiengine_offlinesupport.pzIsForOfflineTemplate()) {
                    pzPackageRuntime.packageDataTransform(tools.getStepPage()
                            .getString("pxObjClass"), "pyDefault");
                }
                pzAuto.registerActionRequest(refreshActionRequest);
            }

            tools.appendString("]");
            isBehaviorAdded = true;
            if (isBehaviorAdded && true) {
                tools.appendString(",");
            }
            tools.appendString("[\"launchFlowInModal\", [\"");

            tools.appendFormatted("SendSMS", StreamBuilder.FMT_NORMAL);
            tools.appendString("\", \"GOV-EPass-Work-EPassRegistration\", \"\", \"\", \":event\", \"\", \"pzModalFlowTemplate\"]");

            tools.appendString("]");
            isBehaviorAdded = true;
            tools.appendString("]' ");
        }
        String returnString = actionsStringBuilder.toString();
        tools.popStreamBody();
        return returnString;
    }

    public void pxButton_1() {
        boolean isDisplayTextWithParam = false;
        String displayTextParamName = "";
        String displayTextParamValue = "";

        StringBuffer pegaValidation = null;
        boolean addedValidation = false;
        try {

            if (pzAuto.getUIComponentRuntime().getTemplatingUIStatus() != 'Y') {
                tools.appendString("<span ");
                tools.appendString(">");
            }
            if (pzAuto.getUIComponentRuntime().getTemplatingUIStatus() == 'Y') {
                IUIComponentMetadata metadataPage = pzAuto
                        .getUIComponentRuntime().createMetadata();
                IUIComponentMetadata cellPage = pzAuto.getUIComponentRuntime()
                        .createMetadata();
                IUIComponentMetadata modePage1 = pzAuto.getUIComponentRuntime()
                        .createMetadata();
                IUIComponentMetadata modePage2 = pzAuto.getUIComponentRuntime()
                        .createMetadata();
                java.util.List<String> ctPropRefs = new ArrayList<String>();
                IUIComponent ctrlComponent = pzAuto.getUIComponent();
                String expressionId = null;
                com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
                tools.putParamValue("skipHTMLEncoding", "true");
                IUIComponentMetadata pxPrivilegeIdentifiers = pzAuto
                        .getUIComponentRuntime().createMetadata();
                if (expressionId != null && expressionId.length() > 0) {
                    modePage2.put("pyExpressionId", expressionId);
                }
                String uid = String
                        .valueOf(((com.pega.pegarules.priv.context.PegaRequestor) tools
                                .getRequestor()).currentTimeUnique());
                String navPage = "pyNavigation" + uid;
                cellPage.put(
                        "automationId",
                        " "
                                + pzCell.getTestIdIfEnabled("202107090035400041713")
                                + " ");
                if (false || (pzAuto.isOffline() && false)) {
                    modePage2.put("nav", navPage);
                }
                modePage2.put("pyName", "Login_$CTX$_55");
                String repeatIndx = "";
                String pyTooltip = "";
                modePage2.put("tooltip", pyTooltip);
                modePage2.put("helpertype", "none");
                modePage2.put("styles", "");
                modePage2.put("imgSrc", "styleclass");
                String pyIconStyle = "";
                pyIconStyle = "pi pi-send-solid";
                modePage2.put("image", pyIconStyle);
                modePage2.put("pyActionImagePosition", "left");
                String customStyles = null;
                String pyLabel = "";
                if (pega.getPackageRuntime().canPackage()) {
                    tools.getLocalizedTextForString(".pyButtonLabel",
                            "Send OTP\t" + repeatIndx,
                            StreamBuilder.FMT_LITERAL);
                } else {
                    pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                            .addLocalizedValue("Send OTP", ".pyButtonLabel");
                }
                pyLabel = "Send OTP";
                modePage2.put("label", pyLabel);
                String spxUniqueStreamHash40 = getUIActionsMetaData_2();
                if (spxUniqueStreamHash40 != null
                        && !"".equals(spxUniqueStreamHash40)) {
                    pzAuto.getUIComponentRuntime()
                            .getRuntimeContextTree()
                            .addActionString(spxUniqueStreamHash40,
                                    pxUniqueStreamHash + "_40");
                    modePage2.put("pyActionStringID", pxUniqueStreamHash
                            + "_40");
                }
                modePage2.put("actionPath", " data-click='.'");
                tools.putParamValue("skipHTMLEncoding", "false");
                cellPage.addMetadataInArray("pyModes", modePage1);
                cellPage.addMetadataInArray("pyModes", modePage2);
                metadataPage.putMetadata("pyCell", cellPage);
                ctrlComponent
                        .addDependentScripts("pzpega_ui_template_button.js");
                if (!pzAuto.hasStaticContentJSOptimization()) {
                    ctrlComponent.addAdditionalFragment("lfsInclude",
                            "pzLaunchFlowScriptInclude");
                }
                ctrlComponent.beginComponent("pxButton", metadataPage);
                ctrlComponent.setTrackedProperties(ctPropRefs
                        .toArray(new String[] {}));
                ctrlComponent.endComponent();
            } else {
                boolean bDisabled = false;
                boolean bOptimizedMarkup = pzAuto.getUIComponentRuntime()
                        .isHarnessTemplatized() && pzAuto.isOffline();
                String pyFormatValue = "";
                String toolTipVal = "";
                String hrefValue = "#";
                String referenceString = tools.getStepPage().getReference();
                boolean isParameterizedDeclarePage = pega
                        .getDeclarativePageUtils().isParameterizedDPName(
                                referenceString);
                if (isParameterizedDeclarePage) {
                    referenceString = tools.getStepPage().getString(
                            "pzPageNameBase");
                }
                String buttonUID = "name='Login_" + referenceString + "_55'";
                String securedPropValue = null;
                tools.appendString("<button "
                        + pzCell.getTestIdIfEnabled("202107090035400041713")
                        + "  data-ctl='Button'  type='button' ");
                if (!"true".equals(tools
                        .getParamValue("pxAvoidUniqueAttribute")))
                    tools.appendString(buttonUID);
                pega_uiengine_pzcontrol.pzAddClientValidation(tools, "", "",
                        "", "");
                {
                    boolean isBehaviorAdded = false;
                    isBehaviorAdded = false;
                    tools.appendString(" data-click='[");
                    if (isBehaviorAdded && true) {
                        tools.appendString(",");
                    }
                    {
                        com.pega.pegarules.priv.runtime.IActionRequest refreshActionRequest = pzAuto
                                .getActionRequest();
                        com.pega.pegarules.priv.runtime.IActionRequest refreshActionRequestD = null;
                        StringBuffer staticURLStr = new StringBuffer();
                        StringBuffer preActParamStr = new StringBuffer();
                        StringBuffer preDTParamStr = new StringBuffer();
                        String runTimeSecStreamName = tools
                                .getParamValue("runTimeSecStreamName");
                        tools.putParamValue("runTimeSecStreamName", "");
                        if (pega_uiengine_offlinesupport
                                .pzIsForOfflineTemplate()) {
                            try {
                                pzPackageRuntime.packageSection("Login", tools
                                        .getStepPage().getReference(), tools
                                        .getStepPage().getString("pxObjClass"));
                            } catch (Exception e) {
                                oLog.error("Error generating section package - "
                                        + e.getMessage());
                            }
                        }
                        refreshActionRequest.registerFixedParameter(
                                "pyActivity", "ReloadSection");
                        refreshActionRequest.registerFixedParameter(
                                "SectionName", "");
                        refreshActionRequest.registerFixedParameter(
                                "PreActivity", "SendSMS");
                        staticURLStr
                                .append("pyActivity=ReloadSection&StreamClass=Rule-HTML-Section");
                        staticURLStr
                                .append("&StreamName="
                                        + ((!StringUtils
                                                .isBlank(runTimeSecStreamName)) ? runTimeSecStreamName
                                                : "Login"));
                        staticURLStr.append("&PreActivity=SendSMS");
                        staticURLStr.append("&PreDataTransform=pyDefault");
                        tools.appendString("[\"refresh\", [\"thisSection\",\"\", \"SendSMS\", \"");
                        refreshActionRequestD = refreshActionRequest
                                .createDispatchedActionRequest();
                        tools.appendString("=\", \"\", \"pyDefault,");
                        refreshActionRequestD = refreshActionRequest
                                .createDispatchedActionRequest();
                        tools.appendString("\",\":event\",\"\",[\"");
                        if (!"".equals(preActParamStr.toString())) {
                            staticURLStr.append("&pzActivityParamsEncrypted="
                                    + pega_uiengine_pzcontrol
                                            .pzURLEncodeString("{"
                                                    + preActParamStr.toString()
                                                    + "}"));
                        }
                        if (!"".equals(preDTParamStr.toString())) {
                            staticURLStr.append("&pzDTParamsEncrypted="
                                    + pega_uiengine_pzcontrol
                                            .pzURLEncodeString("{"
                                                    + preDTParamStr.toString()
                                                    + "}"));
                        }
                        tools.appendString(StringUtils
                                .escapeIntoJSONString(pega_rules_utilities
                                        .pzEncryptURLActionString(tools,
                                                "Thread",
                                                staticURLStr.toString()))
                                + "\",{"
                                + preActParamStr.toString()
                                + "},{"
                                + preDTParamStr.toString()
                                + "}],\""
                                + pzAuto.getUIComponentRuntime()
                                        .generateActionTokenForPage() + "\"]");
                        if (pega_uiengine_offlinesupport
                                .pzIsForOfflineTemplate()) {
                            pzPackageRuntime.packageDataTransform(tools
                                    .getStepPage().getString("pxObjClass"),
                                    "pyDefault");
                        }
                        pzAuto.registerActionRequest(refreshActionRequest);
                    }

                    tools.appendString("]");
                    isBehaviorAdded = true;
                    if (isBehaviorAdded && true) {
                        tools.appendString(",");
                    }
                    tools.appendString("[\"launchFlowInModal\", [\"");

                    tools.appendFormatted("SendSMS", StreamBuilder.FMT_NORMAL);
                    tools.appendString("\", \"GOV-EPass-Work-EPassRegistration\", \"\", \"\", \":event\", \"\", \"pzModalFlowTemplate\"]");

                    tools.appendString("]");
                    isBehaviorAdded = true;
                    tools.appendString("]' ");
                }
                String repeatIndx = "";
                tools.appendString("class='pzhc pzbutton");
                tools.appendString("'");
                if (bOptimizedMarkup) {
                    tools.appendString(" data-bindprops='innerHTML,title' ");
                }
                tools.appendString(" >");
                String classProp = "";
                classProp = "pi pi-send-solid";
                tools.appendString("<i  data-click='.' class='" + classProp
                        + "'></i>");
                boolean hasLineBreaks = false;
                hasLineBreaks = "Send OTP"
                        .matches("(.*)<([Bb][Rr])\\s*\\/*\\s*>(.*)");
                if (hasLineBreaks) {
                    tools.appendString("<span class='pzbtn-label'  data-click='.' ");
                }
                if (bOptimizedMarkup && hasLineBreaks) {
                    tools.appendString("  data-bindprops='title,innerHTML' ");
                }
                if (hasLineBreaks) {
                    tools.appendString("  > ");
                }
                tools.appendString("");
                pega_uiengine_harness.pzGenAKey(tools
                        .getLocalizedTextForString(".pyButtonLabel",
                                "Send OTP", StreamBuilder.FMT_LITERAL));
                checkForScriptTags_1(tools.getParamValue("pzULabel"));
                tools.appendString("</button>");
                lfsInclude_1();
            }

            tools.putParamValue("pega_attributes", "");
            if (pzAuto.getUIComponentRuntime().getTemplatingUIStatus() != 'Y') {
                tools.appendString("</span>");
            }
            if (pegaValidation != null) {
                com.pega.pegarules.priv.factory.StringBufferFactory
                        .release(pegaValidation);
            }
        } catch (Exception e) {

            oLog.error(e.getMessage());

            if (pzAuto.getUIComponentRuntime().getTemplatingUIStatus() == 'Y'
                    && pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                            .isLiveDesignViewMode()) {

                IUIComponentMetadata metadata = pzAuto.getUIComponentRuntime()
                        .createMetadata();
                IUIComponent ctrlComponent = pzAuto.getUIComponent();
                metadata.put("cellInfo", "Text Input");
                metadata.put("msgText", "config issue");
                ctrlComponent
                        .addDependentScripts("pzpega_ui_template_designview.js");
                ctrlComponent.beginComponent("pxDesignViewError", metadata);
                ctrlComponent.endComponent();
            }
        }

    }

    public void pzLayoutBodyWrapper_5() {
        if (pzSection.getLayout().loadLayoutBody()) {
            sectionBodyIncludeInCell_2();
        }
        tools.putSaveValue("rowClass", "");
    }

    public void buildSection_2() {
        Map<String, Object> secInfo = new HashMap<String, Object>();
        secInfo.put("usingPage", ".Login");
        secInfo.put("isUsingPagePropertyRef", false);
        secInfo.put("doNotConsiderDecParams", false);
        secInfo.put("keepStreamProperties", true);
        secInfo.put("preserveParamState", false);
        pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                .loadSection(pxUniqueStreamHash + "_38", "Login", secInfo);
    }

    public void sectionBodyIncludeInCell_2() {
        if (pzAuto.getUIComponentRuntime().isTemplatingUIEnabled()) {
            buildSection_2();
            return;
        }
        String strSectionPageProp = "";
        tools.putParamValue("section_params", "");

        String inputType = "Input";
        boolean popReadOnly = false;
        String readOnlyParam = tools.getParamValue("ReadOnly");
        if (readOnlyParam.equalsIgnoreCase("-1")
                || readOnlyParam.equalsIgnoreCase("true")
                || !tools.hasInputEnabled()) {
            if (!(readOnlyParam.equalsIgnoreCase("-1") || readOnlyParam
                    .equalsIgnoreCase("true")) && !tools.hasInputEnabled()) {
                popReadOnly = true;
            }
            inputType = "NoInput";
        }
        if ("NoInput".equals(inputType)) {
            tools.putParamValue("SectionReadOnly", "-1");
        }
        String sectionName = "Login";
        String usingPage = null;
        usingPage = ".Login";
        ClipboardPage pg_usingPage = null;
        if (usingPage != null && !"".equals(usingPage)) {
            pg_usingPage = tools.findPage(usingPage);
        }
        PRStackFrame pz_StackFrame1 = null;
        String lazyInfoBefore = null;
        if (pg_usingPage != null) {
            lazyInfoBefore = tools.getParamValue("lazyLoadInfo");
            pz_StackFrame1 = pega.pushStackFrame(null, pg_usingPage, false,
                    false, PRStackFrame.Type.APPEND_STREAM,
                    "Rule-HTML-Section", sectionName);
            tools.putParamValue("lazyLoadInfo", "");
        }
        if (usingPage == null
                || "".equals(usingPage)
                || (pg_usingPage != null && !pg_usingPage
                        .getString("pxObjClass").trim().equals(""))) {
            String tempRenderSingle = tools.getParamValue("RenderSingle");
            tools.putParamValue("RenderSingle", "");
            if (!tools.getParamValue("SecBaseRefParam").equals("false")) {
                tools.putParamValue(
                        "section_base_ref",
                        " NAME='BASE_REF' BASE_REF='"
                                + pega_uiengine_harness.pzGetUsingPageName(
                                        usingPage, pg_usingPage) + "'");
            }
            pzAuto.emitIncludeStreamReference(sectionName, null, inputType,
                    "Rule-HTML-Section", null);
            tools.putParamValue("section_base_ref", "");
            tools.putParamValue("RenderSingle", tempRenderSingle);
        }
        if (pg_usingPage != null) {
            String lazyInfoAfter = tools.getParamValue("lazyLoadInfo");
            pega.popStackFrame(pz_StackFrame1, false);
            tools.putParamValue("lazyLoadInfo", lazyInfoBefore + lazyInfoAfter);
        }
        if (popReadOnly) {
            tools.getParameterPage().remove("SectionReadOnly");
        }
    }

    public void pzSetExpandParam_8() {
        pzSection.getLayout().setExpandParam("SubSectionCellLogin883", "",
                false);
    }

    public void pzLayout_5() {
        pzSetExpandParam_8();
        pzLayoutBodyWrapper_5();
    }

    public void buildSection_1() {
        Map<String, Object> secInfo = new HashMap<String, Object>();
        secInfo.put("usingPage", ".Login");
        secInfo.put("isUsingPagePropertyRef", false);
        secInfo.put("doNotConsiderDecParams", false);
        secInfo.put("keepStreamProperties", true);
        secInfo.put("preserveParamState", false);
        pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                .loadSection(pxUniqueStreamHash + "_35", "Login", secInfo);
    }

    public void sectionBodyIncludeInCell_1() {
        if (pzAuto.getUIComponentRuntime().isTemplatingUIEnabled()) {
            buildSection_1();
            return;
        }
        String strSectionPageProp = "";
        tools.putParamValue("section_params", "");

        String inputType = "Input";
        boolean popReadOnly = false;
        String readOnlyParam = tools.getParamValue("ReadOnly");
        if (readOnlyParam.equalsIgnoreCase("-1")
                || readOnlyParam.equalsIgnoreCase("true")
                || !tools.hasInputEnabled()) {
            if (!(readOnlyParam.equalsIgnoreCase("-1") || readOnlyParam
                    .equalsIgnoreCase("true")) && !tools.hasInputEnabled()) {
                popReadOnly = true;
            }
            inputType = "NoInput";
        }
        if ("NoInput".equals(inputType)) {
            tools.putParamValue("SectionReadOnly", "-1");
        }
        String sectionName = "Login";
        String usingPage = null;
        usingPage = ".Login";
        ClipboardPage pg_usingPage = null;
        if (usingPage != null && !"".equals(usingPage)) {
            pg_usingPage = tools.findPage(usingPage);
        }
        PRStackFrame pz_StackFrame1 = null;
        String lazyInfoBefore = null;
        if (pg_usingPage != null) {
            lazyInfoBefore = tools.getParamValue("lazyLoadInfo");
            pz_StackFrame1 = pega.pushStackFrame(null, pg_usingPage, false,
                    false, PRStackFrame.Type.APPEND_STREAM,
                    "Rule-HTML-Section", sectionName);
            tools.putParamValue("lazyLoadInfo", "");
        }
        if (usingPage == null
                || "".equals(usingPage)
                || (pg_usingPage != null && !pg_usingPage
                        .getString("pxObjClass").trim().equals(""))) {
            String tempRenderSingle = tools.getParamValue("RenderSingle");
            tools.putParamValue("RenderSingle", "");
            if (!tools.getParamValue("SecBaseRefParam").equals("false")) {
                tools.putParamValue(
                        "section_base_ref",
                        " NAME='BASE_REF' BASE_REF='"
                                + pega_uiengine_harness.pzGetUsingPageName(
                                        usingPage, pg_usingPage) + "'");
            }
            pzAuto.emitIncludeStreamReference(sectionName, null, inputType,
                    "Rule-HTML-Section", null);
            tools.putParamValue("section_base_ref", "");
            tools.putParamValue("RenderSingle", tempRenderSingle);
        }
        if (pg_usingPage != null) {
            String lazyInfoAfter = tools.getParamValue("lazyLoadInfo");
            pega.popStackFrame(pz_StackFrame1, false);
            tools.putParamValue("lazyLoadInfo", lazyInfoBefore + lazyInfoAfter);
        }
        if (popReadOnly) {
            tools.getParameterPage().remove("SectionReadOnly");
        }
    }

    public int simpleLayoutCell_8(int index) {
        IUIComponent uiComp = null;
        String labelName = "";
        String ariahiddenString = "";
        String baseRef = "";
        generateClientWhenDiv_1();
        tools.appendString("' "
                + pzCell.getInspectorDataDynamic(
                        "SUB_SECTION",
                        "Login",
                        "RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(2).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1)")
                + " class='content-item content-sub_section item-"
                + Integer.toString(index)
                + " remove-top-spacing remove-left-spacing   flex flex-row '  STRING_TYPE='sub_section' RESERVE_SPACE='false'>");
        String tempRenderSingle = "";

        tempRenderSingle = tools.getParamValue("RenderSingle");
        tools.putParamValue("RenderSingle", "");
        sectionBodyIncludeInCell_1();
        tools.putParamValue("RenderSingle", tempRenderSingle);
        tools.appendString("</div>");
        index++;
        return index;
    }

    public int simpleLayoutTemplateCell_8(int index) {
        IUIComponent uiComp = null;
        String labelName = "";
        String expressionId = null;
        boolean isLabelJSP = false;
        String reqExpressionId = null;
        String disExpressionId = null;
        com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
        if (expression != null) {
            expressionId = expression.getId();
        }
        String pyCustomRequireFormat = "";
        pyCustomRequireFormat = tools.getLocalizedTextForString("pyCaption",
                "pyRequired");
        String baseRef = "";
        boolean pyDLCellVisibility = false;
        IUIComponent cc_dlCell = pzAuto.getUIComponent();
        IUIComponentMetadata pg_dlCellMeta = pzAuto.getUIComponentRuntime()
                .createMetadata();
        IUIComponentMetadata pgCells = pzAuto.getUIComponentRuntime()
                .createMetadata();
        pgCells.put("pyType", "sub_section");
        pgCells.put("partialClass",
                "remove-top-spacing remove-left-spacing flex flex-row");
        pgCells.put("spanClass", "iconRequired standard_iconRequired");
        pgCells.put("cstmreqfor", pyCustomRequireFormat);
        if (!StringUtils.isBlank(expressionId))
            pgCells.put("pyExpressionId", expressionId);
        if (!"".equals(baseRef))
            pgCells.put("pyBaseRef", String.valueOf(baseRef));
        pgCells.put("labelJSP", String.valueOf(isLabelJSP));
        pg_dlCellMeta.putMetadata("pyCell", pgCells);
        boolean isExpression = false;
        boolean isOffline = false;
        cc_dlCell.beginComponent("DynamicLayoutCell", pg_dlCellMeta);
        String inspectorData = pzCell
                .getInspectorDataDynamic(
                        "SUB_SECTION",
                        "Login",
                        "RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(2).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1)");
        if (!inspectorData.isEmpty()) {
            pgCells.put("liveUI", inspectorData);
        }
        String tempRenderSingle = "";
        tempRenderSingle = tools.getParamValue("RenderSingle");
        tools.putParamValue("RenderSingle", "");
        pzLayout_5();
        tools.putSaveValue("ContainerID", "");
        tools.putParamValue("RenderSingle", tempRenderSingle);
        labelName = "";
        if (!pega_uiengine_offlinesupport.pzIsForOfflineTemplate()) {
            pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                    .addLocalizedValue(labelName, "pyCaption");
        } else {
            StringUtils.crossScriptingFilter(tools.getLocalizedTextForString(
                    "pyCaption", labelName));
        }
        pgCells.put("pyLabelValue", labelName);
        cc_dlCell.endComponent();
        index++;
        return index;
    }

    public int simpleLayoutCell_9(int index) {
        IUIComponent uiComp = null;
        String labelName = "";
        String ariahiddenString = "";
        String baseRef = "";
        generateClientWhenDiv_2();
        tools.appendString("' "
                + pega.getUIEngine().getFVInspectorUtils()
                        .startCollectingFieldValueData()
                + pzCell.getInspectorDataDynamic(
                        "pxButton",
                        ".pyTemplateInputBox",
                        "RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(2).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(2)")
                + " class='content-item content-field item-"
                + Integer.toString(index)
                + " remove-bottom-spacing remove-right-spacing   "
                + pzSection.getCustomStyle(false, "", "dataValueRead",
                        "dataValueWrite")
                + " flex flex-row '  STRING_TYPE='field' RESERVE_SPACE='false'>");
        pzAuto.getUIComponentRuntime().insertComponentPlaceholderPage();
        tools.putSaveValue("parentLayouttype", "SIMPLELAYOUT");
        pxButton_1();
        tools.appendString(pega.getUIEngine().getFVInspectorUtils()
                .stopCollectingFieldValueData()
                + "</div>");
        index++;
        return index;
    }

    public int simpleLayoutTemplateCell_9(int index) {
        IUIComponent uiComp = null;
        String labelName = "";
        String expressionId = null;
        boolean isLabelJSP = false;
        String reqExpressionId = null;
        String disExpressionId = null;
        com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
        expressionId = pxUniqueStreamHash + "_43";
        expression = pzAuto
                .getUIComponentRuntime()
                .getExpressionEvaluator()
                .addExpression("showWhen", ".WeOfferYouWith = 'Registration'",
                        expressionId);
        if (expression != null) {
            expressionId = expression.getId();
        }
        String pyCustomRequireFormat = "";
        pyCustomRequireFormat = tools.getLocalizedTextForString("pyCaption",
                "pyRequired");
        String dataFieldValueMeta = pega.getUIEngine().getFVInspectorUtils()
                .startCollectingFieldValueData();
        String baseRef = "";
        boolean pyDLCellVisibility = false;
        IUIComponent cc_dlCell = pzAuto.getUIComponent();
        IUIComponentMetadata pg_dlCellMeta = pzAuto.getUIComponentRuntime()
                .createMetadata();
        IUIComponentMetadata pgCells = pzAuto.getUIComponentRuntime()
                .createMetadata();
        pgCells.put("partialClass",
                "remove-bottom-spacing remove-right-spacing flex flex-row");
        pgCells.put(
                "automationId",
                new StringBuilder(" ")
                        .append(pzCell
                                .getTestIdIfEnabled("202107090035400041713-Label"))
                        .append(" ").toString().replace("data-test-id=", "")
                        .trim());
        pgCells.put("format", "pxButton");
        pgCells.put("forLabel", ".pyTemplateInputBox");
        pgCells.put("pyAutoHTML", "true");
        pgCells.put("spanClass", "iconRequired standard_iconRequired");
        pgCells.put("cstmreqfor", pyCustomRequireFormat);
        if (!StringUtils.isBlank(expressionId))
            pgCells.put("pyExpressionId", expressionId);
        if (!"".equals(baseRef))
            pgCells.put("pyBaseRef", String.valueOf(baseRef));
        if (!"".equals(dataFieldValueMeta))
            pgCells.put("startFV", dataFieldValueMeta);
        pgCells.put("labelJSP", String.valueOf(isLabelJSP));
        pg_dlCellMeta.putMetadata("pyCell", pgCells);
        boolean isExpression = false;
        boolean isOffline = false;
        cc_dlCell.beginComponent("DynamicLayoutCell", pg_dlCellMeta);
        String inspectorData = pzCell
                .getInspectorDataDynamic(
                        "pxButton",
                        ".pyTemplateInputBox",
                        "RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(2).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(2)");
        if (!inspectorData.isEmpty()) {
            pgCells.put("liveUI", inspectorData);
        }
        pxButton_1();
        labelName = "Text Input";
        if (!pega_uiengine_offlinesupport.pzIsForOfflineTemplate()) {
            pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                    .addLocalizedValue(labelName, "pyCaption");
        } else {
            StringUtils.crossScriptingFilter(tools.getLocalizedTextForString(
                    "pyCaption", labelName));
        }
        pgCells.put("pyLabelValue", labelName);
        String uiFieldValueMeta = pega.getUIEngine().getFVInspectorUtils()
                .stopCollectingFieldValueData();
        if (!"".equals(uiFieldValueMeta)) {
            pgCells.put("stopFV", uiFieldValueMeta);
        }
        cc_dlCell.endComponent();
        index++;
        return index;
    }

    public void pzSetExpandParam_7() {
        pzSection.getLayout().setExpandParam("SubSectionLoginBBBBBBB", "",
                false);
    }

    public void simpleLayout_5() {
        char parentTemplatingStatus = pzAuto.getUIComponentRuntime()
                .getTemplatingUIStatus();
        char currentTemplatingStatus = 'Y';
        if (!tools.getParamValue("UITemplatingStatus").equals("N")) {
            currentTemplatingStatus = pzAuto.getUIComponentRuntime()
                    .setTemplatingUIStatus('Y');
        } else {
            currentTemplatingStatus = pzAuto.getUIComponentRuntime()
                    .setTemplatingUIStatus('N');
        }
        String spxUniqueStreamHash34 = "";
        if (currentTemplatingStatus != 'N') {
            spxUniqueStreamHash34 = getUIActionsMetaData_1();
            if (spxUniqueStreamHash34 != null
                    && !"".equals(spxUniqueStreamHash34)) {
                pzAuto.getUIComponentRuntime()
                        .getRuntimeContextTree()
                        .addActionString(spxUniqueStreamHash34,
                                pxUniqueStreamHash + "_34");
            }
        }
        String refreshAttributes = "";
        String strMethodName = "";
        IUIComponent cc_dl = null;
        boolean bIsIe = (pzAuto.getBrowserUtils().isIE());
        String bIsWrapperAdded = tools.getParamValue("bIsWrapperAdded");
        String bIsGridLayout = tools.getParamValue("bIsGridLayout");
        cc_dl = pzAuto.getUIComponent();
        IUIComponentMetadata pg_dlmeta = pzAuto.getUIComponentRuntime()
                .createMetadata();
        pg_dlmeta.put("automationId",
                " " + pzCell.getTestIdIfEnabled("202107090138360801251") + " ");
        String subscriptionID = null;
        if (currentTemplatingStatus != 'Y') {
            if (bIsIe && "true".equals(bIsGridLayout)
                    && !"true".equals(bIsWrapperAdded)) {
                tools.appendString("<div class='flex-grid-table-wrapper'><div class='flex-grid-tablecell-wrapper'>");
                tools.putParamValue("bIsWrapperAdded", "true");
            }
            tools.appendString("<div bSimpleLayout='true' ");
            if (((PegaAPI) tools).getUIEngine().getPushServiceUtils()
                    .isPushEnabled()
                    && subscriptionID != null) {
                tools.appendString(" data-subscription-id='" + subscriptionID
                        + "' ");
            }
            tools.appendString(""
                    + pzAuto.getDataUIMetaAttribute("{'type':'Layout','subType':'DYNAMICLAYOUT','pgRef':'RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(2).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1).pySections(1)'}")
                    + " class='"
                    + "flex  content  layout-content-default content-default "
                    + "'  ");
            if (!tools.getParamValue("pyPegaDesignMode").equals("true")) {
                tools.appendString(" ");
            }
            tools.appendString(" " + refreshAttributes + ">");
        } else {
            String expressionId = null;
            com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
            if (!tools.getParamValue("pyPegaDesignMode").equals("true")
                    && spxUniqueStreamHash34 != null
                    && !"".equals(spxUniqueStreamHash34)) {
                pg_dlmeta.put("pyActionStringID", pxUniqueStreamHash + "_34");
            }
            if (!StringUtils.isBlank(expressionId)) {
                pg_dlmeta.put("pyExpressionId", expressionId);
            }
            if (!"".equals(strMethodName))
                pg_dlmeta.put("methodnm", strMethodName);
            pg_dlmeta.put("format", "default");
            String inspectorData = new StringBuilder("\"")
                    .append(""
                            + pzAuto.getDataUIMetaAttribute("{'type':'Layout','subType':'DYNAMICLAYOUT','pgRef':'RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(2).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1).pySections(1)'}")
                            + "").append("\"").toString();
            if (!inspectorData.equals("\"\"")) {
                pg_dlmeta.put("liveUI", inspectorData);
            }
            pg_dlmeta.put("isDLChild", "true");
            pg_dlmeta.put("clear", "false");
            pzAuto.getUIComponentRuntime().insertComponentPlaceholderPage();
            cc_dl.beginComponent("DynamicLayout", pg_dlmeta);
        }
        int index = 1;
        if (currentTemplatingStatus != 'Y') {
            index = simpleLayoutCell_8(index);
        } else {
            index = simpleLayoutTemplateCell_8(index);
        }
        if (currentTemplatingStatus != 'Y') {
            index = simpleLayoutCell_9(index);
        } else {
            index = simpleLayoutTemplateCell_9(index);
        }
        if (currentTemplatingStatus != 'Y') {
            tools.appendString("</div>");
            if (bIsIe && "true".equals(bIsGridLayout)
                    && !"true".equals(bIsWrapperAdded)) {
                tools.appendString("</div></div>");
                tools.putParamValue("bIsWrapperAdded", "false");
            }
        } else {
            cc_dl.endComponent();
        }
        pzAuto.getUIComponentRuntime().resetTemplatingUIStatus(
                parentTemplatingStatus);
    }

    public void pzLayoutContainer_5() {
        IUIComponentMetadata metadataPage = pzAuto.getUIComponentRuntime()
                .createMetadata();
        String expressionId = null;
        com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
        expressionId = pxUniqueStreamHash + "_44";
        expression = pzAuto
                .getUIComponentRuntime()
                .getExpressionEvaluator()
                .addExpression("showWhen",
                        ".WeOfferYouWith = \'Registration\'", expressionId);
        expressionId = expression.getId();
        String expressionId_BV = null;
        com.pega.pegarules.priv.runtime.ui.IExpression expression_BV = null;
        if (!StringUtils.isBlank(expressionId)) {
            metadataPage.put("pyExpressionId", expressionId);
        }
        if (!StringUtils.isBlank(expressionId_BV)) {
            metadataPage.put("expressionId_BV", expressionId_BV);
        }
        String paramName = "EXPANDEDSubSectionLoginBBBBBBB";
        metadataPage.put("paramName", paramName);
        String inspectorLayoutData = pzAuto
                .getDataUIMetaAttribute("{'type':'Layout','subType':'DYNAMICLAYOUT','pgRef':'RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(2).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1).pySections(1)'}");
        if (!inspectorLayoutData.isEmpty()) {
            metadataPage.put("liveUI", inspectorLayoutData);
        }
        String pyPrefix = null;
        metadataPage.put("prefix", "-default_4");
        metadataPage.put("sectionIndex", "52");
        IUIComponent containerComponent = pzAuto.getUIComponent();
        metadataPage.put("dlChild", "true");
        metadataPage.put("lMode", "Flexbox");
        containerComponent.beginComponent("pxLayoutContainer", metadataPage);
        pzLayoutBody_5();
        containerComponent.endComponent();
    }

    public void pzLayout_6() {
        char currentTemplatingStatus = pzAuto.getUIComponentRuntime()
                .setTemplatingUIStatus('Y');
        if (currentTemplatingStatus == 'Y') {
            pzAuto.getUIComponentRuntime().insertComponentPlaceholderPage();
        }
        pzSetExpandParam_7();
        tools.putParamValue("RWClasses", "");
        if (!pzAuto.getUIComponentRuntime().isTemplatingUIEnabled()) {
            pzLayoutBodyWrapper_6();
        }
        if (pzAuto.getUIComponentRuntime().isTemplatingUIEnabled()) {
            tools.putParamValue("pyInlineStyleSec", "");
            pzLayoutContainer_5();
            tools.putParamValue("pyInlineStyleSec", "");
        }
    }

    public int simpleLayoutCell_10(int index) {
        IUIComponent uiComp = null;
        String labelName = "";
        String ariahiddenString = "";
        String baseRef = "";
        generateClientWhenDiv_2();
        tools.appendString("'  class='content-item content-layout item-"
                + Integer.toString(index)
                + " remove-top-spacing remove-left-spacing   flex flex-row '  STRING_TYPE='layout' RESERVE_SPACE='false'>");
        pzLayout_6();
        tools.putSaveValue("ContainerID", "");
        tools.appendString("</div>");
        index++;
        return index;
    }

    public int simpleLayoutTemplateCell_10(int index) {
        IUIComponent uiComp = null;
        String labelName = "";
        String expressionId = null;
        boolean isLabelJSP = false;
        String reqExpressionId = null;
        String disExpressionId = null;
        com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
        expressionId = pxUniqueStreamHash + "_47";
        expression = pzAuto
                .getUIComponentRuntime()
                .getExpressionEvaluator()
                .addExpression("showWhen", ".WeOfferYouWith = 'Registration'",
                        expressionId);
        if (expression != null) {
            expressionId = expression.getId();
        }
        String pyCustomRequireFormat = "";
        pyCustomRequireFormat = tools.getLocalizedTextForString("pyCaption",
                "pyRequired");
        String baseRef = "";
        boolean pyDLCellVisibility = false;
        IUIComponent cc_dlCell = pzAuto.getUIComponent();
        IUIComponentMetadata pg_dlCellMeta = pzAuto.getUIComponentRuntime()
                .createMetadata();
        IUIComponentMetadata pgCells = pzAuto.getUIComponentRuntime()
                .createMetadata();
        pgCells.put("pyType", "layout");
        pgCells.put("RWActive", "false");
        pgCells.put("partialClass",
                "remove-top-spacing remove-left-spacing flex flex-row");
        pgCells.put("spanClass", "iconRequired standard_iconRequired");
        pgCells.put("cstmreqfor", pyCustomRequireFormat);
        if (!StringUtils.isBlank(expressionId))
            pgCells.put("pyExpressionId", expressionId);
        if (!"".equals(baseRef))
            pgCells.put("pyBaseRef", String.valueOf(baseRef));
        pgCells.put("labelJSP", String.valueOf(isLabelJSP));
        pg_dlCellMeta.putMetadata("pyCell", pgCells);
        boolean isExpression = false;
        boolean isOffline = false;
        cc_dlCell.beginComponent("DynamicLayoutCell", pg_dlCellMeta);
        pzLayout_6();
        tools.putSaveValue("ContainerID", "");
        labelName = "";
        if (!pega_uiengine_offlinesupport.pzIsForOfflineTemplate()) {
            pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                    .addLocalizedValue(labelName, "pyCaption");
        } else {
            StringUtils.crossScriptingFilter(tools.getLocalizedTextForString(
                    "pyCaption", labelName));
        }
        pgCells.put("pyLabelValue", labelName);
        cc_dlCell.endComponent();
        index++;
        return index;
    }

    public int simpleLayoutCell_12(int index) {
        IUIComponent uiComp = null;
        String labelName = "";
        String ariahiddenString = "";
        String baseRef = "";
        generateClientWhenDiv_2();
        tools.appendString("'  class='content-item content-layout item-"
                + Integer.toString(index)
                + " remove-bottom-spacing remove-right-spacing   flex flex-row '  STRING_TYPE='layout' RESERVE_SPACE='false'>");
        pzLayout_7();
        tools.putSaveValue("ContainerID", "");
        tools.appendString("</div>");
        index++;
        return index;
    }

    public int simpleLayoutTemplateCell_12(int index) {
        IUIComponent uiComp = null;
        String labelName = "";
        String expressionId = null;
        boolean isLabelJSP = false;
        String reqExpressionId = null;
        String disExpressionId = null;
        com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
        expressionId = pxUniqueStreamHash + "_57";
        expression = pzAuto
                .getUIComponentRuntime()
                .getExpressionEvaluator()
                .addExpression("showWhen", ".WeOfferYouWith = 'Registration'",
                        expressionId);
        if (expression != null) {
            expressionId = expression.getId();
        }
        String pyCustomRequireFormat = "";
        pyCustomRequireFormat = tools.getLocalizedTextForString("pyCaption",
                "pyRequired");
        String baseRef = "";
        boolean pyDLCellVisibility = false;
        IUIComponent cc_dlCell = pzAuto.getUIComponent();
        IUIComponentMetadata pg_dlCellMeta = pzAuto.getUIComponentRuntime()
                .createMetadata();
        IUIComponentMetadata pgCells = pzAuto.getUIComponentRuntime()
                .createMetadata();
        pgCells.put("pyType", "layout");
        pgCells.put("RWActive", "false");
        pgCells.put("partialClass",
                "remove-bottom-spacing remove-right-spacing flex flex-row");
        pgCells.put("spanClass", "iconRequired standard_iconRequired");
        pgCells.put("cstmreqfor", pyCustomRequireFormat);
        if (!StringUtils.isBlank(expressionId))
            pgCells.put("pyExpressionId", expressionId);
        if (!"".equals(baseRef))
            pgCells.put("pyBaseRef", String.valueOf(baseRef));
        pgCells.put("labelJSP", String.valueOf(isLabelJSP));
        pg_dlCellMeta.putMetadata("pyCell", pgCells);
        boolean isExpression = false;
        boolean isOffline = false;
        cc_dlCell.beginComponent("DynamicLayoutCell", pg_dlCellMeta);
        pzLayout_7();
        tools.putSaveValue("ContainerID", "");
        labelName = "";
        if (!pega_uiengine_offlinesupport.pzIsForOfflineTemplate()) {
            pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                    .addLocalizedValue(labelName, "pyCaption");
        } else {
            StringUtils.crossScriptingFilter(tools.getLocalizedTextForString(
                    "pyCaption", labelName));
        }
        pgCells.put("pyLabelValue", labelName);
        cc_dlCell.endComponent();
        index++;
        return index;
    }

    public void pzSetExpandParam_6() {
        pzSection.getLayout()
                .setExpandParam("SubSectionLoginBBBBBB", "", false);
    }

    public void simpleLayout_7() {
        char parentTemplatingStatus = pzAuto.getUIComponentRuntime()
                .getTemplatingUIStatus();
        char currentTemplatingStatus = 'Y';
        if (!tools.getParamValue("UITemplatingStatus").equals("N")) {
            currentTemplatingStatus = pzAuto.getUIComponentRuntime()
                    .setTemplatingUIStatus('Y');
        } else {
            currentTemplatingStatus = pzAuto.getUIComponentRuntime()
                    .setTemplatingUIStatus('N');
        }
        String spxUniqueStreamHash33 = "";
        if (currentTemplatingStatus != 'N') {
            spxUniqueStreamHash33 = getUIActionsMetaData_1();
            if (spxUniqueStreamHash33 != null
                    && !"".equals(spxUniqueStreamHash33)) {
                pzAuto.getUIComponentRuntime()
                        .getRuntimeContextTree()
                        .addActionString(spxUniqueStreamHash33,
                                pxUniqueStreamHash + "_33");
            }
        }
        String refreshAttributes = "";
        String strMethodName = "";
        IUIComponent cc_dl = null;
        boolean bIsIe = (pzAuto.getBrowserUtils().isIE());
        String bIsWrapperAdded = tools.getParamValue("bIsWrapperAdded");
        String bIsGridLayout = tools.getParamValue("bIsGridLayout");
        cc_dl = pzAuto.getUIComponent();
        IUIComponentMetadata pg_dlmeta = pzAuto.getUIComponentRuntime()
                .createMetadata();
        pg_dlmeta.put("automationId",
                " " + pzCell.getTestIdIfEnabled("202205240651350220445") + " ");
        String subscriptionID = null;
        if (currentTemplatingStatus != 'Y') {
            if (bIsIe && "true".equals(bIsGridLayout)
                    && !"true".equals(bIsWrapperAdded)) {
                tools.appendString("<div class='flex-grid-table-wrapper'><div class='flex-grid-tablecell-wrapper'>");
                tools.putParamValue("bIsWrapperAdded", "true");
            }
            tools.appendString("<div bSimpleLayout='true' ");
            if (((PegaAPI) tools).getUIEngine().getPushServiceUtils()
                    .isPushEnabled()
                    && subscriptionID != null) {
                tools.appendString(" data-subscription-id='" + subscriptionID
                        + "' ");
            }
            tools.appendString(""
                    + pzAuto.getDataUIMetaAttribute("{'type':'Layout','subType':'DYNAMICLAYOUT','pgRef':'RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(2).pySections(1)'}")
                    + " class='"
                    + "flex  content  layout-content-inline_grid_double content-inline_grid_double "
                    + "'  ");
            if (!tools.getParamValue("pyPegaDesignMode").equals("true")) {
                tools.appendString(" ");
            }
            tools.appendString(" " + refreshAttributes + ">");
        } else {
            String expressionId = null;
            com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
            if (!tools.getParamValue("pyPegaDesignMode").equals("true")
                    && spxUniqueStreamHash33 != null
                    && !"".equals(spxUniqueStreamHash33)) {
                pg_dlmeta.put("pyActionStringID", pxUniqueStreamHash + "_33");
            }
            if (!StringUtils.isBlank(expressionId)) {
                pg_dlmeta.put("pyExpressionId", expressionId);
            }
            if (!"".equals(strMethodName))
                pg_dlmeta.put("methodnm", strMethodName);
            pg_dlmeta.put("format", "inline_grid_double");
            String inspectorData = new StringBuilder("\"")
                    .append(""
                            + pzAuto.getDataUIMetaAttribute("{'type':'Layout','subType':'DYNAMICLAYOUT','pgRef':'RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(2).pySections(1)'}")
                            + "").append("\"").toString();
            if (!inspectorData.equals("\"\"")) {
                pg_dlmeta.put("liveUI", inspectorData);
            }
            pg_dlmeta.put("isDLChild", "true");
            pg_dlmeta.put("clear", "false");
            pzAuto.getUIComponentRuntime().insertComponentPlaceholderPage();
            cc_dl.beginComponent("DynamicLayout", pg_dlmeta);
        }
        int index = 1;
        if (currentTemplatingStatus != 'Y') {
            index = simpleLayoutCell_10(index);
        } else {
            index = simpleLayoutTemplateCell_10(index);
        }
        if (currentTemplatingStatus != 'Y') {
            index = simpleLayoutCell_12(index);
        } else {
            index = simpleLayoutTemplateCell_12(index);
        }
        if (currentTemplatingStatus != 'Y') {
            tools.appendString("</div>");
            if (bIsIe && "true".equals(bIsGridLayout)
                    && !"true".equals(bIsWrapperAdded)) {
                tools.appendString("</div></div>");
                tools.putParamValue("bIsWrapperAdded", "false");
            }
        } else {
            cc_dl.endComponent();
        }
        pzAuto.getUIComponentRuntime().resetTemplatingUIStatus(
                parentTemplatingStatus);
    }

    public void pzLayoutContainer_7() {
        IUIComponentMetadata metadataPage = pzAuto.getUIComponentRuntime()
                .createMetadata();
        String expressionId = null;
        com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
        expressionId = pxUniqueStreamHash + "_58";
        expression = pzAuto
                .getUIComponentRuntime()
                .getExpressionEvaluator()
                .addExpression("showWhen",
                        ".WeOfferYouWith = \'Registration\'", expressionId);
        expressionId = expression.getId();
        String expressionId_BV = null;
        com.pega.pegarules.priv.runtime.ui.IExpression expression_BV = null;
        if (!StringUtils.isBlank(expressionId)) {
            metadataPage.put("pyExpressionId", expressionId);
        }
        if (!StringUtils.isBlank(expressionId_BV)) {
            metadataPage.put("expressionId_BV", expressionId_BV);
        }
        String paramName = "EXPANDEDSubSectionLoginBBBBBB";
        metadataPage.put("paramName", paramName);
        String inspectorLayoutData = pzAuto
                .getDataUIMetaAttribute("{'type':'Layout','subType':'DYNAMICLAYOUT','pgRef':'RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(2).pySections(1)'}");
        if (!inspectorLayoutData.isEmpty()) {
            metadataPage.put("liveUI", inspectorLayoutData);
        }
        String pyPrefix = null;
        metadataPage.put("prefix", "-default_3");
        metadataPage.put("sectionIndex", "50");
        IUIComponent containerComponent = pzAuto.getUIComponent();
        metadataPage.put("dlChild", "true");
        metadataPage.put("lMode", "Flexbox");
        containerComponent.beginComponent("pxLayoutContainer", metadataPage);
        pzLayoutBody_7();
        containerComponent.endComponent();
    }

    public void pzLayout_8() {
        char currentTemplatingStatus = pzAuto.getUIComponentRuntime()
                .setTemplatingUIStatus('Y');
        if (currentTemplatingStatus == 'Y') {
            pzAuto.getUIComponentRuntime().insertComponentPlaceholderPage();
        }
        pzSetExpandParam_6();
        tools.putParamValue("RWClasses", "");
        if (!pzAuto.getUIComponentRuntime().isTemplatingUIEnabled()) {
            pzLayoutBodyWrapper_8();
        }
        if (pzAuto.getUIComponentRuntime().isTemplatingUIEnabled()) {
            tools.putParamValue("pyInlineStyleSec", "");
            pzLayoutContainer_7();
            tools.putParamValue("pyInlineStyleSec", "");
        }
    }

    public void generateClientWhenDiv_2() {
        String clientWhenAttr = "";
        char currentTemplatingStatus = 'Y';
        currentTemplatingStatus = pzAuto.getUIComponentRuntime()
                .getTemplatingUIStatus();
        if (currentTemplatingStatus == 'N')
            tools.appendString("<div ");
        if (currentTemplatingStatus == 'N')
            tools.appendString("id=\"CT\"");
        if (tools.getThread().getName().indexOf("/$WorkProcessing") != -1
                || tools.getThread().getName().indexOf("/$FlowModalProcess") != -1) {
            if (currentTemplatingStatus == 'N') {
                tools.appendString(" thread_name = \""
                        + tools.getThread().getName() + "\"");
            } else {
                String threadName = tools.getThread().getName();
                clientWhenAttr += "thread_name= \"" + threadName + "\" ";
            }
        }
        if (currentTemplatingStatus == 'N')
            tools.appendString(" SWP=\".WeOfferYouWith\"  SHOW_WHEN=\".WeOfferYouWith = 'Registration'\"");
        if (pzAuto.evaluateWhen(".WeOfferYouWith = 'Registration'", null, true)) {
            if (currentTemplatingStatus == 'N')
                tools.appendString(" style=' ");
            else
                clientWhenAttr += "style= '";
        } else {
            if (currentTemplatingStatus == 'N')
                tools.appendString(" style='display:none; ");
            else
                clientWhenAttr += "style='display:none;  ";
        }
        if (currentTemplatingStatus == 'Y')
            clientWhenAttr += "'";
        if (currentTemplatingStatus == 'Y')
            tools.putParamValue("clientWhenAttr", clientWhenAttr);
        try {
            if (tools.getParamValue("AJAXTrackID") != null
                    && !tools.getParamValue("AJAXTrackID").equals("")) {
                com.pega.pegarules.priv.runtime.IStreamChangeTracker changeTracker = pzAuto
                        .getChangeTracker(tools.getParamValue("AJAXTrackID"));
                changeTracker.trackValueChanges(tools.getStepPage()
                        .getReference() + ".WeOfferYouWith", -1);
            }
        } catch (Exception e) {
        }
    }

    public void pzLayoutBody_4() {
        tools.putParamValue("LAYOUT_METHOD_NAME", "simpleLayout_4");
        simpleLayout_4();
    }

    public void pzLayoutBodyWrapper_4() {
        tools.appendString("<div class='layout layout-none'>");
        String clsScroll = "";
        tools.appendString("<div section_index='1' class='" + clsScroll
                + " layout-body'>");
        tools.putParamValue("LAYOUT_METHOD_NAME", "simpleLayout_4");
        simpleLayout_4();
        tools.appendString("</div></div>");
        tools.putSaveValue("rowClass", "");
    }

    public void pzLayoutBody_3() {
        tools.putParamValue("LAYOUT_METHOD_NAME", "simpleLayout_3");
        simpleLayout_3();
    }

    public void pzLayoutBodyWrapper_3() {
        tools.appendString("<div class='layout layout-none'>");
        String clsScroll = "";
        tools.appendString("<div section_index='1' class='" + clsScroll
                + " layout-body'>");
        tools.putParamValue("LAYOUT_METHOD_NAME", "simpleLayout_3");
        simpleLayout_3();
        tools.appendString("</div></div>");
        tools.putSaveValue("rowClass", "");
    }

    public void pzSetExpandParam_5() {
        pzSection.getLayout().setExpandParam("SubSectionLoginBBBBB", "", false);
    }

    public void simpleLayout_3() {
        char parentTemplatingStatus = pzAuto.getUIComponentRuntime()
                .getTemplatingUIStatus();
        char currentTemplatingStatus = 'Y';
        if (!tools.getParamValue("UITemplatingStatus").equals("N")) {
            currentTemplatingStatus = pzAuto.getUIComponentRuntime()
                    .setTemplatingUIStatus('Y');
        } else {
            currentTemplatingStatus = pzAuto.getUIComponentRuntime()
                    .setTemplatingUIStatus('N');
        }
        String spxUniqueStreamHash28 = "";
        if (currentTemplatingStatus != 'N') {
            spxUniqueStreamHash28 = getUIActionsMetaData_1();
            if (spxUniqueStreamHash28 != null
                    && !"".equals(spxUniqueStreamHash28)) {
                pzAuto.getUIComponentRuntime()
                        .getRuntimeContextTree()
                        .addActionString(spxUniqueStreamHash28,
                                pxUniqueStreamHash + "_28");
            }
        }
        String refreshAttributes = "";
        String strMethodName = "";
        IUIComponent cc_dl = null;
        boolean bIsIe = (pzAuto.getBrowserUtils().isIE());
        String bIsWrapperAdded = tools.getParamValue("bIsWrapperAdded");
        String bIsGridLayout = tools.getParamValue("bIsGridLayout");
        cc_dl = pzAuto.getUIComponent();
        IUIComponentMetadata pg_dlmeta = pzAuto.getUIComponentRuntime()
                .createMetadata();
        pg_dlmeta.put("automationId",
                " " + pzCell.getTestIdIfEnabled("202107090136160396790") + " ");
        String subscriptionID = null;
        if (currentTemplatingStatus != 'Y') {
            if (bIsIe && "true".equals(bIsGridLayout)
                    && !"true".equals(bIsWrapperAdded)) {
                tools.appendString("<div class='flex-grid-table-wrapper'><div class='flex-grid-tablecell-wrapper'>");
                tools.putParamValue("bIsWrapperAdded", "true");
            }
            tools.appendString("<div bSimpleLayout='true' ");
            if (((PegaAPI) tools).getUIEngine().getPushServiceUtils()
                    .isPushEnabled()
                    && subscriptionID != null) {
                tools.appendString(" data-subscription-id='" + subscriptionID
                        + "' ");
            }
            tools.appendString(""
                    + pzAuto.getDataUIMetaAttribute("{'type':'Layout','subType':'DYNAMICLAYOUT','pgRef':'RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(3).pySections(1)'}")
                    + " class='" + "flex  content  layout-content-default "
                    + "'  ");
            if (!tools.getParamValue("pyPegaDesignMode").equals("true")) {
                tools.appendString(" ");
            }
            tools.appendString(" " + refreshAttributes + ">");
        } else {
            String expressionId = null;
            com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
            if (!tools.getParamValue("pyPegaDesignMode").equals("true")
                    && spxUniqueStreamHash28 != null
                    && !"".equals(spxUniqueStreamHash28)) {
                pg_dlmeta.put("pyActionStringID", pxUniqueStreamHash + "_28");
            }
            if (!StringUtils.isBlank(expressionId)) {
                pg_dlmeta.put("pyExpressionId", expressionId);
            }
            if (!"".equals(strMethodName))
                pg_dlmeta.put("methodnm", strMethodName);
            pg_dlmeta.put("format", "default");
            String inspectorData = new StringBuilder("\"")
                    .append(""
                            + pzAuto.getDataUIMetaAttribute("{'type':'Layout','subType':'DYNAMICLAYOUT','pgRef':'RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(3).pySections(1)'}")
                            + "").append("\"").toString();
            if (!inspectorData.equals("\"\"")) {
                pg_dlmeta.put("liveUI", inspectorData);
            }
            pg_dlmeta.put("isDLChild", "true");
            pg_dlmeta.put("clear", "false");
            pg_dlmeta.put("lMode", "SimpleDiv");
            pzAuto.getUIComponentRuntime().insertComponentPlaceholderPage();
            cc_dl.beginComponent("DynamicLayout", pg_dlmeta);
        }
        int index = 1;
        if (currentTemplatingStatus != 'Y') {
            tools.appendString("</div>");
            if (bIsIe && "true".equals(bIsGridLayout)
                    && !"true".equals(bIsWrapperAdded)) {
                tools.appendString("</div></div>");
                tools.putParamValue("bIsWrapperAdded", "false");
            }
        } else {
            cc_dl.endComponent();
        }
        pzAuto.getUIComponentRuntime().resetTemplatingUIStatus(
                parentTemplatingStatus);
    }

    public void pzLayoutContainer_3() {
        IUIComponentMetadata metadataPage = pzAuto.getUIComponentRuntime()
                .createMetadata();
        String expressionId = null;
        com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
        String expressionId_BV = null;
        com.pega.pegarules.priv.runtime.ui.IExpression expression_BV = null;
        if (!StringUtils.isBlank(expressionId_BV)) {
            metadataPage.put("expressionId_BV", expressionId_BV);
        }
        String paramName = "EXPANDEDSubSectionLoginBBBBB";
        String inspectorLayoutData = pzAuto
                .getDataUIMetaAttribute("{'type':'Layout','subType':'DYNAMICLAYOUT','pgRef':'RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(3).pySections(1)'}");
        if (!inspectorLayoutData.isEmpty()) {
            metadataPage.put("liveUI", inspectorLayoutData);
        }
        String pyPrefix = null;
        IUIComponent containerComponent = pzAuto.getUIComponent();
        metadataPage.put("dlChild", "true");
        metadataPage.put("lMode", "SimpleDiv");
        containerComponent.beginComponent("pxLayoutContainer", metadataPage);
        pzLayoutBody_3();
        containerComponent.endComponent();
    }

    public void pzLayout_3() {
        char currentTemplatingStatus = pzAuto.getUIComponentRuntime()
                .setTemplatingUIStatus('Y');
        if (currentTemplatingStatus == 'Y') {
            pzAuto.getUIComponentRuntime().insertComponentPlaceholderPage();
        }
        pzSetExpandParam_5();
        tools.putParamValue("RWClasses", "");
        if (!pzAuto.getUIComponentRuntime().isTemplatingUIEnabled()) {
            pzLayoutBodyWrapper_3();
        }
        if (pzAuto.getUIComponentRuntime().isTemplatingUIEnabled()) {
            tools.putParamValue("pyInlineStyleSec", "");
            pzLayoutContainer_3();
            tools.putParamValue("pyInlineStyleSec", "");
        }
    }

    public void pzLayoutHeader_1() {
        pzAuto.getUIComponentRuntime().insertComponentPlaceholderPage();
        IUIComponentMetadata metadataPage = pzAuto.getUIComponentRuntime()
                .createMetadata();
        IUIComponent headerComponent = pzAuto.getUIComponent();
        metadataPage.put("headerType", "COLLAPSIBLE");
        metadataPage.put("hIconSrcType", "standard");
        metadataPage.put("inputhiddenparam",
                tools.getParamValueCSF("EXPANDEDSubSectionLoginBBBB"));
        if ("".equals(tools.getParamValue("EXPANDEDSubSectionLoginBBBB"))) {
            metadataPage.put("expanded", true);
        } else {
            metadataPage.put("expanded", Boolean.parseBoolean(tools
                    .getParamValue("EXPANDEDSubSectionLoginBBBB")));
        }
        String sectionTitleFVMeta = pega.getUIEngine().getFVInspectorUtils()
                .startCollectingFieldValueData();
        if (!"".equals(sectionTitleFVMeta)) {
            metadataPage.put("fieldValueMeta", sectionTitleFVMeta);
        }
        pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                .addLocalizedValue("", "pyCaption");
        pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                .addLocalizedValue("Click to expand", "pyActionPrompt");
        pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                .addLocalizedValue("Click to collapse", "pyActionPrompt");
        String inspectorFVData = pega.getUIEngine().getFVInspectorUtils()
                .stopCollectingFieldValueData();
        if (!"".equals(inspectorFVData)) {
            metadataPage.put("fieldValueInspectorData", inspectorFVData);
        }
        metadataPage.put("uniqueid", "202205290956300046");
        metadataPage.put("automationId",
                " " + pzCell.getTestIdIfEnabled("202107090136160395898") + " ");
        headerComponent.beginComponent("pxLayoutHeader", metadataPage);
        headerComponent.endComponent();
    }

    public void pzLayoutBody_2() {
        tools.putParamValue("LAYOUT_METHOD_NAME", "simpleLayout_2");
        simpleLayout_2();
    }

    public void pzLayoutBodyWrapper_2() {
        boolean bExpandRL = tools.getParamAsBoolean(
                ImmutablePropertyInfo.TYPE_TRUEFALSE, "expandRL");
        String param_Index = tools.getParamValue("index");
        String expandedSecId = "";
        String expandRLExprValue = (bExpandRL ? param_Index : "");
        expandedSecId = "EXPANDEDSubSectionLoginBBBB" + expandRLExprValue;
        tools.putSaveValue("expandParam", expandedSecId);
        if (pzSection.getLayout().loadLayoutHeader()) {
            tools.appendString("<div section_index='1' id='EXPAND-INNERDIV' class='layout-body'  >");
        } else {
            tools.appendString("<div section_index='1' id='EXPAND-INNERDIV' class='layout-body'  style='display:none'  >");
            if (false && (pega_uiengine_offlinesupport.pzIsForOfflineTemplate() || "true"
                    .equals(tools.getParamValue("pyPegaDesignMode")))) {
                tools.putParamValue("LAYOUT_METHOD_NAME", "simpleLayout_2");
                simpleLayout_2();
            }
        }
        String expandParam = tools.getSaveValue("expandParam");
        String expandparamalue = tools.getParamValueCSF(expandParam);
        tools.putParamValue("LAYOUT_METHOD_NAME", "simpleLayout_2");
        simpleLayout_2();
        tools.appendString("<input id='EXPAND-INDICATOR' type='hidden' name='"
                + StringUtils.crossScriptingFilter(expandParam) + "' value='"
                + expandparamalue + "' />");

        tools.appendString("</div>");
        tools.putSaveValue("rowClass", "");
    }

    public void inclFormattedVal_2(boolean isSecuredProp,
            String activePropValue, boolean isDisplayTextWithParam,
            String displayTextParamName) {
        if (isSecuredProp) {
            tools.putParamValue("proSecurity_isSecuredProp", isSecuredProp);
            tools.putParamValue("proSecurity_activePropValue", activePropValue);
        }
        pega.checkIfActivePropertyMissing();
        tools.appendString(pega_uiengine_formatter.pxFormatText(
                pega_uiengine_pzcontrol.pzGetCaptionValue("associated", "null",
                        "null", "", "", "", "null", "null", true,
                        (PegaStreamAPI) tools), pzAuto.handleEvaluateWhen(
                        "�cffalse", "false", "cell", "disable"), "", "", true,
                "caption"));
        if ("".equals(pega_uiengine_pzcontrol.pzGetCaptionValue("associated",
                "null", "null", "", "", "", "null", "null", true,
                (PegaStreamAPI) tools))
                && !"true".equals(tools.getParamValue("FORMAT_PLAIN_TXT"))
                && ((pzAuto.getBrowserUtils().isIE() && !pega_uiengine_harness
                        .pzInStandardsMode()) || "true".equals(tools
                        .getParamValue("fromAPI")))) {
            tools.appendString("&nbsp;");
        }
        if (isSecuredProp) {
            tools.putParamValue("proSecurity_isSecuredProp", "");
            tools.putParamValue("proSecurity_activePropValue", "");
        }
    }

    public void radioGroupIncludes_1() {
        if (pzAuto.doOnlyOnce("pzRadiogroupIncludes")) {
            pzAuto.emitIncludeStreamReference("pzRadiogroupIncludes", null,
                    !tools.hasInputEnabled() ? "NoInput" : "NoInput",
                    "Rule-HTML-Fragment", null);
        }
    }

    public void inclFormattedVal_1(boolean isSecuredProp,
            String activePropValue, boolean isDisplayTextWithParam,
            String displayTextParamName) {
        pega.checkIfActivePropertyMissing();
        tools.appendString(pega_uiengine_formatter.pxFormatText(
                (isSecuredProp ? activePropValue : pega_uiengine_pzcontrol
                        .pzGetCaptionValue("", "", "", "", "", "", "", "",
                                true, (PegaStreamAPI) tools)), pzAuto
                        .handleEvaluateWhen("�cffalse", "false", "cell",
                                "disable"), "", "", true, "caption"));
        if ("".equals((isSecuredProp ? activePropValue
                : pega_uiengine_pzcontrol.pzGetCaptionValue("", "", "", "", "",
                        "", "", "", true, (PegaStreamAPI) tools)))
                && !"true".equals(tools.getParamValue("FORMAT_PLAIN_TXT"))
                && ((pzAuto.getBrowserUtils().isIE() && !pega_uiengine_harness
                        .pzInStandardsMode()) || "true".equals(tools
                        .getParamValue("fromAPI")))) {
            tools.appendString("&nbsp;");
        }
    }

    public void inclCalVal_1(String controlName, String controlFormat,
            String styleClass) {
        tools.appendString("<P id=\"CV\" name=\"");
        tools.appendString(tools.getActive().getEntryHandle());
        tools.appendString("\" ");
        tools.appendString("RHP_NAME=\"");
        tools.appendString(controlName);
        tools.appendString(" \" ");
        tools.appendString(" data-ctl data-ctlformat=\"");
        tools.appendString(controlFormat);
        tools.appendString("\" ");
        tools.appendString(" class='");
        tools.appendString(styleClass);
        tools.appendString("' ");
        if (tools.getParamValue("AJAXTrackID") != null) {
            com.pega.pegarules.priv.runtime.IStreamChangeTracker changeTracker = pzAuto
                    .getChangeTracker(tools.getParamValue("AJAXTrackID"));
            changeTracker.trackValueChanges(tools.getActive(), -1);
        }
    }

    public void pxRadioButtons_1(String propName, int maxLength,
            String pyOnInput, String pyEditValidate, String pyStringType) {
        boolean isDisplayTextWithParam = false;
        String displayTextParamName = "";
        String displayTextParamValue = "";

        StringBuffer pegaValidation = null;
        boolean addedValidation = false;

        pegaValidation = com.pega.pegarules.priv.factory.StringBufferFactory
                .acquire(1024);
        try {

            boolean isEditable = pzAuto.getSection().getControl()
                    .isControlEditable(false, null);
            boolean isControlEditable = isEditable;
            if (pzAuto.getUIComponentRuntime().getTemplatingUIStatus() == 'Y') {
                isEditable = true;
            }
            ClipboardProperty propActivePrev = tools.getActive();
            String sEntryHandle = "";
            tools.putActive(tools.getStepPage().getProperty(propName));
            if (isEditable) {
                sEntryHandle = tools.getActive().getEntryHandle();
            } else {
                sEntryHandle = tools.getActive().getEntryHandle(true, false);
            }
            String activePropValue = null;
            String securedPropValue = null;
            boolean isSecuredProp = false;
            try {
                com.pega.pegarules.pub.security.PropertySecurityInfo propSecInfo = tools
                        .getAuthorizationHandle()
                        .getABACSecurityPolicyEngine()
                        .getPropertyInfoForDisplay(tools.getStepPage(),
                                tools.getActive(), tools);
                if (propSecInfo != null && propSecInfo.isObfuscated()) {
                    securedPropValue = propSecInfo.getPropValue();
                } else if ("ENCRYPTED".equalsIgnoreCase(propSecInfo
                        .getPropType().toString())) {
                    isSecuredProp = true;
                    activePropValue = propSecInfo.getPropValue();
                }
            } catch (Exception e) {
            }
            if (pzAuto.getSection().getControl().isExpTarget(sEntryHandle)) {
                if (pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                        .beginNonTemplate(pxUniqueStreamHash + "_16")) {
                    inclCalVal_1("pxRadioButtons", "T&&false&&*&&*&&true",
                            "leftJustifyStyle");
                    pzHeaderCellContent_1();
                    tools.appendString(">");
                    if (securedPropValue == null) {
                        inclFormattedVal_1(isSecuredProp, activePropValue,
                                isDisplayTextWithParam, displayTextParamName);
                    } else {
                        tools.appendString(securedPropValue);
                    }
                    tools.appendString("</P>");
                }
                pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                        .endNonTemplateComponent();
            } else if (securedPropValue != null
                    && pzAuto.getUIComponentRuntime().getTemplatingUIStatus() != 'Y') {
                if (pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                        .beginNonTemplate(pxUniqueStreamHash + "_17")) {
                    tools.appendString("<span>" + securedPropValue + "</span>");
                }
                pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                        .endNonTemplateComponent();
            } else {
                if (isEditable) {
                    tools.putParamValue("REQUIRED_WHEN", "");
                    tools.putParamValue("REQUIRED_WHEN_ROC", "");
                    String pyListSource = "associated";
                    if (pzAuto.getUIComponentRuntime().getTemplatingUIStatus() == 'Y') {
                        IUIComponentMetadata metadataPage = pzAuto
                                .getUIComponentRuntime().createMetadata();
                        IUIComponentMetadata cellPage = pzAuto
                                .getUIComponentRuntime().createMetadata();
                        IUIComponentMetadata modePage1 = pzAuto
                                .getUIComponentRuntime().createMetadata();
                        IUIComponentMetadata modePage2 = pzAuto
                                .getUIComponentRuntime().createMetadata();
                        java.util.List<String> ctPropRefs = new ArrayList<String>();
                        IUIComponent ctrlComponent = pzAuto.getUIComponent();
                        String expressionId = null;
                        com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
                        String repeatIndx = "";
                        IUIComponentMetadata pyUserData = pzAuto
                                .getUIComponentRuntime().createMetadata();
                        cellPage.put("automationId", pzCell.getTestIdIfEnabled(
                                "202107080828130274574", true));
                        cellPage.put("pyValue", ".WeOfferYouWith");
                        pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                                .addProperty(".WeOfferYouWith");
                        pzAuto.getUIComponentRuntime()
                                .getRuntimeContextTree()
                                .addLocalizedValue(".WeOfferYouWith",
                                        ".pyCaption");
                        cellPage.put("pyWrap", "false");
                        String pyLabelFor = "";
                        if (pega.getPackageRuntime().canPackage()) {
                            tools.getLocalizedTextForString(".pyCaption",
                                    "We Offer You With :\t" + repeatIndx,
                                    StreamBuilder.FMT_LITERAL);
                        } else {
                            pzAuto.getUIComponentRuntime()
                                    .getRuntimeContextTree()
                                    .addLocalizedValue("We Offer You With :",
                                            ".pyCaption");
                        }
                        pyLabelFor = "We Offer You With :";
                        cellPage.put("pyLabelFor", pyLabelFor);
                        String rbPropEntryHandle = tools.getActive()
                                .getEntryHandle();
                        rbPropEntryHandle = pzAuto.getUIComponentRuntime()
                                .getRepeatingReference(rbPropEntryHandle,
                                        "entryHandle", false);
                        String spxUniqueStreamHash18 = getUIActionsMetaData_1();
                        if (spxUniqueStreamHash18 != null
                                && !"".equals(spxUniqueStreamHash18)) {
                            pzAuto.getUIComponentRuntime()
                                    .getRuntimeContextTree()
                                    .addActionString(spxUniqueStreamHash18,
                                            pxUniqueStreamHash + "_18");
                            modePage1.put("pyActionStringID",
                                    pxUniqueStreamHash + "_18");
                        }
                        cellPage.put("pzPrimaryPage", tools.getPrimaryPage()
                                .getReference());
                        pzAuto.getUIComponentRuntime()
                                .getRuntimeContextTree()
                                .addErrors(".WeOfferYouWith",
                                        pxUniqueStreamHash + "_19");
                        IUIComponentMetadata pxErrorIdentifiers = pzAuto
                                .getUIComponentRuntime().createMetadata();
                        modePage1.putMetadata("pxErrorIdentifiers",
                                pxErrorIdentifiers);
                        pxErrorIdentifiers.put("pyErrorId", pxUniqueStreamHash
                                + "_19");
                        String clientValidationAttributes = pzAuto.getCell()
                                .getClientValidationAttributes(pyOnInput,
                                        pyEditValidate, pyStringType,
                                        pegaValidation.toString());
                        modePage1.put("clintValidAttrs",
                                clientValidationAttributes);
                        modePage1.put("pyID", "WeOfferYouWith");
                        modePage1.put("pyHasNoSelection", "false");
                        String pyHelperTextType = "";
                        if (pega.getPackageRuntime().canPackage()) {
                            tools.getLocalizedTextForString(
                                    ".pyHelperTextType", "none\t" + repeatIndx,
                                    StreamBuilder.FMT_LITERAL);
                        } else {
                            pzAuto.getUIComponentRuntime()
                                    .getRuntimeContextTree()
                                    .addLocalizedValue("none",
                                            ".pyHelperTextType");
                        }
                        pyHelperTextType = "none";
                        modePage1.put("helpertype", pyHelperTextType);
                        if (expressionId != null && expressionId.length() > 0) {
                            modePage1.put("pyExpressionId", expressionId);
                        }
                        modePage1.put("pyFormatRG", "Segmented Mine");
                        modePage1.put("pyFormatTextRG",
                                "rb_segmented_mine rb_standard radioLabel");
                        modePage1.put("pyOrientation", "horizontal");
                        modePage1.put("pyWrapBefore", "3");
                        IUIComponentMetadata pyListDataSource = pzAuto
                                .getUIComponentRuntime().createMetadata();
                        ClipboardProperty cbpResults = null;
                        String strClassName = "GOV-EPass-Work-EPassRegistration";
                        String strPropName = tools.getActive().getName();
                        cbpResults = pega_rulesengine_utilities
                                .pzGetValidValues(strClassName, strPropName,
                                        false, "PromptList", "", "", "", "",
                                        true);
                        pyListDataSource.put("pyListSource", pyListSource);
                        modePage1.put("pyValue", ".pyFieldValue");
                        modePage1.put("pyPrompt", ".pyLabel");
                        modePage1.putMetadata("pyListDataSource",
                                pyListDataSource);
                        StringBuilder results = new StringBuilder("");
                        int listSize = cbpResults.size();
                        if (cbpResults != null && listSize > 0) {
                            java.util.Iterator resIter = cbpResults.iterator();
                            results.append("[");
                            for (int i = 0; i < listSize; i++) {
                                ClipboardPage cbpRow = ((ClipboardProperty) resIter
                                        .next()).getPageValue();
                                String radioDisplay = cbpRow
                                        .getString(".pyLabel");
                                String radioValue = cbpRow
                                        .getString(".pyFieldValue");
                                results.append("{");
                                results.append("\"pyLabel\":"
                                        + "\""
                                        + StringUtils
                                                .escapeIntoJSONString(radioDisplay)
                                        + "\"");
                                results.append(",\"pyFieldValue\":"
                                        + "\""
                                        + StringUtils
                                                .escapeIntoJSONString(radioValue)
                                        + "\"");
                                results.append("}");
                                if (i != listSize - 1) {
                                    results.append(",");
                                }
                            }
                            results.append("]");
                        }
                        pyListDataSource.putString("results",
                                results.toString());
                        modePage1.put("pyListDataSource.results",
                                results.toString());
                        if (results.toString().equals("")) {
                            results = new StringBuilder(
                                    "{ \"pxResults\" : \"\"}");
                        } else {
                            results = new StringBuilder("{ \"pxResults\" : "
                                    + results + "}");
                        }
                        modePage1.put("pyTempText", results.toString());
                        pyListDataSource.put("pyListSource", pyListSource);
                        modePage1.putMetadata("pyListDataSource",
                                pyListDataSource);
                        cellPage.put("automationId", pzCell.getTestIdIfEnabled(
                                "202107080828130274574", true));
                        String pyValueR = "";
                        String pyValueOrig = "";
                        pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                                .addProperty(".WeOfferYouWith");
                        pzAuto.getUIComponentRuntime()
                                .getRuntimeContextTree()
                                .addLocalizedValue(".WeOfferYouWith",
                                        ".pyCaption");
                        pyValueR = ".WeOfferYouWith";
                        pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                                .addProperty(".WeOfferYouWith");
                        pzAuto.getUIComponentRuntime()
                                .getRuntimeContextTree()
                                .addLocalizedValue(".WeOfferYouWith",
                                        ".pyCaption");
                        pyValueOrig = ".WeOfferYouWith";
                        cellPage.put("pyValue", pyValueOrig);
                        cellPage.put("pyValueRO", pyValueR);
                        modePage2.put("pyContent", "caption");
                        modePage2.put("styleOther", "");
                        modePage2.put("pyFormatType", "text");
                        modePage2.put("pyReadonlyValidation", false);
                        String pyAutoPrepend = "";
                        String pyAutoAppend = "";
                        pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                                .addLocalizedValue("", ".pyCaption");
                        pyAutoAppend = "";
                        pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                                .addLocalizedValue("", ".pyCaption");
                        pyAutoPrepend = "";
                        modePage2.put("pyAutoPrepend", pyAutoPrepend);
                        modePage2.put("pyAutoAppend", pyAutoAppend);
                        String spxUniqueStreamHash20 = getUIActionsMetaData_1();
                        if (spxUniqueStreamHash20 != null
                                && !"".equals(spxUniqueStreamHash20)) {
                            pzAuto.getUIComponentRuntime()
                                    .getRuntimeContextTree()
                                    .addActionString(spxUniqueStreamHash20,
                                            pxUniqueStreamHash + "_20");
                            modePage2.put("pyActionStringID",
                                    pxUniqueStreamHash + "_20");
                        }
                        cellPage.addMetadataInArray("pyModes", modePage1);
                        cellPage.addMetadataInArray("pyModes", modePage2);
                        metadataPage.putMetadata("pyCell", cellPage);
                        ctrlComponent.addAdditionalScripts("pxDisplayText",
                                "pzpega_ui_formatNumber.js",
                                "pzpega_ui_markdown_it.js", "pzXss.js",
                                "pzpega_ui_advancedtext.js",
                                "pzpega_ui_template_displayText.js",
                                "pzpega_ui_calendar_util.js",
                                "pzpega_ui_calendar_dbp.js",
                                "pzpega_ui_calendar.js",
                                "pzpega_ui_formatDateTime.js",
                                "pzpega_moment_with_locales.js",
                                "pzPega_moment_timezone_with_data.js");
                        ctrlComponent.addDependentScripts(
                                "pzpega_control_radiogroup.js",
                                "pzpega_ui_template_radiogroup.js");
                        ctrlComponent.beginComponent("pxRadioButtons",
                                metadataPage);
                        ctrlComponent.setTrackedProperties(ctPropRefs
                                .toArray(new String[] {}));
                        ctrlComponent.endComponent();
                    } else {
                        radioGroupIncludes_1();
                        String disabled_ctrl = "";
                        String labelClassName = "rb_segmented_mine rb_standard radioLabel";
                        String inputClassName = "rb_segmented_mine";
                        int iNumItemsBeforeWrap = 3;
                        ClipboardPage cbpRes = null;
                        ClipboardProperty cbpResults = null;
                        HashStringMap params = new HashStringMap();
                        String strReferenceName = pega_uiengine_pzcontrol
                                .pzGetActiveName((PegaStreamAPI) tools, true);
                        String strPropName = tools.getActive().getName();
                        boolean bOptimizedMarkup = pzAuto
                                .getUIComponentRuntime().isTemplateRendering();
                        boolean beginNonTemplate = true;
                        if (bOptimizedMarkup) {
                            beginNonTemplate = pzAuto
                                    .getUIComponentRuntime()
                                    .getRuntimeContextTree()
                                    .beginNonTemplate(
                                            pxUniqueStreamHash + "_21");
                        }
                        if (beginNonTemplate) {
                            String strClassName = "GOV-EPass-Work-EPassRegistration";
                            cbpResults = pega_rulesengine_utilities
                                    .pzGetValidValues(strClassName,
                                            strPropName, false, "PromptList",
                                            "", "", "", "", true);
                            String strValue = isSecuredProp ? activePropValue
                                    : pega_uiengine_pzcontrol.pzGetActiveValue(
                                            (PegaStreamAPI) tools, true);
                            String errorClass = "";
                            if (tools.getActive() != null
                                    && (tools.getActive().getMessageCount() > 0 || tools
                                            .getActive().isBad())) {
                                errorClass += " ErrorShade";
                            }
                            if (cbpResults != null && cbpResults.size() > 0) {
                                int iX = 0;
                                int iY = 0;
                                int iListSize = cbpResults.size();
                                iX = iNumItemsBeforeWrap;
                                iY = iListSize
                                        / iNumItemsBeforeWrap
                                        + ((iListSize % iNumItemsBeforeWrap == 0) ? 0
                                                : 1);
                                String tdstyle = iX <= 12 ? "class=col-" + (iX)
                                        : "class=col-12";
                                String[][] strCells = new String[iX][iY];
                                java.util.Iterator resIter = cbpResults
                                        .iterator();
                                {
                                    com.pega.pegarules.priv.runtime.IActionRequest radioActionRequest = pzAuto
                                            .getPropertyActionRequest();
                                    for (int k = 0; k < iListSize; k++) {
                                        int i = 0;
                                        int j = 0;
                                        i = k % iNumItemsBeforeWrap;
                                        j = k / iNumItemsBeforeWrap;
                                        String radioDisplay = "";
                                        String radioValue = "";
                                        String radioTooltip = "";
                                        ClipboardPage cbpRow = ((ClipboardProperty) resIter
                                                .next()).getPageValue();
                                        try {
                                            radioDisplay = cbpRow
                                                    .getStringIfPresent("pyLabel");
                                        } catch (Exception ex) {
                                        }
                                        try {
                                            radioValue = cbpRow
                                                    .getStringIfPresent("pyFieldValue");
                                        } catch (Exception ex) {
                                        }
                                        if (radioDisplay.equals(""))
                                            radioDisplay = radioValue;
                                        String labelForId = "";
                                        labelForId = tools
                                                .getHTMLIDForProperty(true,
                                                        "radiogroup")
                                                + StringUtils
                                                        .crossScriptingFilter(radioValue);
                                        radioActionRequest
                                                .registerEnumeratedParameter(
                                                        strReferenceName,
                                                        radioValue);
                                        strCells[i][j] = ((i == 0) ? "<div>"
                                                : "")
                                                + "<span "
                                                + tdstyle
                                                + "><input id='"
                                                + labelForId
                                                + "' "
                                                + disabled_ctrl
                                                + " type='radio'  name='";
                                        if (bOptimizedMarkup) {
                                            strCells[i][j] += pzAuto
                                                    .getUIComponentRuntime()
                                                    .changeTrackProperty(
                                                            tools.getProperty(
                                                                    ".WeOfferYouWith")
                                                                    .getEntryHandle(),
                                                            "entryHandle");
                                            strCells[i][j] += "'";
                                            strCells[i][j] += " data-bindprops='value' ";
                                        } else {
                                            strCells[i][j] += strReferenceName;
                                            strCells[i][j] += "'";
                                        }
                                        strCells[i][j] += " value='"
                                                + StringUtils
                                                        .crossScriptingFilter(radioValue)
                                                + "' class='Radio "
                                                + inputClassName
                                                + "' "
                                                + ((radioValue.equals(strValue)) ? " checked"
                                                        : "")
                                                + " style='vertical-align: middle;'>"
                                                + "<label title='"
                                                + StringUtils
                                                        .crossScriptingFilter(radioTooltip)
                                                + "'  for='"
                                                + labelForId
                                                + "' class='"
                                                + labelClassName
                                                + "'>"
                                                + StringUtils
                                                        .crossScriptingFilter(radioDisplay)
                                                + "</label></span>"
                                                + (((i == iX - 1) || (k == iListSize - 1)) ? "</div>"
                                                        : "");
                                    }
                                }
                                tools.appendString("<div class='radioTable segmented_mine"
                                        + errorClass
                                        + "' role='radiogroup'  "
                                        + pzCell.getTestIdIfEnabled("202107080828130274574")
                                        + "  aria-label='");

                                tools.appendString(tools
                                        .getLocalizedTextForString("pyCaption",
                                                "We Offer You With :",
                                                StreamBuilder.FMT_LITERAL));
                                tools.appendString("' radValue='"
                                        + StringUtils
                                                .crossScriptingFilter(strValue)
                                        + "' data-ctl='RadioGroup'>");
                                for (int j = 0; j < iY; j++) {
                                    for (int i = 0; i < iX; i++) {
                                        if (strCells[i][j] != null) {
                                            int ind = strCells[i][j]
                                                    .indexOf("<input");
                                            if (ind > -1) {
                                                tools.appendString(strCells[i][j]
                                                        .substring(0, ind + 6)
                                                        + " ");
                                                pega_uiengine_pzcontrol
                                                        .pzAddClientValidation(
                                                                tools,
                                                                pyOnInput,
                                                                pyEditValidate,
                                                                pyStringType,
                                                                pegaValidation
                                                                        .toString());
                                                tools.appendString(" "
                                                        + strCells[i][j]
                                                                .substring(ind + 7));
                                            } else {
                                                tools.appendString(strCells[i][j]);
                                            }
                                        }
                                    }
                                }
                                tools.appendString("</div>");
                                pega_uiengine_pzcontrol.pzAddMessages(tools,
                                        "SIMPLELAYOUT");
                            } else {
                                tools.appendString("<input type='hidden' name='");
                                if (bOptimizedMarkup) {
                                    tools.appendCSF(pzAuto
                                            .getUIComponentRuntime()
                                            .changeTrackProperty(
                                                    tools.getProperty(
                                                            ".WeOfferYouWith")
                                                            .getEntryHandle(),
                                                    "entryHandle"));
                                    tools.appendString("' ");
                                    tools.appendString(" data-bindprops='value' ");
                                } else {
                                    tools.appendString(strReferenceName + "' ");
                                }
                                tools.appendString(" value='"
                                        + StringUtils
                                                .crossScriptingFilter(strValue)
                                        + "' "
                                        + disabled_ctrl
                                        + " />"
                                        + StringUtils
                                                .crossScriptingFilter(strValue));
                            }
                            try {
                                cbpResults.getParentPage()
                                        .removeFromClipboard();
                            } catch (Exception e) {
                            }
                        }
                        if (bOptimizedMarkup) {
                            pzAuto.getUIComponentRuntime()
                                    .getRuntimeContextTree()
                                    .endNonTemplateComponent();
                        }
                    }

                    pegaValidation.delete(0, pegaValidation.length());
                    tools.putParamValue("pega_attributes", "");
                }

                if (!isEditable) {
                    if (!pzAuto.getBrowserUtils().isFF()) {
                        tools.putParamValue("pxControlName", "pxRadioButtons");
                    }
                    tools.appendString("<span "
                            + ((pzAuto.isAccessible() || false) ? "tabindex='0' "
                                    : "")
                            + " "
                            + pzCell.getTestIdIfEnabled("202107080828130274574")
                            + " ");
                    tools.appendString(">");
                    if (pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                            .beginNonTemplate(pxUniqueStreamHash + "_22")) {
                        inclFormattedVal_2(isSecuredProp, activePropValue,
                                isDisplayTextWithParam, displayTextParamName);

                        tools.putParamValue("REQUIRED_WHEN", "");
                        tools.putParamValue("REQUIRED_WHEN_ROC", "");
                    }
                    pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                            .endNonTemplateComponent();
                    tools.appendString("</span>");
                }
                if (pegaValidation != null) {
                    com.pega.pegarules.priv.factory.StringBufferFactory
                            .release(pegaValidation);
                }
            }

            pzAuto.getSection().getControl().includeShowMe(isEditable);
            tools.putActive(propActivePrev);
        } catch (Exception e) {

            oLog.error(e.getMessage());

            if (pzAuto.getUIComponentRuntime().getTemplatingUIStatus() == 'Y'
                    && pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                            .isLiveDesignViewMode()) {

                IUIComponentMetadata metadata = pzAuto.getUIComponentRuntime()
                        .createMetadata();
                IUIComponent ctrlComponent = pzAuto.getUIComponent();
                metadata.put("cellInfo", " We Offer You With :");
                metadata.put("msgText", "config issue");
                ctrlComponent
                        .addDependentScripts("pzpega_ui_template_designview.js");
                ctrlComponent.beginComponent("pxDesignViewError", metadata);
                ctrlComponent.endComponent();
            }
        }

    }

    public void pxIcon_2() {
        boolean isDisplayTextWithParam = false;
        String displayTextParamName = "";
        String displayTextParamValue = "";

        StringBuffer pegaValidation = null;
        boolean addedValidation = false;
        try {

            if (pzAuto.getUIComponentRuntime().getTemplatingUIStatus() != 'Y') {
                tools.appendString("<span ");
                tools.appendString(">");
            }
            if (pzAuto.getUIComponentRuntime().getTemplatingUIStatus() == 'Y') {
                IUIComponentMetadata metadataPage = pzAuto
                        .getUIComponentRuntime().createMetadata();
                IUIComponentMetadata cellPage = pzAuto.getUIComponentRuntime()
                        .createMetadata();
                IUIComponentMetadata modePage1 = pzAuto.getUIComponentRuntime()
                        .createMetadata();
                IUIComponentMetadata modePage2 = pzAuto.getUIComponentRuntime()
                        .createMetadata();
                java.util.List<String> ctPropRefs = new ArrayList<String>();
                IUIComponent ctrlComponent = pzAuto.getUIComponent();
                String expressionId = null;
                com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
                IUIComponentMetadata pxPrivilegeIdentifiers = pzAuto
                        .getUIComponentRuntime().createMetadata();
                modePage1.put("generateName", "true");
                cellPage.put("pyStreamName", "Login");
                cellPage.put("pyCellID", "46");
                pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                        .addDataPageInfo();
                String repeatIndx = "";
                boolean disable = false;
                if (expressionId != null && expressionId.length() > 0) {
                    modePage1.put("pyExpressionId", expressionId);
                }
                modePage1.put("helpertype", "none");
                String pyFormatValue = "";
                StringMap whenHc = new HashStringMap();
                whenHc.putString("pyBlockName", "pyIsHybridClient");
                int pyIconWidth = 0;
                int pyIconHeight = 0;
                boolean isImgSrcUrl = false;
                ClipboardPage imagePage = null;
                HashStringMap instanceKeys = new HashStringMap();
                String imgurl = "https://tawk.link/5ed8738f4a7c62581799e0aa/a/59228d463ee9c30cd7d09204/760dc26a1da3359ee89dedfe127ac89943d0ab9f/Apply_now_(380_%C3%97_175px).png";
                java.net.URL imgurl_ext = null;
                if (imgurl != null && imgurl.contains("://")) {
                    try {
                        imgurl_ext = new java.net.URL(imgurl);
                        isImgSrcUrl = true;
                    } catch (Exception imge) {
                    }
                }
                if (isImgSrcUrl) {
                    java.awt.image.BufferedImage iicon = null;
                    pyIconWidth = 380;
                    pyIconHeight = 175;
                }
                String src = "";
                if (imgurl != null && !("").equals(imgurl)) {
                    src = (tools.evaluateWhen(whenHc) || pega_uiengine_offlinesupport
                            .pzIsForOfflineTemplate()) ? pega_uiengine_offlinesupport
                            .pzGetBase64Encoding(StringUtils
                                    .crossScriptingFilter(imgurl))
                            : StringUtils.crossScriptingFilter(imgurl);
                }
                modePage1.put("src", src);
                String style = "";
                if (pyIconWidth != 0 || pyIconHeight != 0) {
                    style = "style='width:" + pyIconWidth + "px;height:"
                            + pyIconHeight + "px;'";
                }
                modePage1.put("style", style);
                if (disable) {
                    modePage1.put("pyDisabled", disable + "");
                }
                modePage1.put("iconSrc", "exturl");
                modePage1.put("pyFormatTypeActionable", "none");
                cellPage.put(
                        "automationId",
                        " "
                                + pzCell.getTestIdIfEnabled("202107081025200128248")
                                + " ");
                String spxUniqueStreamHash13 = getUIActionsMetaData_1();
                if (spxUniqueStreamHash13 != null
                        && !"".equals(spxUniqueStreamHash13)) {
                    pzAuto.getUIComponentRuntime()
                            .getRuntimeContextTree()
                            .addActionString(spxUniqueStreamHash13,
                                    pxUniqueStreamHash + "_13");
                    modePage1.put("pyActionStringID", pxUniqueStreamHash
                            + "_13");
                }
                cellPage.addMetadataInArray("pyModes", modePage1);
                cellPage.addMetadataInArray("pyModes", modePage2);
                metadataPage.putMetadata("pyCell", cellPage);
                ctrlComponent.addDependentScripts("pzpega_ui_template_icon.js");
                ctrlComponent.beginComponent("pxIcon", metadataPage);
                ctrlComponent.setTrackedProperties(ctPropRefs
                        .toArray(new String[] {}));
                ctrlComponent.endComponent();
            } else {

                String referenceString = tools.getStepPage().getReference();
                boolean isParameterizedDeclarePage = pega
                        .getDeclarativePageUtils().isParameterizedDPName(
                                referenceString);
                if (isParameterizedDeclarePage) {
                    referenceString = tools.getStepPage().getString(
                            "pzPageNameBase");
                }
                String buttonUID = "name='Login_" + referenceString + "_46'";
                String pyFormatValue = "";
                String hrefValue = "";
                String proprefAttr = "";
                boolean sectionIsReadOnly = !(tools
                        .getParamValue("SectionReadOnly") != "-1" && tools
                        .hasInputEnabled());
                if (!(sectionIsReadOnly && false && false)) {
                    String repeatIndx = "";
                    int pyIconWidth = 0;
                    int pyIconHeight = 0;
                    boolean isImgSrcUrl = false;
                    ClipboardPage imagePage = null;
                    HashStringMap instanceKeys = new HashStringMap();
                    java.net.URL imgurl_ext = null;
                    try {
                        imgurl_ext = new java.net.URL(
                                "https://tawk.link/5ed8738f4a7c62581799e0aa/a/59228d463ee9c30cd7d09204/760dc26a1da3359ee89dedfe127ac89943d0ab9f/Apply_now_(380_%C3%97_175px).png");
                        isImgSrcUrl = true;
                    } catch (Exception imge) {
                    }
                    if (isImgSrcUrl) {
                        java.awt.image.BufferedImage iicon = null;
                        pyIconWidth = 380;
                        pyIconHeight = 175;
                    }
                    if (pyIconWidth != 0 || pyIconHeight != 0) {
                        tools.appendString("<i class='icons' style='width:"
                                + pyIconWidth
                                + "px;height:"
                                + pyIconHeight
                                + "px;'><img   "
                                + pzCell.getTestIdIfEnabled("202107081025200128248")
                                + "   data-ctl='Icon' ");
                        tools.appendString(" src=\"");
                        if (pega_uiengine_offlinesupport
                                .pzIsForOfflineTemplate()) {
                            tools.appendString(pega_uiengine_offlinesupport
                                    .pzGetBase64Encoding("https://tawk.link/5ed8738f4a7c62581799e0aa/a/59228d463ee9c30cd7d09204/760dc26a1da3359ee89dedfe127ac89943d0ab9f/Apply_now_(380_%C3%97_175px).png"));
                        } else {
                            tools.appendString("https://tawk.link/5ed8738f4a7c62581799e0aa/a/59228d463ee9c30cd7d09204/760dc26a1da3359ee89dedfe127ac89943d0ab9f/Apply_now_(380_%C3%97_175px).png");
                        }
                        tools.appendString("\"");
                        if (!"true".equals(tools
                                .getParamValue("pxAvoidUniqueAttribute")))
                            tools.appendString(buttonUID);
                    } else {
                        tools.appendString("<i class='icons'><img   "
                                + pzCell.getTestIdIfEnabled("202107081025200128248")
                                + "   data-ctl='Icon' ");
                        tools.appendString(" src=\"");
                        if (pega_uiengine_offlinesupport
                                .pzIsForOfflineTemplate()) {
                            tools.appendString(pega_uiengine_offlinesupport
                                    .pzGetBase64Encoding("https://tawk.link/5ed8738f4a7c62581799e0aa/a/59228d463ee9c30cd7d09204/760dc26a1da3359ee89dedfe127ac89943d0ab9f/Apply_now_(380_%C3%97_175px).png"));
                        } else {
                            tools.appendString("https://tawk.link/5ed8738f4a7c62581799e0aa/a/59228d463ee9c30cd7d09204/760dc26a1da3359ee89dedfe127ac89943d0ab9f/Apply_now_(380_%C3%97_175px).png");
                        }
                        tools.appendString("\"");
                        if (!"true".equals(tools
                                .getParamValue("pxAvoidUniqueAttribute")))
                            tools.appendString(buttonUID);
                    }
                    tools.appendString(" class ='cursordefault' ");
                    tools.appendString(" alt= ''");
                    tools.appendString(" /></i>");
                }
            }

            tools.putParamValue("pega_attributes", "");
            if (pzAuto.getUIComponentRuntime().getTemplatingUIStatus() != 'Y') {
                tools.appendString("</span>");
            }
            if (pegaValidation != null) {
                com.pega.pegarules.priv.factory.StringBufferFactory
                        .release(pegaValidation);
            }
        } catch (Exception e) {

            oLog.error(e.getMessage());

            if (pzAuto.getUIComponentRuntime().getTemplatingUIStatus() == 'Y'
                    && pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                            .isLiveDesignViewMode()) {

                IUIComponentMetadata metadata = pzAuto.getUIComponentRuntime()
                        .createMetadata();
                IUIComponent ctrlComponent = pzAuto.getUIComponent();
                metadata.put("cellInfo", "Button Template");
                metadata.put("msgText", "config issue");
                ctrlComponent
                        .addDependentScripts("pzpega_ui_template_designview.js");
                ctrlComponent.beginComponent("pxDesignViewError", metadata);
                ctrlComponent.endComponent();
            }
        }

    }

    public int simpleLayoutCell_3(int index) {
        IUIComponent uiComp = null;
        String labelName = "";
        String ariahiddenString = "";
        String baseRef = "";
        generateClientWhenDiv_1();
        tools.appendString("' "
                + pega.getUIEngine().getFVInspectorUtils()
                        .startCollectingFieldValueData()
                + pzCell.getInspectorDataDynamic(
                        "pxIcon",
                        ".pyTemplateButton",
                        "RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(2).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1)")
                + " class='content-item content-field item-"
                + Integer.toString(index)
                + " remove-top-spacing remove-left-spacing   "
                + pzSection.getCustomStyle(false, "", "dataValueRead",
                        "dataValueWrite")
                + " flex flex-row '  STRING_TYPE='field' RESERVE_SPACE='false'>");
        pzAuto.getUIComponentRuntime().insertComponentPlaceholderPage();
        tools.putSaveValue("parentLayouttype", "SIMPLELAYOUT");
        pxIcon_2();
        tools.appendString(pega.getUIEngine().getFVInspectorUtils()
                .stopCollectingFieldValueData()
                + "</div>");
        index++;
        return index;
    }

    public int simpleLayoutTemplateCell_3(int index) {
        IUIComponent uiComp = null;
        String labelName = "";
        String expressionId = null;
        boolean isLabelJSP = false;
        String reqExpressionId = null;
        String disExpressionId = null;
        com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
        if (expression != null) {
            expressionId = expression.getId();
        }
        String pyCustomRequireFormat = "";
        pyCustomRequireFormat = tools.getLocalizedTextForString("pyCaption",
                "pyRequired");
        String dataFieldValueMeta = pega.getUIEngine().getFVInspectorUtils()
                .startCollectingFieldValueData();
        String baseRef = "";
        boolean pyDLCellVisibility = false;
        IUIComponent cc_dlCell = pzAuto.getUIComponent();
        IUIComponentMetadata pg_dlCellMeta = pzAuto.getUIComponentRuntime()
                .createMetadata();
        IUIComponentMetadata pgCells = pzAuto.getUIComponentRuntime()
                .createMetadata();
        pgCells.put("partialClass",
                "remove-top-spacing remove-left-spacing flex flex-row");
        pgCells.put(
                "automationId",
                new StringBuilder(" ")
                        .append(pzCell
                                .getTestIdIfEnabled("202107081025200128248-Label"))
                        .append(" ").toString().replace("data-test-id=", "")
                        .trim());
        pgCells.put("format", "pxIcon");
        pgCells.put("forLabel", ".pyTemplateButton");
        pgCells.put("pyAutoHTML", "true");
        pgCells.put("spanClass", "iconRequired standard_iconRequired");
        pgCells.put("cstmreqfor", pyCustomRequireFormat);
        if (!StringUtils.isBlank(expressionId))
            pgCells.put("pyExpressionId", expressionId);
        if (!"".equals(baseRef))
            pgCells.put("pyBaseRef", String.valueOf(baseRef));
        if (!"".equals(dataFieldValueMeta))
            pgCells.put("startFV", dataFieldValueMeta);
        pgCells.put("labelJSP", String.valueOf(isLabelJSP));
        pg_dlCellMeta.putMetadata("pyCell", pgCells);
        boolean isExpression = false;
        boolean isOffline = false;
        cc_dlCell.beginComponent("DynamicLayoutCell", pg_dlCellMeta);
        String inspectorData = pzCell
                .getInspectorDataDynamic(
                        "pxIcon",
                        ".pyTemplateButton",
                        "RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(2).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1)");
        if (!inspectorData.isEmpty()) {
            pgCells.put("liveUI", inspectorData);
        }
        pxIcon_2();
        labelName = "Button Template";
        if (!pega_uiengine_offlinesupport.pzIsForOfflineTemplate()) {
            pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                    .addLocalizedValue(labelName, "pyCaption");
        } else {
            StringUtils.crossScriptingFilter(tools.getLocalizedTextForString(
                    "pyCaption", labelName));
        }
        pgCells.put("pyLabelValue", labelName);
        String uiFieldValueMeta = pega.getUIEngine().getFVInspectorUtils()
                .stopCollectingFieldValueData();
        if (!"".equals(uiFieldValueMeta)) {
            pgCells.put("stopFV", uiFieldValueMeta);
        }
        cc_dlCell.endComponent();
        index++;
        return index;
    }

    public int simpleLayoutCell_4(int index) {
        IUIComponent uiComp = null;
        String labelName = "";
        String ariahiddenString = "";
        String baseRef = "";
        generateClientWhenDiv_1();
        tools.appendString("' "
                + pega.getUIEngine().getFVInspectorUtils()
                        .startCollectingFieldValueData()
                + pzCell.getInspectorDataDynamic(
                        "pxRadioButtons",
                        ".WeOfferYouWith",
                        "RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(2).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(2)")
                + " class='content-item content-field item-"
                + Integer.toString(index)
                + " remove-bottom-spacing remove-right-spacing   flex '  STRING_TYPE='field' RESERVE_SPACE='false'>");
        boolean isCellReadOnly = false;

        isCellReadOnly = !pzAuto.getSection().getControl()
                .isControlEditable(false, null);
        if (isCellReadOnly) {
            tools.putParamValue("pzIsCellReadOnly", "true");
            tools.appendString("<span  "
                    + pzCell.getTestIdIfEnabled("202107080828130274574-Label")
                    + "  class='field-caption "
                    + pzSection.getCustomStyle(false, "", "dataLabelForRead",
                            "dataLabelForWrite") + "' ");
            if (!"true".equals(tools.getParamValue("pzIsCellReadOnly"))) {

                ClipboardProperty propActivePrev = tools.getActive();
                tools.putActive(tools.getStepPage().getProperty(
                        ".WeOfferYouWith"));
                tools.appendString("for='"
                        + tools.getHTMLIDForProperty(true, "label") + "'");

                tools.putActive(propActivePrev);
            }
            tools.appendString(">");
            boolean showstar = true;
            boolean isSecCellReadOnly = false;

            isSecCellReadOnly = !pzAuto.getSection().getControl()
                    .isControlEditable(false, null);
            tools.appendString(tools.getLocalizedTextForString("pyCaption",
                    "We Offer You With :") + "</span>");
            tools.putParamValue("pzIsCellReadOnly", "false");
        } else {
            tools.appendString("<label  "
                    + pzCell.getTestIdIfEnabled("202107080828130274574-Label")
                    + "  class='field-caption "
                    + pzSection.getCustomStyle(false, "", "dataLabelForRead",
                            "dataLabelForWrite") + "' ");
            if (!"true".equals(tools.getParamValue("pzIsCellReadOnly"))) {

                ClipboardProperty propActivePrev = tools.getActive();
                tools.putActive(tools.getStepPage().getProperty(
                        ".WeOfferYouWith"));
                tools.appendString("for='"
                        + tools.getHTMLIDForProperty(true, "label") + "'");

                tools.putActive(propActivePrev);
            }
            tools.appendString(">");
            boolean showstar = true;
            boolean isSecCellReadOnly = false;

            isSecCellReadOnly = !pzAuto.getSection().getControl()
                    .isControlEditable(false, null);
            tools.appendString(tools.getLocalizedTextForString("pyCaption",
                    "We Offer You With :") + "</label>");
        }
        tools.appendString("<div class='field-item "
                + pzSection.getCustomStyle(false, "", "dataValueRead",
                        "dataValueWrite") + "'>");
        pzAuto.getUIComponentRuntime().insertComponentPlaceholderPage();
        tools.putSaveValue("parentLayouttype", "SIMPLELAYOUT");
        pxRadioButtons_1(".WeOfferYouWith", 0, "", "", "Text");
        tools.appendString("</div>"
                + pega.getUIEngine().getFVInspectorUtils()
                        .stopCollectingFieldValueData() + "</div>");
        index++;
        return index;
    }

    public int simpleLayoutTemplateCell_4(int index) {
        IUIComponent uiComp = null;
        String labelName = "";
        String expressionId = null;
        boolean isLabelJSP = false;
        String reqExpressionId = null;
        String disExpressionId = null;
        com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
        if (expression != null) {
            expressionId = expression.getId();
        }
        String pyCustomRequireFormat = "";
        pyCustomRequireFormat = tools.getLocalizedTextForString("pyCaption",
                "pyRequired");
        String dataFieldValueMeta = pega.getUIEngine().getFVInspectorUtils()
                .startCollectingFieldValueData();
        String baseRef = "";
        boolean pyDLCellVisibility = false;
        IUIComponent cc_dlCell = pzAuto.getUIComponent();
        IUIComponentMetadata pg_dlCellMeta = pzAuto.getUIComponentRuntime()
                .createMetadata();
        IUIComponentMetadata pgCells = pzAuto.getUIComponentRuntime()
                .createMetadata();
        pgCells.put("pyLabelReserveSpace", "true");
        pgCells.put("useLabel", "true");
        pgCells.put("partialClass",
                "remove-bottom-spacing remove-right-spacing flex");
        pgCells.put(
                "automationId",
                new StringBuilder(" ")
                        .append(pzCell
                                .getTestIdIfEnabled("202107080828130274574-Label"))
                        .append(" ").toString().replace("data-test-id=", "")
                        .trim());
        pgCells.put("format", "pxRadioButtons");
        pgCells.put("forLabel", ".WeOfferYouWith");
        pgCells.put("pyAutoHTML", "true");
        pgCells.put("pyGenerateUniqueIdForLabel", "false");
        pgCells.put("spanClass", "iconRequired standard_iconRequired");
        pgCells.put("cstmreqfor", pyCustomRequireFormat);
        if (!StringUtils.isBlank(expressionId))
            pgCells.put("pyExpressionId", expressionId);
        if (!"".equals(baseRef))
            pgCells.put("pyBaseRef", String.valueOf(baseRef));
        if (!"".equals(dataFieldValueMeta))
            pgCells.put("startFV", dataFieldValueMeta);
        pgCells.put("labelJSP", String.valueOf(isLabelJSP));
        pg_dlCellMeta.putMetadata("pyCell", pgCells);
        boolean isExpression = false;
        boolean isOffline = false;
        cc_dlCell.beginComponent("DynamicLayoutCell", pg_dlCellMeta);
        String inspectorData = pzCell
                .getInspectorDataDynamic(
                        "pxRadioButtons",
                        ".WeOfferYouWith",
                        "RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(2).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(2)");
        if (!inspectorData.isEmpty()) {
            pgCells.put("liveUI", inspectorData);
        }
        pxRadioButtons_1(".WeOfferYouWith", 0, "", "", "Text");
        labelName = "We Offer You With :";
        if (!pega_uiengine_offlinesupport.pzIsForOfflineTemplate()) {
            pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                    .addLocalizedValue(labelName, "pyCaption");
        } else {
            StringUtils.crossScriptingFilter(tools.getLocalizedTextForString(
                    "pyCaption", labelName));
        }
        pgCells.put("pyLabelValue", labelName);
        String uiFieldValueMeta = pega.getUIEngine().getFVInspectorUtils()
                .stopCollectingFieldValueData();
        if (!"".equals(uiFieldValueMeta)) {
            pgCells.put("stopFV", uiFieldValueMeta);
        }
        cc_dlCell.endComponent();
        index++;
        return index;
    }

    public void pzHeaderCellContent_1() {
    }

    public void pzSetExpandParam_4() {
        pzSection.getLayout().setExpandParam("SubSectionLoginBBBB", "", true);
    }

    public void LayoutWrapperTableStart_1() {
        tools.appendString("<div "
                + pzAuto.getDataUIMetaAttribute("{'type':'Layout','subType':'DYNAMICLAYOUT','pgRef':'RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(2).pySections(1)'}")
                + " class='layout layout-outline layout-outline' id='EXPAND-OUTERFRAME' ");
        String expandParameter = "EXPANDEDSubSectionLoginBBBB";
        if ("true".equals(tools.getParamValue("expandRL"))) {
            expandParameter += StringUtils.crossScriptingFilter(tools
                    .getParamValue("index"));
        }
        tools.appendString("PARAM_NAME=\"" + expandParameter + "\">");
    }

    public void pzHeaderBody_1() {
        String rptDynamicIndex = tools.getParamValueCSF("pega_RLindex");
        String rptDynamicIdx = tools.getParamValueCSF("pega_RLindex");
        String strSaveTextValue = "";
        String l_sectionTitle = "";
        String l_sectionTitleFVMeta = "";
        String sectionImageTitle = "";
        sectionImageTitle = tools.getLocalizedTextForParameterizedString(
                "pyCaption", "");

        /***-- Grid HeaderElements: Begin --**/
        if (pzSection.getLayout().loadLayoutHeader()) {
            tools.putSaveValue("EXPAND_COLLAPSE", "Expanded");
            pzLayout.createECImgForDivHeader(true, "Expanded", l_sectionTitle,
                    false, false, true, "", false, true, "202205290956290989",
                    "aria-level=2");
        } else {
            tools.putSaveValue("EXPAND_COLLAPSE", "");
            pzLayout.createECImgForDivHeader(false, "Collapsed",
                    l_sectionTitle, false, false, true, "", false, true,
                    "202205290956290989", "aria-level=2");
        }
        tools.appendString("<div class='header-content' "
                + l_sectionTitleFVMeta + " ><nobr>");
        pzHeaderCellContent_1();
        tools.appendString("</nobr>");
        boolean showContainerIcons = tools.getParamValue("showContainerIcons")
                .equals("true") ? true : false;
        tools.appendString("<span class='header-element header-title-table'>");
        if (showContainerIcons) {
            tools.appendString("<table cellspacing='0' cellpadding='0'><tr>");
        }
        if (showContainerIcons) {
            pzLayout.includeHeaderIcon("SubSectionLoginBBBB", "tdRightStyle");
        }
        if (showContainerIcons) {
            tools.appendString("</tr></table>");
        }
        tools.appendString("</span></div><div class='header-right'></div></div></div>");

        /***Grid HeaderElements: End ***/

    }

    public void simpleLayout_2() {
        char parentTemplatingStatus = pzAuto.getUIComponentRuntime()
                .getTemplatingUIStatus();
        char currentTemplatingStatus = 'Y';
        if (!tools.getParamValue("UITemplatingStatus").equals("N")) {
            currentTemplatingStatus = pzAuto.getUIComponentRuntime()
                    .setTemplatingUIStatus('Y');
        } else {
            currentTemplatingStatus = pzAuto.getUIComponentRuntime()
                    .setTemplatingUIStatus('N');
        }
        String spxUniqueStreamHash11 = "";
        if (currentTemplatingStatus != 'N') {
            spxUniqueStreamHash11 = getUIActionsMetaData_1();
            if (spxUniqueStreamHash11 != null
                    && !"".equals(spxUniqueStreamHash11)) {
                pzAuto.getUIComponentRuntime()
                        .getRuntimeContextTree()
                        .addActionString(spxUniqueStreamHash11,
                                pxUniqueStreamHash + "_11");
            }
        }
        String refreshAttributes = "";
        String strMethodName = "";
        IUIComponent cc_dl = null;
        boolean bIsIe = (pzAuto.getBrowserUtils().isIE());
        String bIsWrapperAdded = tools.getParamValue("bIsWrapperAdded");
        String bIsGridLayout = tools.getParamValue("bIsGridLayout");
        cc_dl = pzAuto.getUIComponent();
        IUIComponentMetadata pg_dlmeta = pzAuto.getUIComponentRuntime()
                .createMetadata();
        pg_dlmeta.put("automationId",
                " " + pzCell.getTestIdIfEnabled("202107090136160395898") + " ");
        String subscriptionID = null;
        if (currentTemplatingStatus != 'Y') {
            if (bIsIe && "true".equals(bIsGridLayout)
                    && !"true".equals(bIsWrapperAdded)) {
                tools.appendString("<div class='flex-grid-table-wrapper'><div class='flex-grid-tablecell-wrapper'>");
                tools.putParamValue("bIsWrapperAdded", "true");
            }
            tools.appendString("<div bSimpleLayout='true' ");
            if (((PegaAPI) tools).getUIEngine().getPushServiceUtils()
                    .isPushEnabled()
                    && subscriptionID != null) {
                tools.appendString(" data-subscription-id='" + subscriptionID
                        + "' ");
            }
            tools.appendString(" class='"
                    + "flex  content  layout-content-default padding-l-0"
                    + "'  ");
            if (!tools.getParamValue("pyPegaDesignMode").equals("true")) {
                tools.appendString(" ");
            }
            tools.appendString(" " + refreshAttributes + ">");
        } else {
            String expressionId = null;
            com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
            if (!tools.getParamValue("pyPegaDesignMode").equals("true")
                    && spxUniqueStreamHash11 != null
                    && !"".equals(spxUniqueStreamHash11)) {
                pg_dlmeta.put("pyActionStringID", pxUniqueStreamHash + "_11");
            }
            if (!StringUtils.isBlank(expressionId)) {
                pg_dlmeta.put("pyExpressionId", expressionId);
            }
            if (!"".equals(strMethodName))
                pg_dlmeta.put("methodnm", strMethodName);
            pg_dlmeta.put("customClassName", "padding-l-0");
            pg_dlmeta.put("format", "default");
            pg_dlmeta.put("isDLChild", "true");
            pg_dlmeta.put("clear", "false");
            pg_dlmeta.put("lMode", "SimpleDiv");
            pzAuto.getUIComponentRuntime().insertComponentPlaceholderPage();
            cc_dl.beginComponent("DynamicLayout", pg_dlmeta);
        }
        int index = 1;
        if (currentTemplatingStatus != 'Y') {
            index = simpleLayoutCell_3(index);
        } else {
            index = simpleLayoutTemplateCell_3(index);
        }
        if (currentTemplatingStatus != 'Y') {
            index = simpleLayoutCell_4(index);
        } else {
            index = simpleLayoutTemplateCell_4(index);
        }
        if (currentTemplatingStatus != 'Y') {
            tools.appendString("</div>");
            if (bIsIe && "true".equals(bIsGridLayout)
                    && !"true".equals(bIsWrapperAdded)) {
                tools.appendString("</div></div>");
                tools.putParamValue("bIsWrapperAdded", "false");
            }
        } else {
            cc_dl.endComponent();
        }
        pzAuto.getUIComponentRuntime().resetTemplatingUIStatus(
                parentTemplatingStatus);
    }

    public void LayoutWrapperTableEnd_1() {
        tools.appendString("</div>");
    }

    public void pzLayoutContainer_2() {
        IUIComponentMetadata metadataPage = pzAuto.getUIComponentRuntime()
                .createMetadata();
        String expressionId = null;
        com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
        String expressionId_BV = null;
        com.pega.pegarules.priv.runtime.ui.IExpression expression_BV = null;
        if (!StringUtils.isBlank(expressionId_BV)) {
            metadataPage.put("expressionId_BV", expressionId_BV);
        }
        String paramName = "EXPANDEDSubSectionLoginBBBB";
        String inspectorLayoutData = pzAuto
                .getDataUIMetaAttribute("{'type':'Layout','subType':'DYNAMICLAYOUT','pgRef':'RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(2).pySections(1)'}");
        if (!inspectorLayoutData.isEmpty()) {
            metadataPage.put("liveUI", inspectorLayoutData);
        }
        String pyPrefix = null;
        metadataPage.put("pyInnerDivId", "EXPAND-INNERDIV");
        metadataPage.put("containerStyle", "layout-body");
        IUIComponent containerComponent = pzAuto.getUIComponent();
        metadataPage.put("dlChild", "true");
        metadataPage.put("lMode", "SimpleDiv");
        containerComponent.beginComponent("pxLayoutContainer", metadataPage);
        pzLayoutHeader_1();
        pzLayoutBody_2();
        containerComponent.endComponent();
    }

    public void pzLayout_2() {
        char currentTemplatingStatus = pzAuto.getUIComponentRuntime()
                .setTemplatingUIStatus('Y');
        if (currentTemplatingStatus == 'Y') {
            pzAuto.getUIComponentRuntime().insertComponentPlaceholderPage();
        }
        pzSetExpandParam_4();
        tools.putParamValue("RWClasses", "");
        if (!pzAuto.getUIComponentRuntime().isTemplatingUIEnabled()) {
            tools.putParamValue("RWClasses", "");
            LayoutWrapperTableStart_1();
            if (tools.getParamValue("RenderSingle").equals("")) {
                pzHeaderBody_1();
            }
            pzLayoutBodyWrapper_2();
            LayoutWrapperTableEnd_1();
        }
        if (pzAuto.getUIComponentRuntime().isTemplatingUIEnabled()) {
            tools.putParamValue("pyInlineStyleSec", "");
            pzLayoutContainer_2();
            tools.putParamValue("pyInlineStyleSec", "");
        }
    }

    public void pzLayoutBody_1() {
        tools.putParamValue("LAYOUT_METHOD_NAME", "simpleLayout_1");
        simpleLayout_1();
    }

    public void pzLayoutBodyWrapper_1() {
        tools.appendString("<div class='layout layout-none'>");
        String clsScroll = "";
        tools.appendString("<div section_index='1' class='" + clsScroll
                + " layout-body'>");
        tools.putParamValue("LAYOUT_METHOD_NAME", "simpleLayout_1");
        simpleLayout_1();
        tools.appendString("</div></div>");
        tools.putSaveValue("rowClass", "");
    }

    public void pxIcon_1() {
        boolean isDisplayTextWithParam = false;
        String displayTextParamName = "";
        String displayTextParamValue = "";

        StringBuffer pegaValidation = null;
        boolean addedValidation = false;
        try {

            if (pzAuto.getUIComponentRuntime().getTemplatingUIStatus() != 'Y') {
                tools.appendString("<span ");
                tools.appendString(">");
            }
            if (pzAuto.getUIComponentRuntime().getTemplatingUIStatus() == 'Y') {
                IUIComponentMetadata metadataPage = pzAuto
                        .getUIComponentRuntime().createMetadata();
                IUIComponentMetadata cellPage = pzAuto.getUIComponentRuntime()
                        .createMetadata();
                IUIComponentMetadata modePage1 = pzAuto.getUIComponentRuntime()
                        .createMetadata();
                IUIComponentMetadata modePage2 = pzAuto.getUIComponentRuntime()
                        .createMetadata();
                java.util.List<String> ctPropRefs = new ArrayList<String>();
                IUIComponent ctrlComponent = pzAuto.getUIComponent();
                String expressionId = null;
                com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
                IUIComponentMetadata pxPrivilegeIdentifiers = pzAuto
                        .getUIComponentRuntime().createMetadata();
                modePage1.put("generateName", "true");
                cellPage.put("pyStreamName", "Login");
                cellPage.put("pyCellID", "39");
                pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                        .addDataPageInfo();
                String repeatIndx = "";
                boolean disable = false;
                if (expressionId != null && expressionId.length() > 0) {
                    modePage1.put("pyExpressionId", expressionId);
                }
                modePage1.put("helpertype", "none");
                String pyFormatValue = "";
                StringMap whenHc = new HashStringMap();
                whenHc.putString("pyBlockName", "pyIsHybridClient");
                int pyIconWidth = 0;
                int pyIconHeight = 0;
                boolean isImgSrcUrl = false;
                ClipboardPage imagePage = null;
                HashStringMap instanceKeys = new HashStringMap();
                String imgurl = "https://tawk.link/5ed8738f4a7c62581799e0aa/a/59228d463ee9c30cd7d09204/b9bda6710adb7ad7b84914db383d47b7b8544fea/99031-passport-scanning-unscreen.gif";
                java.net.URL imgurl_ext = null;
                if (imgurl != null && imgurl.contains("://")) {
                    try {
                        imgurl_ext = new java.net.URL(imgurl);
                        isImgSrcUrl = true;
                    } catch (Exception imge) {
                    }
                }
                if (isImgSrcUrl) {
                    java.awt.image.BufferedImage iicon = null;
                    try {
                        iicon = javax.imageio.ImageIO.read(imgurl_ext);
                    } catch (java.io.IOException e) {
                    }
                    if (iicon != null) {
                        pyIconWidth = iicon.getWidth();
                        pyIconHeight = iicon.getHeight();
                    }
                }
                String src = "";
                if (imgurl != null && !("").equals(imgurl)) {
                    src = (tools.evaluateWhen(whenHc) || pega_uiengine_offlinesupport
                            .pzIsForOfflineTemplate()) ? pega_uiengine_offlinesupport
                            .pzGetBase64Encoding(StringUtils
                                    .crossScriptingFilter(imgurl))
                            : StringUtils.crossScriptingFilter(imgurl);
                }
                modePage1.put("src", src);
                String style = "";
                style = "";
                modePage1.put("style", style);
                if (disable) {
                    modePage1.put("pyDisabled", disable + "");
                }
                modePage1.put("iconSrc", "exturl");
                modePage1.put("pyFormatTypeActionable", "none");
                cellPage.put(
                        "automationId",
                        " "
                                + pzCell.getTestIdIfEnabled("202205240631160592810")
                                + " ");
                String spxUniqueStreamHash6 = getUIActionsMetaData_1();
                if (spxUniqueStreamHash6 != null
                        && !"".equals(spxUniqueStreamHash6)) {
                    pzAuto.getUIComponentRuntime()
                            .getRuntimeContextTree()
                            .addActionString(spxUniqueStreamHash6,
                                    pxUniqueStreamHash + "_6");
                    modePage1
                            .put("pyActionStringID", pxUniqueStreamHash + "_6");
                }
                cellPage.addMetadataInArray("pyModes", modePage1);
                cellPage.addMetadataInArray("pyModes", modePage2);
                metadataPage.putMetadata("pyCell", cellPage);
                ctrlComponent.addDependentScripts("pzpega_ui_template_icon.js");
                ctrlComponent.beginComponent("pxIcon", metadataPage);
                ctrlComponent.setTrackedProperties(ctPropRefs
                        .toArray(new String[] {}));
                ctrlComponent.endComponent();
            } else {

                String referenceString = tools.getStepPage().getReference();
                boolean isParameterizedDeclarePage = pega
                        .getDeclarativePageUtils().isParameterizedDPName(
                                referenceString);
                if (isParameterizedDeclarePage) {
                    referenceString = tools.getStepPage().getString(
                            "pzPageNameBase");
                }
                String buttonUID = "name='Login_" + referenceString + "_39'";
                String pyFormatValue = "";
                String hrefValue = "";
                String proprefAttr = "";
                boolean sectionIsReadOnly = !(tools
                        .getParamValue("SectionReadOnly") != "-1" && tools
                        .hasInputEnabled());
                if (!(sectionIsReadOnly && false && false)) {
                    String repeatIndx = "";
                    int pyIconWidth = 0;
                    int pyIconHeight = 0;
                    boolean isImgSrcUrl = false;
                    ClipboardPage imagePage = null;
                    HashStringMap instanceKeys = new HashStringMap();
                    java.net.URL imgurl_ext = null;
                    try {
                        imgurl_ext = new java.net.URL(
                                "https://tawk.link/5ed8738f4a7c62581799e0aa/a/59228d463ee9c30cd7d09204/b9bda6710adb7ad7b84914db383d47b7b8544fea/99031-passport-scanning-unscreen.gif");
                        isImgSrcUrl = true;
                    } catch (Exception imge) {
                    }
                    if (isImgSrcUrl) {
                        java.awt.image.BufferedImage iicon = null;
                        try {
                            iicon = javax.imageio.ImageIO.read(imgurl_ext);
                        } catch (java.io.IOException e) {
                        }
                        if (iicon != null) {
                            pyIconWidth = iicon.getWidth();
                            pyIconHeight = iicon.getHeight();
                        }
                    }
                    if (pyIconWidth != 0 || pyIconHeight != 0) {
                        tools.appendString("<i class='icons'><img   "
                                + pzCell.getTestIdIfEnabled("202205240631160592810")
                                + "   data-ctl='Icon' ");
                        tools.appendString(" src=\"");
                        if (pega_uiengine_offlinesupport
                                .pzIsForOfflineTemplate()) {
                            tools.appendString(pega_uiengine_offlinesupport
                                    .pzGetBase64Encoding("https://tawk.link/5ed8738f4a7c62581799e0aa/a/59228d463ee9c30cd7d09204/b9bda6710adb7ad7b84914db383d47b7b8544fea/99031-passport-scanning-unscreen.gif"));
                        } else {
                            tools.appendString("https://tawk.link/5ed8738f4a7c62581799e0aa/a/59228d463ee9c30cd7d09204/b9bda6710adb7ad7b84914db383d47b7b8544fea/99031-passport-scanning-unscreen.gif");
                        }
                        tools.appendString("\"");
                        if (!"true".equals(tools
                                .getParamValue("pxAvoidUniqueAttribute")))
                            tools.appendString(buttonUID);
                    } else {
                        tools.appendString("<i class='icons'><img   "
                                + pzCell.getTestIdIfEnabled("202205240631160592810")
                                + "   data-ctl='Icon' ");
                        tools.appendString(" src=\"");
                        if (pega_uiengine_offlinesupport
                                .pzIsForOfflineTemplate()) {
                            tools.appendString(pega_uiengine_offlinesupport
                                    .pzGetBase64Encoding("https://tawk.link/5ed8738f4a7c62581799e0aa/a/59228d463ee9c30cd7d09204/b9bda6710adb7ad7b84914db383d47b7b8544fea/99031-passport-scanning-unscreen.gif"));
                        } else {
                            tools.appendString("https://tawk.link/5ed8738f4a7c62581799e0aa/a/59228d463ee9c30cd7d09204/b9bda6710adb7ad7b84914db383d47b7b8544fea/99031-passport-scanning-unscreen.gif");
                        }
                        tools.appendString("\"");
                        if (!"true".equals(tools
                                .getParamValue("pxAvoidUniqueAttribute")))
                            tools.appendString(buttonUID);
                    }
                    tools.appendString(" class ='cursordefault' ");
                    tools.appendString(" alt= ''");
                    tools.appendString(" /></i>");
                }
            }

            tools.putParamValue("pega_attributes", "");
            if (pzAuto.getUIComponentRuntime().getTemplatingUIStatus() != 'Y') {
                tools.appendString("</span>");
            }
            if (pegaValidation != null) {
                com.pega.pegarules.priv.factory.StringBufferFactory
                        .release(pegaValidation);
            }
        } catch (Exception e) {

            oLog.error(e.getMessage());

            if (pzAuto.getUIComponentRuntime().getTemplatingUIStatus() == 'Y'
                    && pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                            .isLiveDesignViewMode()) {

                IUIComponentMetadata metadata = pzAuto.getUIComponentRuntime()
                        .createMetadata();
                IUIComponent ctrlComponent = pzAuto.getUIComponent();
                metadata.put("cellInfo", "Image");
                metadata.put("msgText", "config issue");
                ctrlComponent
                        .addDependentScripts("pzpega_ui_template_designview.js");
                ctrlComponent.beginComponent("pxDesignViewError", metadata);
                ctrlComponent.endComponent();
            }
        }

    }

    public int simpleLayoutCell_1(int index) {
        IUIComponent uiComp = null;
        String labelName = "";
        String ariahiddenString = "";
        String baseRef = "";
        generateClientWhenDiv_1();
        tools.appendString("' "
                + pega.getUIEngine().getFVInspectorUtils()
                        .startCollectingFieldValueData()
                + pzCell.getInspectorDataDynamic(
                        "pxIcon",
                        ".pyTemplateGeneric",
                        "RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1)")
                + " class='content-item content-field item-"
                + Integer.toString(index)
                + " remove-top-spacing remove-left-spacing remove-bottom-spacing remove-right-spacing   "
                + pzSection.getCustomStyle(false, "", "dataValueRead",
                        "dataValueWrite")
                + " flex flex-row '  STRING_TYPE='field' RESERVE_SPACE='false'>");
        pzAuto.getUIComponentRuntime().insertComponentPlaceholderPage();
        tools.putSaveValue("parentLayouttype", "SIMPLELAYOUT");
        pxIcon_1();
        tools.appendString(pega.getUIEngine().getFVInspectorUtils()
                .stopCollectingFieldValueData()
                + "</div>");
        index++;
        return index;
    }

    public int simpleLayoutTemplateCell_1(int index) {
        IUIComponent uiComp = null;
        String labelName = "";
        String expressionId = null;
        boolean isLabelJSP = false;
        String reqExpressionId = null;
        String disExpressionId = null;
        com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
        if (expression != null) {
            expressionId = expression.getId();
        }
        String pyCustomRequireFormat = "";
        pyCustomRequireFormat = tools.getLocalizedTextForString("pyCaption",
                "pyRequired");
        String dataFieldValueMeta = pega.getUIEngine().getFVInspectorUtils()
                .startCollectingFieldValueData();
        String baseRef = "";
        boolean pyDLCellVisibility = false;
        IUIComponent cc_dlCell = pzAuto.getUIComponent();
        IUIComponentMetadata pg_dlCellMeta = pzAuto.getUIComponentRuntime()
                .createMetadata();
        IUIComponentMetadata pgCells = pzAuto.getUIComponentRuntime()
                .createMetadata();
        pgCells.put(
                "partialClass",
                "remove-top-spacing remove-left-spacing remove-bottom-spacing remove-right-spacing flex flex-row");
        pgCells.put(
                "automationId",
                new StringBuilder(" ")
                        .append(pzCell
                                .getTestIdIfEnabled("202205240631160592810-Label"))
                        .append(" ").toString().replace("data-test-id=", "")
                        .trim());
        pgCells.put("format", "pxIcon");
        pgCells.put("forLabel", ".pyTemplateGeneric");
        pgCells.put("pyAutoHTML", "true");
        pgCells.put("spanClass", "iconRequired standard_iconRequired");
        pgCells.put("cstmreqfor", pyCustomRequireFormat);
        if (!StringUtils.isBlank(expressionId))
            pgCells.put("pyExpressionId", expressionId);
        if (!"".equals(baseRef))
            pgCells.put("pyBaseRef", String.valueOf(baseRef));
        if (!"".equals(dataFieldValueMeta))
            pgCells.put("startFV", dataFieldValueMeta);
        pgCells.put("labelJSP", String.valueOf(isLabelJSP));
        pg_dlCellMeta.putMetadata("pyCell", pgCells);
        boolean isExpression = false;
        boolean isOffline = false;
        cc_dlCell.beginComponent("DynamicLayoutCell", pg_dlCellMeta);
        String inspectorData = pzCell
                .getInspectorDataDynamic(
                        "pxIcon",
                        ".pyTemplateGeneric",
                        "RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1)");
        if (!inspectorData.isEmpty()) {
            pgCells.put("liveUI", inspectorData);
        }
        pxIcon_1();
        labelName = "Image";
        if (!pega_uiengine_offlinesupport.pzIsForOfflineTemplate()) {
            pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                    .addLocalizedValue(labelName, "pyCaption");
        } else {
            StringUtils.crossScriptingFilter(tools.getLocalizedTextForString(
                    "pyCaption", labelName));
        }
        pgCells.put("pyLabelValue", labelName);
        String uiFieldValueMeta = pega.getUIEngine().getFVInspectorUtils()
                .stopCollectingFieldValueData();
        if (!"".equals(uiFieldValueMeta)) {
            pgCells.put("stopFV", uiFieldValueMeta);
        }
        cc_dlCell.endComponent();
        index++;
        return index;
    }

    public void pzSetExpandParam_3() {
        pzSection.getLayout().setExpandParam("SubSectionLoginBBB", "", false);
    }

    public void simpleLayout_1() {
        char parentTemplatingStatus = pzAuto.getUIComponentRuntime()
                .getTemplatingUIStatus();
        char currentTemplatingStatus = 'Y';
        if (!tools.getParamValue("UITemplatingStatus").equals("N")) {
            currentTemplatingStatus = pzAuto.getUIComponentRuntime()
                    .setTemplatingUIStatus('Y');
        } else {
            currentTemplatingStatus = pzAuto.getUIComponentRuntime()
                    .setTemplatingUIStatus('N');
        }
        String spxUniqueStreamHash4 = "";
        if (currentTemplatingStatus != 'N') {
            spxUniqueStreamHash4 = getUIActionsMetaData_1();
            if (spxUniqueStreamHash4 != null
                    && !"".equals(spxUniqueStreamHash4)) {
                pzAuto.getUIComponentRuntime()
                        .getRuntimeContextTree()
                        .addActionString(spxUniqueStreamHash4,
                                pxUniqueStreamHash + "_4");
            }
        }
        String refreshAttributes = "";
        String strMethodName = "";
        IUIComponent cc_dl = null;
        boolean bIsIe = (pzAuto.getBrowserUtils().isIE());
        String bIsWrapperAdded = tools.getParamValue("bIsWrapperAdded");
        String bIsGridLayout = tools.getParamValue("bIsGridLayout");
        cc_dl = pzAuto.getUIComponent();
        IUIComponentMetadata pg_dlmeta = pzAuto.getUIComponentRuntime()
                .createMetadata();
        pg_dlmeta.put("automationId",
                " " + pzCell.getTestIdIfEnabled("202107090136160394236") + " ");
        String subscriptionID = null;
        if (currentTemplatingStatus != 'Y') {
            if (bIsIe && "true".equals(bIsGridLayout)
                    && !"true".equals(bIsWrapperAdded)) {
                tools.appendString("<div class='flex-grid-table-wrapper'><div class='flex-grid-tablecell-wrapper'>");
                tools.putParamValue("bIsWrapperAdded", "true");
            }
            tools.appendString("<div bSimpleLayout='true' ");
            if (((PegaAPI) tools).getUIEngine().getPushServiceUtils()
                    .isPushEnabled()
                    && subscriptionID != null) {
                tools.appendString(" data-subscription-id='" + subscriptionID
                        + "' ");
            }
            tools.appendString(""
                    + pzAuto.getDataUIMetaAttribute("{'type':'Layout','subType':'DYNAMICLAYOUT','pgRef':'RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1).pySections(1)'}")
                    + " class='" + "flex  content  layout-content-default "
                    + "'  ");
            if (!tools.getParamValue("pyPegaDesignMode").equals("true")) {
                tools.appendString(" ");
            }
            tools.appendString(" " + refreshAttributes + ">");
        } else {
            String expressionId = null;
            com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
            if (!tools.getParamValue("pyPegaDesignMode").equals("true")
                    && spxUniqueStreamHash4 != null
                    && !"".equals(spxUniqueStreamHash4)) {
                pg_dlmeta.put("pyActionStringID", pxUniqueStreamHash + "_4");
            }
            if (!StringUtils.isBlank(expressionId)) {
                pg_dlmeta.put("pyExpressionId", expressionId);
            }
            if (!"".equals(strMethodName))
                pg_dlmeta.put("methodnm", strMethodName);
            pg_dlmeta.put("format", "default");
            String inspectorData = new StringBuilder("\"")
                    .append(""
                            + pzAuto.getDataUIMetaAttribute("{'type':'Layout','subType':'DYNAMICLAYOUT','pgRef':'RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1).pySections(1)'}")
                            + "").append("\"").toString();
            if (!inspectorData.equals("\"\"")) {
                pg_dlmeta.put("liveUI", inspectorData);
            }
            pg_dlmeta.put("isDLChild", "true");
            pg_dlmeta.put("clear", "false");
            pg_dlmeta.put("lMode", "SimpleDiv");
            pzAuto.getUIComponentRuntime().insertComponentPlaceholderPage();
            cc_dl.beginComponent("DynamicLayout", pg_dlmeta);
        }
        int index = 1;
        if (currentTemplatingStatus != 'Y') {
            index = simpleLayoutCell_1(index);
        } else {
            index = simpleLayoutTemplateCell_1(index);
        }
        if (currentTemplatingStatus != 'Y') {
            tools.appendString("</div>");
            if (bIsIe && "true".equals(bIsGridLayout)
                    && !"true".equals(bIsWrapperAdded)) {
                tools.appendString("</div></div>");
                tools.putParamValue("bIsWrapperAdded", "false");
            }
        } else {
            cc_dl.endComponent();
        }
        pzAuto.getUIComponentRuntime().resetTemplatingUIStatus(
                parentTemplatingStatus);
    }

    public void pzLayoutContainer_1() {
        IUIComponentMetadata metadataPage = pzAuto.getUIComponentRuntime()
                .createMetadata();
        String expressionId = null;
        com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
        String expressionId_BV = null;
        com.pega.pegarules.priv.runtime.ui.IExpression expression_BV = null;
        if (!StringUtils.isBlank(expressionId_BV)) {
            metadataPage.put("expressionId_BV", expressionId_BV);
        }
        String paramName = "EXPANDEDSubSectionLoginBBB";
        String inspectorLayoutData = pzAuto
                .getDataUIMetaAttribute("{'type':'Layout','subType':'DYNAMICLAYOUT','pgRef':'RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1).pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1).pySections(1)'}");
        if (!inspectorLayoutData.isEmpty()) {
            metadataPage.put("liveUI", inspectorLayoutData);
        }
        String pyPrefix = null;
        IUIComponent containerComponent = pzAuto.getUIComponent();
        metadataPage.put("dlChild", "true");
        metadataPage.put("lMode", "SimpleDiv");
        containerComponent.beginComponent("pxLayoutContainer", metadataPage);
        pzLayoutBody_1();
        containerComponent.endComponent();
    }

    public void pzLayout_1() {
        char currentTemplatingStatus = pzAuto.getUIComponentRuntime()
                .setTemplatingUIStatus('Y');
        if (currentTemplatingStatus == 'Y') {
            pzAuto.getUIComponentRuntime().insertComponentPlaceholderPage();
        }
        pzSetExpandParam_3();
        tools.putParamValue("RWClasses", "");
        if (!pzAuto.getUIComponentRuntime().isTemplatingUIEnabled()) {
            pzLayoutBodyWrapper_1();
        }
        if (pzAuto.getUIComponentRuntime().isTemplatingUIEnabled()) {
            tools.putParamValue("pyInlineStyleSec", "");
            pzLayoutContainer_1();
            tools.putParamValue("pyInlineStyleSec", "");
        }
    }

    public int simpleLayoutCell_2(int index) {
        IUIComponent uiComp = null;
        String labelName = "";
        String ariahiddenString = "";
        String baseRef = "";
        generateClientWhenDiv_1();
        tools.appendString("'  class='content-item content-layout item-"
                + Integer.toString(index)
                + " remove-top-spacing remove-left-spacing   flex flex-row '  STRING_TYPE='layout' RESERVE_SPACE='false'>");
        pzLayout_1();
        tools.putSaveValue("ContainerID", "");
        tools.appendString("</div>");
        index++;
        return index;
    }

    public int simpleLayoutTemplateCell_2(int index) {
        IUIComponent uiComp = null;
        String labelName = "";
        String expressionId = null;
        boolean isLabelJSP = false;
        String reqExpressionId = null;
        String disExpressionId = null;
        com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
        if (expression != null) {
            expressionId = expression.getId();
        }
        String pyCustomRequireFormat = "";
        pyCustomRequireFormat = tools.getLocalizedTextForString("pyCaption",
                "pyRequired");
        String baseRef = "";
        boolean pyDLCellVisibility = false;
        IUIComponent cc_dlCell = pzAuto.getUIComponent();
        IUIComponentMetadata pg_dlCellMeta = pzAuto.getUIComponentRuntime()
                .createMetadata();
        IUIComponentMetadata pgCells = pzAuto.getUIComponentRuntime()
                .createMetadata();
        pgCells.put("pyType", "layout");
        pgCells.put("RWActive", "false");
        pgCells.put("partialClass",
                "remove-top-spacing remove-left-spacing flex flex-row");
        pgCells.put("spanClass", "iconRequired standard_iconRequired");
        pgCells.put("cstmreqfor", pyCustomRequireFormat);
        if (!StringUtils.isBlank(expressionId))
            pgCells.put("pyExpressionId", expressionId);
        if (!"".equals(baseRef))
            pgCells.put("pyBaseRef", String.valueOf(baseRef));
        pgCells.put("labelJSP", String.valueOf(isLabelJSP));
        pg_dlCellMeta.putMetadata("pyCell", pgCells);
        boolean isExpression = false;
        boolean isOffline = false;
        cc_dlCell.beginComponent("DynamicLayoutCell", pg_dlCellMeta);
        pzLayout_1();
        tools.putSaveValue("ContainerID", "");
        labelName = "";
        if (!pega_uiengine_offlinesupport.pzIsForOfflineTemplate()) {
            pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                    .addLocalizedValue(labelName, "pyCaption");
        } else {
            StringUtils.crossScriptingFilter(tools.getLocalizedTextForString(
                    "pyCaption", labelName));
        }
        pgCells.put("pyLabelValue", labelName);
        cc_dlCell.endComponent();
        index++;
        return index;
    }

    public int simpleLayoutCell_5(int index) {
        IUIComponent uiComp = null;
        String labelName = "";
        String ariahiddenString = "";
        String baseRef = "";
        generateClientWhenDiv_1();
        tools.appendString("'  class='content-item content-layout item-"
                + Integer.toString(index)
                + "   flex flex-row '  STRING_TYPE='layout' RESERVE_SPACE='false'>");
        pzLayout_2();
        tools.putSaveValue("ContainerID", "");
        tools.appendString("</div>");
        index++;
        return index;
    }

    public int simpleLayoutTemplateCell_5(int index) {
        IUIComponent uiComp = null;
        String labelName = "";
        String expressionId = null;
        boolean isLabelJSP = false;
        String reqExpressionId = null;
        String disExpressionId = null;
        com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
        if (expression != null) {
            expressionId = expression.getId();
        }
        String pyCustomRequireFormat = "";
        pyCustomRequireFormat = tools.getLocalizedTextForString("pyCaption",
                "pyRequired");
        String baseRef = "";
        boolean pyDLCellVisibility = false;
        IUIComponent cc_dlCell = pzAuto.getUIComponent();
        IUIComponentMetadata pg_dlCellMeta = pzAuto.getUIComponentRuntime()
                .createMetadata();
        IUIComponentMetadata pgCells = pzAuto.getUIComponentRuntime()
                .createMetadata();
        pgCells.put("pyType", "layout");
        pgCells.put("RWActive", "false");
        pgCells.put("partialClass", "flex flex-row");
        pgCells.put("spanClass", "iconRequired standard_iconRequired");
        pgCells.put("cstmreqfor", pyCustomRequireFormat);
        if (!StringUtils.isBlank(expressionId))
            pgCells.put("pyExpressionId", expressionId);
        if (!"".equals(baseRef))
            pgCells.put("pyBaseRef", String.valueOf(baseRef));
        pgCells.put("labelJSP", String.valueOf(isLabelJSP));
        pg_dlCellMeta.putMetadata("pyCell", pgCells);
        boolean isExpression = false;
        boolean isOffline = false;
        cc_dlCell.beginComponent("DynamicLayoutCell", pg_dlCellMeta);
        pzLayout_2();
        tools.putSaveValue("ContainerID", "");
        labelName = "";
        if (!pega_uiengine_offlinesupport.pzIsForOfflineTemplate()) {
            pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                    .addLocalizedValue(labelName, "pyCaption");
        } else {
            StringUtils.crossScriptingFilter(tools.getLocalizedTextForString(
                    "pyCaption", labelName));
        }
        pgCells.put("pyLabelValue", labelName);
        cc_dlCell.endComponent();
        index++;
        return index;
    }

    public int simpleLayoutCell_6(int index) {
        IUIComponent uiComp = null;
        String labelName = "";
        String ariahiddenString = "";
        String baseRef = "";
        generateClientWhenDiv_1();
        tools.appendString("'  class='content-item content-layout item-"
                + Integer.toString(index)
                + " remove-bottom-spacing remove-right-spacing   flex flex-row '  STRING_TYPE='layout' RESERVE_SPACE='false'>");
        pzLayout_3();
        tools.putSaveValue("ContainerID", "");
        tools.appendString("</div>");
        index++;
        return index;
    }

    public int simpleLayoutTemplateCell_6(int index) {
        IUIComponent uiComp = null;
        String labelName = "";
        String expressionId = null;
        boolean isLabelJSP = false;
        String reqExpressionId = null;
        String disExpressionId = null;
        com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
        if (expression != null) {
            expressionId = expression.getId();
        }
        String pyCustomRequireFormat = "";
        pyCustomRequireFormat = tools.getLocalizedTextForString("pyCaption",
                "pyRequired");
        String baseRef = "";
        boolean pyDLCellVisibility = false;
        IUIComponent cc_dlCell = pzAuto.getUIComponent();
        IUIComponentMetadata pg_dlCellMeta = pzAuto.getUIComponentRuntime()
                .createMetadata();
        IUIComponentMetadata pgCells = pzAuto.getUIComponentRuntime()
                .createMetadata();
        pgCells.put("pyType", "layout");
        pgCells.put("RWActive", "false");
        pgCells.put("partialClass",
                "remove-bottom-spacing remove-right-spacing flex flex-row");
        pgCells.put("spanClass", "iconRequired standard_iconRequired");
        pgCells.put("cstmreqfor", pyCustomRequireFormat);
        if (!StringUtils.isBlank(expressionId))
            pgCells.put("pyExpressionId", expressionId);
        if (!"".equals(baseRef))
            pgCells.put("pyBaseRef", String.valueOf(baseRef));
        pgCells.put("labelJSP", String.valueOf(isLabelJSP));
        pg_dlCellMeta.putMetadata("pyCell", pgCells);
        boolean isExpression = false;
        boolean isOffline = false;
        cc_dlCell.beginComponent("DynamicLayoutCell", pg_dlCellMeta);
        pzLayout_3();
        tools.putSaveValue("ContainerID", "");
        labelName = "";
        if (!pega_uiengine_offlinesupport.pzIsForOfflineTemplate()) {
            pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                    .addLocalizedValue(labelName, "pyCaption");
        } else {
            StringUtils.crossScriptingFilter(tools.getLocalizedTextForString(
                    "pyCaption", labelName));
        }
        pgCells.put("pyLabelValue", labelName);
        cc_dlCell.endComponent();
        index++;
        return index;
    }

    public void pzSetExpandParam_2() {
        pzSection.getLayout().setExpandParam("SubSectionLoginBB", "", false);
    }

    public void simpleLayout_4() {
        char parentTemplatingStatus = pzAuto.getUIComponentRuntime()
                .getTemplatingUIStatus();
        char currentTemplatingStatus = 'Y';
        if (!tools.getParamValue("UITemplatingStatus").equals("N")) {
            currentTemplatingStatus = pzAuto.getUIComponentRuntime()
                    .setTemplatingUIStatus('Y');
        } else {
            currentTemplatingStatus = pzAuto.getUIComponentRuntime()
                    .setTemplatingUIStatus('N');
        }
        String spxUniqueStreamHash3 = "";
        if (currentTemplatingStatus != 'N') {
            spxUniqueStreamHash3 = getUIActionsMetaData_1();
            if (spxUniqueStreamHash3 != null
                    && !"".equals(spxUniqueStreamHash3)) {
                pzAuto.getUIComponentRuntime()
                        .getRuntimeContextTree()
                        .addActionString(spxUniqueStreamHash3,
                                pxUniqueStreamHash + "_3");
            }
        }
        String refreshAttributes = "";
        String strMethodName = "";
        IUIComponent cc_dl = null;
        boolean bIsIe = (pzAuto.getBrowserUtils().isIE());
        String bIsWrapperAdded = tools.getParamValue("bIsWrapperAdded");
        String bIsGridLayout = tools.getParamValue("bIsGridLayout");
        cc_dl = pzAuto.getUIComponent();
        IUIComponentMetadata pg_dlmeta = pzAuto.getUIComponentRuntime()
                .createMetadata();
        pg_dlmeta.put("automationId",
                " " + pzCell.getTestIdIfEnabled("202107090136160392626") + " ");
        String subscriptionID = null;
        if (currentTemplatingStatus != 'Y') {
            if (bIsIe && "true".equals(bIsGridLayout)
                    && !"true".equals(bIsWrapperAdded)) {
                tools.appendString("<div class='flex-grid-table-wrapper'><div class='flex-grid-tablecell-wrapper'>");
                tools.putParamValue("bIsWrapperAdded", "true");
            }
            tools.appendString("<div bSimpleLayout='true' ");
            if (((PegaAPI) tools).getUIEngine().getPushServiceUtils()
                    .isPushEnabled()
                    && subscriptionID != null) {
                tools.appendString(" data-subscription-id='" + subscriptionID
                        + "' ");
            }
            tools.appendString(""
                    + pzAuto.getDataUIMetaAttribute("{'type':'Layout','subType':'DYNAMICLAYOUT','pgRef':'RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1).pySections(1)'}")
                    + " class='"
                    + "flex  content  layout-content-inline_grid_triple content-inline_grid_triple "
                    + "'  ");
            if (!tools.getParamValue("pyPegaDesignMode").equals("true")) {
                tools.appendString(" ");
            }
            tools.appendString(" " + refreshAttributes + ">");
        } else {
            String expressionId = null;
            com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
            if (!tools.getParamValue("pyPegaDesignMode").equals("true")
                    && spxUniqueStreamHash3 != null
                    && !"".equals(spxUniqueStreamHash3)) {
                pg_dlmeta.put("pyActionStringID", pxUniqueStreamHash + "_3");
            }
            if (!StringUtils.isBlank(expressionId)) {
                pg_dlmeta.put("pyExpressionId", expressionId);
            }
            if (!"".equals(strMethodName))
                pg_dlmeta.put("methodnm", strMethodName);
            pg_dlmeta.put("format", "inline_grid_triple");
            String inspectorData = new StringBuilder("\"")
                    .append(""
                            + pzAuto.getDataUIMetaAttribute("{'type':'Layout','subType':'DYNAMICLAYOUT','pgRef':'RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1).pySections(1)'}")
                            + "").append("\"").toString();
            if (!inspectorData.equals("\"\"")) {
                pg_dlmeta.put("liveUI", inspectorData);
            }
            pg_dlmeta.put("isDLChild", "true");
            pg_dlmeta.put("clear", "false");
            pg_dlmeta.put("lMode", "SimpleDiv");
            pzAuto.getUIComponentRuntime().insertComponentPlaceholderPage();
            cc_dl.beginComponent("DynamicLayout", pg_dlmeta);
        }
        int index = 1;
        if (currentTemplatingStatus != 'Y') {
            index = simpleLayoutCell_2(index);
        } else {
            index = simpleLayoutTemplateCell_2(index);
        }
        if (currentTemplatingStatus != 'Y') {
            index = simpleLayoutCell_5(index);
        } else {
            index = simpleLayoutTemplateCell_5(index);
        }
        if (currentTemplatingStatus != 'Y') {
            index = simpleLayoutCell_6(index);
        } else {
            index = simpleLayoutTemplateCell_6(index);
        }
        if (currentTemplatingStatus != 'Y') {
            tools.appendString("</div>");
            if (bIsIe && "true".equals(bIsGridLayout)
                    && !"true".equals(bIsWrapperAdded)) {
                tools.appendString("</div></div>");
                tools.putParamValue("bIsWrapperAdded", "false");
            }
        } else {
            cc_dl.endComponent();
        }
        pzAuto.getUIComponentRuntime().resetTemplatingUIStatus(
                parentTemplatingStatus);
    }

    public void pzLayoutContainer_4() {
        IUIComponentMetadata metadataPage = pzAuto.getUIComponentRuntime()
                .createMetadata();
        String expressionId = null;
        com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
        String expressionId_BV = null;
        com.pega.pegarules.priv.runtime.ui.IExpression expression_BV = null;
        if (!StringUtils.isBlank(expressionId_BV)) {
            metadataPage.put("expressionId_BV", expressionId_BV);
        }
        String paramName = "EXPANDEDSubSectionLoginBB";
        String inspectorLayoutData = pzAuto
                .getDataUIMetaAttribute("{'type':'Layout','subType':'DYNAMICLAYOUT','pgRef':'RH_1.pySections(1).pySectionBody(1).pyTable.pyRows(1).pyCells(1).pySections(1)'}");
        if (!inspectorLayoutData.isEmpty()) {
            metadataPage.put("liveUI", inspectorLayoutData);
        }
        String pyPrefix = null;
        IUIComponent containerComponent = pzAuto.getUIComponent();
        metadataPage.put("dlChild", "true");
        metadataPage.put("lMode", "SimpleDiv");
        containerComponent.beginComponent("pxLayoutContainer", metadataPage);
        pzLayoutBody_4();
        containerComponent.endComponent();
    }

    public void pzLayout_4() {
        char currentTemplatingStatus = pzAuto.getUIComponentRuntime()
                .setTemplatingUIStatus('Y');
        if (currentTemplatingStatus == 'Y') {
            pzAuto.getUIComponentRuntime().insertComponentPlaceholderPage();
        }
        pzSetExpandParam_2();
        tools.putParamValue("RWClasses", "");
        if (!pzAuto.getUIComponentRuntime().isTemplatingUIEnabled()) {
            pzLayoutBodyWrapper_4();
        }
        if (pzAuto.getUIComponentRuntime().isTemplatingUIEnabled()) {
            tools.putParamValue("pyInlineStyleSec", "");
            pzLayoutContainer_4();
            tools.putParamValue("pyInlineStyleSec", "");
        }
    }

    public void generateClientWhenDiv_1() {
        String clientWhenAttr = "";
        char currentTemplatingStatus = 'Y';
        currentTemplatingStatus = pzAuto.getUIComponentRuntime()
                .getTemplatingUIStatus();
        if (currentTemplatingStatus == 'N')
            tools.appendString("<div ");
        if (tools.getThread().getName().indexOf("/$WorkProcessing") != -1
                || tools.getThread().getName().indexOf("/$FlowModalProcess") != -1) {
            if (currentTemplatingStatus == 'N') {
                tools.appendString(" thread_name = \""
                        + tools.getThread().getName() + "\"");
            } else {
                String threadName = tools.getThread().getName();
                clientWhenAttr += "thread_name= \"" + threadName + "\" ";
            }
        }
        if (currentTemplatingStatus == 'N')
            tools.appendString(" style='");
        else
            clientWhenAttr += "style='";
        if (currentTemplatingStatus == 'Y')
            clientWhenAttr += "'";
        if (currentTemplatingStatus == 'Y')
            tools.putParamValue("clientWhenAttr", clientWhenAttr);
    }

    public String getUIActionsMetaData_1() {
        StringBuilder actionsStringBuilder = tools.pushStreamBody();
        ((PegaStreamAPI) tools).disableDirectStreaming();
        String returnString = actionsStringBuilder.toString();
        tools.popStreamBody();
        return returnString;
    }

    public int simpleLayoutCell_7(int index) {
        IUIComponent uiComp = null;
        String labelName = "";
        String ariahiddenString = "";
        String baseRef = "";
        generateClientWhenDiv_1();
        tools.appendString("'  class='content-item content-layout item-"
                + Integer.toString(index)
                + " remove-left-spacing remove-right-spacing   flex flex-row '  STRING_TYPE='layout' RESERVE_SPACE='false'>");
        pzLayout_4();
        tools.putSaveValue("ContainerID", "");
        tools.appendString("</div>");
        index++;
        return index;
    }

    public int simpleLayoutTemplateCell_7(int index) {
        IUIComponent uiComp = null;
        String labelName = "";
        String expressionId = null;
        boolean isLabelJSP = false;
        String reqExpressionId = null;
        String disExpressionId = null;
        com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
        if (expression != null) {
            expressionId = expression.getId();
        }
        String pyCustomRequireFormat = "";
        pyCustomRequireFormat = tools.getLocalizedTextForString("pyCaption",
                "pyRequired");
        String baseRef = "";
        boolean pyDLCellVisibility = false;
        IUIComponent cc_dlCell = pzAuto.getUIComponent();
        IUIComponentMetadata pg_dlCellMeta = pzAuto.getUIComponentRuntime()
                .createMetadata();
        IUIComponentMetadata pgCells = pzAuto.getUIComponentRuntime()
                .createMetadata();
        pgCells.put("pyType", "layout");
        pgCells.put("RWActive", "false");
        pgCells.put("partialClass",
                "remove-left-spacing remove-right-spacing flex flex-row");
        pgCells.put("spanClass", "iconRequired standard_iconRequired");
        pgCells.put("cstmreqfor", pyCustomRequireFormat);
        if (!StringUtils.isBlank(expressionId))
            pgCells.put("pyExpressionId", expressionId);
        if (!"".equals(baseRef))
            pgCells.put("pyBaseRef", String.valueOf(baseRef));
        pgCells.put("labelJSP", String.valueOf(isLabelJSP));
        pg_dlCellMeta.putMetadata("pyCell", pgCells);
        boolean isExpression = false;
        boolean isOffline = false;
        cc_dlCell.beginComponent("DynamicLayoutCell", pg_dlCellMeta);
        pzLayout_4();
        tools.putSaveValue("ContainerID", "");
        labelName = "";
        if (!pega_uiengine_offlinesupport.pzIsForOfflineTemplate()) {
            pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                    .addLocalizedValue(labelName, "pyCaption");
        } else {
            StringUtils.crossScriptingFilter(tools.getLocalizedTextForString(
                    "pyCaption", labelName));
        }
        pgCells.put("pyLabelValue", labelName);
        cc_dlCell.endComponent();
        index++;
        return index;
    }

    public int simpleLayoutCell_13(int index) {
        IUIComponent uiComp = null;
        String labelName = "";
        String ariahiddenString = "";
        String baseRef = "";
        generateClientWhenDiv_2();
        tools.appendString("'  class='content-item content-layout item-"
                + Integer.toString(index)
                + " remove-left-spacing remove-right-spacing   flex flex-row '  STRING_TYPE='layout' RESERVE_SPACE='false'>");
        pzLayout_8();
        tools.putSaveValue("ContainerID", "");
        tools.appendString("</div>");
        index++;
        return index;
    }

    public int simpleLayoutTemplateCell_13(int index) {
        IUIComponent uiComp = null;
        String labelName = "";
        String expressionId = null;
        boolean isLabelJSP = false;
        String reqExpressionId = null;
        String disExpressionId = null;
        com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
        expressionId = pxUniqueStreamHash + "_61";
        expression = pzAuto
                .getUIComponentRuntime()
                .getExpressionEvaluator()
                .addExpression("showWhen", ".WeOfferYouWith = 'Registration'",
                        expressionId);
        if (expression != null) {
            expressionId = expression.getId();
        }
        String pyCustomRequireFormat = "";
        pyCustomRequireFormat = tools.getLocalizedTextForString("pyCaption",
                "pyRequired");
        String baseRef = "";
        boolean pyDLCellVisibility = false;
        IUIComponent cc_dlCell = pzAuto.getUIComponent();
        IUIComponentMetadata pg_dlCellMeta = pzAuto.getUIComponentRuntime()
                .createMetadata();
        IUIComponentMetadata pgCells = pzAuto.getUIComponentRuntime()
                .createMetadata();
        pgCells.put("pyType", "layout");
        pgCells.put("RWActive", "false");
        pgCells.put("partialClass",
                "remove-left-spacing remove-right-spacing flex flex-row");
        pgCells.put("spanClass", "iconRequired standard_iconRequired");
        pgCells.put("cstmreqfor", pyCustomRequireFormat);
        if (!StringUtils.isBlank(expressionId))
            pgCells.put("pyExpressionId", expressionId);
        if (!"".equals(baseRef))
            pgCells.put("pyBaseRef", String.valueOf(baseRef));
        pgCells.put("labelJSP", String.valueOf(isLabelJSP));
        pg_dlCellMeta.putMetadata("pyCell", pgCells);
        boolean isExpression = false;
        boolean isOffline = false;
        cc_dlCell.beginComponent("DynamicLayoutCell", pg_dlCellMeta);
        pzLayout_8();
        tools.putSaveValue("ContainerID", "");
        labelName = "";
        if (!pega_uiengine_offlinesupport.pzIsForOfflineTemplate()) {
            pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                    .addLocalizedValue(labelName, "pyCaption");
        } else {
            StringUtils.crossScriptingFilter(tools.getLocalizedTextForString(
                    "pyCaption", labelName));
        }
        pgCells.put("pyLabelValue", labelName);
        cc_dlCell.endComponent();
        index++;
        return index;
    }

    public int simpleLayoutCell_15(int index) {
        IUIComponent uiComp = null;
        String labelName = "";
        String ariahiddenString = "";
        String baseRef = "";
        generateClientWhenDiv_3();
        tools.appendString("'  class='content-item content-layout item-"
                + Integer.toString(index)
                + " remove-left-spacing remove-right-spacing   flex flex-row '  STRING_TYPE='layout' RESERVE_SPACE='false'>");
        pzLayout_10();
        tools.putSaveValue("ContainerID", "");
        tools.appendString("</div>");
        index++;
        return index;
    }

    public int simpleLayoutTemplateCell_15(int index) {
        IUIComponent uiComp = null;
        String labelName = "";
        String expressionId = null;
        boolean isLabelJSP = false;
        String reqExpressionId = null;
        String disExpressionId = null;
        com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
        expressionId = pxUniqueStreamHash + "_70";
        expression = pzAuto
                .getUIComponentRuntime()
                .getExpressionEvaluator()
                .addExpression("showWhen",
                        ".WeOfferYouWith = 'Helpline Numbers'", expressionId);
        if (expression != null) {
            expressionId = expression.getId();
        }
        String pyCustomRequireFormat = "";
        pyCustomRequireFormat = tools.getLocalizedTextForString("pyCaption",
                "pyRequired");
        String baseRef = "";
        boolean pyDLCellVisibility = false;
        IUIComponent cc_dlCell = pzAuto.getUIComponent();
        IUIComponentMetadata pg_dlCellMeta = pzAuto.getUIComponentRuntime()
                .createMetadata();
        IUIComponentMetadata pgCells = pzAuto.getUIComponentRuntime()
                .createMetadata();
        pgCells.put("pyType", "layout");
        pgCells.put("RWActive", "false");
        pgCells.put("partialClass",
                "remove-left-spacing remove-right-spacing flex flex-row");
        pgCells.put("spanClass", "iconRequired standard_iconRequired");
        pgCells.put("cstmreqfor", pyCustomRequireFormat);
        if (!StringUtils.isBlank(expressionId))
            pgCells.put("pyExpressionId", expressionId);
        if (!"".equals(baseRef))
            pgCells.put("pyBaseRef", String.valueOf(baseRef));
        pgCells.put("labelJSP", String.valueOf(isLabelJSP));
        pg_dlCellMeta.putMetadata("pyCell", pgCells);
        boolean isExpression = false;
        boolean isOffline = false;
        cc_dlCell.beginComponent("DynamicLayoutCell", pg_dlCellMeta);
        pzLayout_10();
        tools.putSaveValue("ContainerID", "");
        labelName = "";
        if (!pega_uiengine_offlinesupport.pzIsForOfflineTemplate()) {
            pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                    .addLocalizedValue(labelName, "pyCaption");
        } else {
            StringUtils.crossScriptingFilter(tools.getLocalizedTextForString(
                    "pyCaption", labelName));
        }
        pgCells.put("pyLabelValue", labelName);
        cc_dlCell.endComponent();
        index++;
        return index;
    }

    public int simpleLayoutCell_17(int index) {
        IUIComponent uiComp = null;
        String labelName = "";
        String ariahiddenString = "";
        String baseRef = "";
        generateClientWhenDiv_4();
        tools.appendString("'  class='content-item content-layout item-"
                + Integer.toString(index)
                + " remove-left-spacing remove-right-spacing   flex flex-row '  STRING_TYPE='layout' RESERVE_SPACE='false'>");
        pzLayout_11();
        tools.putSaveValue("ContainerID", "");
        tools.appendString("</div>");
        index++;
        return index;
    }

    public int simpleLayoutTemplateCell_17(int index) {
        IUIComponent uiComp = null;
        String labelName = "";
        String expressionId = null;
        boolean isLabelJSP = false;
        String reqExpressionId = null;
        String disExpressionId = null;
        com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
        expressionId = pxUniqueStreamHash + "_79";
        expression = pzAuto
                .getUIComponentRuntime()
                .getExpressionEvaluator()
                .addExpression("showWhen", ".WeOfferYouWith = 'Guidelines'",
                        expressionId);
        if (expression != null) {
            expressionId = expression.getId();
        }
        String pyCustomRequireFormat = "";
        pyCustomRequireFormat = tools.getLocalizedTextForString("pyCaption",
                "pyRequired");
        String baseRef = "";
        boolean pyDLCellVisibility = false;
        IUIComponent cc_dlCell = pzAuto.getUIComponent();
        IUIComponentMetadata pg_dlCellMeta = pzAuto.getUIComponentRuntime()
                .createMetadata();
        IUIComponentMetadata pgCells = pzAuto.getUIComponentRuntime()
                .createMetadata();
        pgCells.put("pyType", "layout");
        pgCells.put("RWActive", "false");
        pgCells.put("partialClass",
                "remove-left-spacing remove-right-spacing flex flex-row");
        pgCells.put("spanClass", "iconRequired standard_iconRequired");
        pgCells.put("cstmreqfor", pyCustomRequireFormat);
        if (!StringUtils.isBlank(expressionId))
            pgCells.put("pyExpressionId", expressionId);
        if (!"".equals(baseRef))
            pgCells.put("pyBaseRef", String.valueOf(baseRef));
        pgCells.put("labelJSP", String.valueOf(isLabelJSP));
        pg_dlCellMeta.putMetadata("pyCell", pgCells);
        boolean isExpression = false;
        boolean isOffline = false;
        cc_dlCell.beginComponent("DynamicLayoutCell", pg_dlCellMeta);
        pzLayout_11();
        tools.putSaveValue("ContainerID", "");
        labelName = "";
        if (!pega_uiengine_offlinesupport.pzIsForOfflineTemplate()) {
            pzAuto.getUIComponentRuntime().getRuntimeContextTree()
                    .addLocalizedValue(labelName, "pyCaption");
        } else {
            StringUtils.crossScriptingFilter(tools.getLocalizedTextForString(
                    "pyCaption", labelName));
        }
        pgCells.put("pyLabelValue", labelName);
        cc_dlCell.endComponent();
        index++;
        return index;
    }

    public void pzSetExpandParam_1() {
        pzSection.getLayout().setExpandParam("SubSectionLoginB", "", false);
    }

    public void simpleLayout_10() {
        char parentTemplatingStatus = pzAuto.getUIComponentRuntime()
                .getTemplatingUIStatus();
        char currentTemplatingStatus = 'Y';
        if (!tools.getParamValue("UITemplatingStatus").equals("N")) {
            currentTemplatingStatus = pzAuto.getUIComponentRuntime()
                    .setTemplatingUIStatus('Y');
        } else {
            currentTemplatingStatus = pzAuto.getUIComponentRuntime()
                    .setTemplatingUIStatus('N');
        }
        String spxUniqueStreamHash2 = "";
        if (currentTemplatingStatus != 'N') {
            spxUniqueStreamHash2 = getUIActionsMetaData_1();
            if (spxUniqueStreamHash2 != null
                    && !"".equals(spxUniqueStreamHash2)) {
                pzAuto.getUIComponentRuntime()
                        .getRuntimeContextTree()
                        .addActionString(spxUniqueStreamHash2,
                                pxUniqueStreamHash + "_2");
            }
        }
        String refreshAttributes = "";
        String strMethodName = "";
        IUIComponent cc_dl = null;
        boolean bIsIe = (pzAuto.getBrowserUtils().isIE());
        String bIsWrapperAdded = tools.getParamValue("bIsWrapperAdded");
        String bIsGridLayout = tools.getParamValue("bIsGridLayout");
        cc_dl = pzAuto.getUIComponent();
        IUIComponentMetadata pg_dlmeta = pzAuto.getUIComponentRuntime()
                .createMetadata();
        pg_dlmeta.put("automationId",
                " " + pzCell.getTestIdIfEnabled("201808120943310957798") + " ");
        String subscriptionID = null;
        if (currentTemplatingStatus != 'Y') {
            if (bIsIe && "true".equals(bIsGridLayout)
                    && !"true".equals(bIsWrapperAdded)) {
                tools.appendString("<div class='flex-grid-table-wrapper'><div class='flex-grid-tablecell-wrapper'>");
                tools.putParamValue("bIsWrapperAdded", "true");
            }
            tools.appendString("<div bSimpleLayout='true' ");
            if (((PegaAPI) tools).getUIEngine().getPushServiceUtils()
                    .isPushEnabled()
                    && subscriptionID != null) {
                tools.appendString(" data-subscription-id='" + subscriptionID
                        + "' ");
            }
            tools.appendString(""
                    + pzAuto.getDataUIMetaAttribute("{'type':'Layout','subType':'DYNAMICLAYOUT','pgRef':'RH_1.pySections(1)'}")
                    + " class='"
                    + "flex  content  layout-content-stacked content-stacked content-items-maxwidth"
                    + "'  ");
            if (!tools.getParamValue("pyPegaDesignMode").equals("true")) {
                tools.appendString(" ");
            }
            tools.appendString(" " + refreshAttributes + ">");
        } else {
            String expressionId = null;
            com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
            if (!tools.getParamValue("pyPegaDesignMode").equals("true")
                    && spxUniqueStreamHash2 != null
                    && !"".equals(spxUniqueStreamHash2)) {
                pg_dlmeta.put("pyActionStringID", pxUniqueStreamHash + "_2");
            }
            if (!StringUtils.isBlank(expressionId)) {
                pg_dlmeta.put("pyExpressionId", expressionId);
            }
            if (!"".equals(strMethodName))
                pg_dlmeta.put("methodnm", strMethodName);
            pg_dlmeta.put("customClassName", "content-items-maxwidth");
            pg_dlmeta.put("format", "stacked");
            String inspectorData = new StringBuilder("\"")
                    .append(""
                            + pzAuto.getDataUIMetaAttribute("{'type':'Layout','subType':'DYNAMICLAYOUT','pgRef':'RH_1.pySections(1)'}")
                            + "").append("\"").toString();
            if (!inspectorData.equals("\"\"")) {
                pg_dlmeta.put("liveUI", inspectorData);
            }
            pg_dlmeta.put("lMode", "SimpleDiv");
            pzAuto.getUIComponentRuntime().insertComponentPlaceholderPage();
            cc_dl.beginComponent("DynamicLayout", pg_dlmeta);
        }
        int index = 1;
        if (currentTemplatingStatus != 'Y') {
            index = simpleLayoutCell_7(index);
        } else {
            index = simpleLayoutTemplateCell_7(index);
        }
        if (currentTemplatingStatus != 'Y') {
            index = simpleLayoutCell_13(index);
        } else {
            index = simpleLayoutTemplateCell_13(index);
        }
        if (currentTemplatingStatus != 'Y') {
            index = simpleLayoutCell_15(index);
        } else {
            index = simpleLayoutTemplateCell_15(index);
        }
        if (currentTemplatingStatus != 'Y') {
            index = simpleLayoutCell_17(index);
        } else {
            index = simpleLayoutTemplateCell_17(index);
        }
        if (currentTemplatingStatus != 'Y') {
            tools.appendString("</div>");
            if (bIsIe && "true".equals(bIsGridLayout)
                    && !"true".equals(bIsWrapperAdded)) {
                tools.appendString("</div></div>");
                tools.putParamValue("bIsWrapperAdded", "false");
            }
        } else {
            cc_dl.endComponent();
        }
        pzAuto.getUIComponentRuntime().resetTemplatingUIStatus(
                parentTemplatingStatus);
    }

    public void pzLayoutContainer_10() {
        IUIComponentMetadata metadataPage = pzAuto.getUIComponentRuntime()
                .createMetadata();
        String expressionId = null;
        com.pega.pegarules.priv.runtime.ui.IExpression expression = null;
        String expressionId_BV = null;
        com.pega.pegarules.priv.runtime.ui.IExpression expression_BV = null;
        if (!StringUtils.isBlank(expressionId_BV)) {
            metadataPage.put("expressionId_BV", expressionId_BV);
        }
        String paramName = "EXPANDEDSubSectionLoginB";
        String inspectorLayoutData = pzAuto
                .getDataUIMetaAttribute("{'type':'Layout','subType':'DYNAMICLAYOUT','pgRef':'RH_1.pySections(1)'}");
        if (!inspectorLayoutData.isEmpty()) {
            metadataPage.put("liveUI", inspectorLayoutData);
        }
        String pyPrefix = null;
        IUIComponent containerComponent = pzAuto.getUIComponent();
        metadataPage.put("lMode", "SimpleDiv");
        metadataPage.put("contCustom", "margin-b-1x");
        containerComponent.beginComponent("pxLayoutContainer", metadataPage);
        pzLayoutBody_10();
        containerComponent.endComponent();
    }

    public void pzLayout_12() {
        char currentTemplatingStatus = pzAuto.getUIComponentRuntime()
                .setTemplatingUIStatus('Y');
        if (currentTemplatingStatus == 'Y') {
            pzAuto.getUIComponentRuntime().insertComponentPlaceholderPage();
        }
        pzSetExpandParam_1();
        tools.putParamValue("RWClasses", "");
        if (!pzAuto.getUIComponentRuntime().isTemplatingUIEnabled()) {
            pzLayoutBodyWrapper_12();
        }
        if (pzAuto.getUIComponentRuntime().isTemplatingUIEnabled()) {
            tools.putParamValue("pyInlineStyleSec", "");
            pzLayoutContainer_10();
            tools.putParamValue("pyInlineStyleSec", "");
        }
    }

    private void performStream_1() throws Throwable {
        buildWhiteList_1();
        pzSectionBody_1();
    }

    private static final Map oPropDefinitions_1 = null;
    private static final Map oStreamProperties_1 = new HashMap();
    static {
        oStreamProperties_1.put("pyRuleAvailable", "Yes");
        oStreamProperties_1.put("pyCircumstanceDateProp", "");
        oStreamProperties_1.put("pyCircumstanceVal", "");
        oStreamProperties_1.put("pyMethodStatus", "");
        oStreamProperties_1.put("pyClassName",
                "GOV-EPass-Work-EPassRegistration");
        oStreamProperties_1.put("pyCircumstanceProp", "");
        oStreamProperties_1
                .put("pzInsKey",
                        "RULE-HTML-SECTION GOV-EPASS-WORK-EPASSREGISTRATION LOGIN #20210708T122813.214 GMT");
        oStreamProperties_1.put("pxObjClass", "Rule-HTML-Section");
        oStreamProperties_1.put("pyCircumstanceDate", "");
        oStreamProperties_1.put("pyRuleEnds", "");
        oStreamProperties_1.put("pyRuleStarts", "");
        oStreamProperties_1.put("pyJavaGenerateAPIVersion", "04-02");
        oStreamProperties_1.put("pyXMLType", "");
        oStreamProperties_1.put("pyRuleSet", "EPass");
        oStreamProperties_1.put("pyCorrType", "");
        oStreamProperties_1.put("pyStreamName", "Login");
        oStreamProperties_1.put("pyRuleSetVersion", "01-01-01");
    }

    private boolean hasNonTemplateMethod_1() {
        return false;
    }

    private boolean hasNonTemplateComponent() {
        return false;
    }

    protected static final Map pzExternalMethodMapping = new HashMap();
    protected static final Map pzExternalMethodCache = new Hashtable();
    static {
        pzExternalMethodMapping.put("simpleLayout_6", new String[][] {});
        pzExternalMethodMapping.put("simpleLayout_2", new String[][] {});
        pzExternalMethodMapping.put("simpleLayout_10", new String[][] {});
        pzExternalMethodMapping.put("simpleLayout_5", new String[][] {});
        pzExternalMethodMapping.put("simpleLayout_7", new String[][] {});
        pzExternalMethodMapping.put("simpleLayout_4", new String[][] {});
        pzExternalMethodMapping.put("simpleLayout_9", new String[][] {});
        pzExternalMethodMapping.put("simpleLayout_8", new String[][] {});
        pzExternalMethodMapping.put("simpleLayout_1", new String[][] {});
        pzExternalMethodMapping.put("simpleLayout_3", new String[][] {});
    }

    protected boolean pzDispatchToInvokedMethod() {
        return pega.dispatchToGeneratedMethodInRule(this,
                pzExternalMethodMapping, pzExternalMethodCache);
    }

    private static final com.pega.pegarules.priv.tracer.RuleTraceInfo oTraceInfo_0 = new com.pega.pegarules.priv.tracer.RuleTraceInfo(
            "RULE-HTML-SECTION GOV-EPASS-WORK-EPASSREGISTRATION LOGIN #20210708T122813.214 GMT",
            "GOV-EPass-Work-EPassRegistration Login", "EPass", "01-01-01",
            "20220524T111508.819 GMT");
}
